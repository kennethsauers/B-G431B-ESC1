
ElectronicSpeedControl_ESC-G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  080094cc  080094cc  0000a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098e0  080098e0  0000b4ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098e0  080098e0  0000a8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098e8  080098e8  0000b4ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098e8  080098e8  0000a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080098ec  080098ec  0000a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004ec  20000000  080098f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d8  200004ec  08009ddc  0000b4ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bc4  08009ddc  0000bbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b4ec  2**0
                  CONTENTS, READONLY
 12 .debug_line   0004c515  00000000  00000000  0000b51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000088  00000000  00000000  00057a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004c144  00000000  00000000  00057ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009597  00000000  00000000  000a3bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000020e8  00000000  00000000  000ad198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010b96e  00000000  00000000  000af280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000037e5  00000000  00000000  001babee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001fbbe  00000000  00000000  001be3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ef21  00000000  00000000  001ddf91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020ceb2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055bc  00000000  00000000  0020cef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004ec 	.word	0x200004ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080094b4 	.word	0x080094b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004f0 	.word	0x200004f0
 8000214:	080094b4 	.word	0x080094b4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	@ (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000548:	f003 ff76 	bl	8004438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	@ (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	@ (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	@ (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000572:	f008 ff6d 	bl	8009450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000576:	f000 fc57 	bl	8000e28 <main>

0800057a <LoopForever>:

LoopForever:
    b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	200004ec 	.word	0x200004ec
  ldr r2, =_sidata
 8000588:	080098f0 	.word	0x080098f0
  ldr r2, =_sbss
 800058c:	200004ec 	.word	0x200004ec
  ldr r4, =_ebss
 8000590:	20001bc4 	.word	0x20001bc4

08000594 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <BusFault_Handler>
	...

08000598 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 800059c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800059e:	6940      	ldr	r0, [r0, #20]
 80005a0:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80005a2:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005a4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80005a6:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80005aa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005ae:	6960      	ldr	r0, [r4, #20]
 80005b0:	f104 011c 	add.w	r1, r4, #28
 80005b4:	462b      	mov	r3, r5
 80005b6:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80005b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80005bc:	4718      	bx	r3
 80005be:	bf00      	nop

080005c0 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80005c0:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005c2:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80005c4:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80005c6:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005ca:	4c1e      	ldr	r4, [pc, #120]	@ (8000644 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005cc:	01db      	lsls	r3, r3, #7
 80005ce:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005d2:	784a      	ldrb	r2, [r1, #1]
 80005d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005d8:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80005da:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005de:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005e8:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005ec:	5ca2      	ldrb	r2, [r4, r2]
 80005ee:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005f2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005f4:	5ca2      	ldrb	r2, [r4, r2]
 80005f6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005fa:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005fc:	5ca2      	ldrb	r2, [r4, r2]
 80005fe:	4c12      	ldr	r4, [pc, #72]	@ (8000648 <ASPEP_sendBeacon+0x88>)
 8000600:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000604:	5ca2      	ldrb	r2, [r4, r2]
 8000606:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800060a:	f043 0305 	orr.w	r3, r3, #5
 800060e:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000612:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000614:	b14b      	cbz	r3, 800062a <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000616:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000618:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800061c:	b913      	cbnz	r3, 8000624 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 800061e:	2302      	movs	r3, #2
 8000620:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000628:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800062a:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800062e:	2303      	movs	r3, #3
 8000630:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000634:	6481      	str	r1, [r0, #72]	@ 0x48
 8000636:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000638:	2204      	movs	r2, #4
 800063a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 800063c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000640:	6940      	ldr	r0, [r0, #20]
 8000642:	4718      	bx	r3
 8000644:	080094dc 	.word	0x080094dc
 8000648:	080094cc 	.word	0x080094cc

0800064c <ASPEP_sendPing>:
{
 800064c:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 800064e:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000650:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000654:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000658:	4d1d      	ldr	r5, [pc, #116]	@ (80006d0 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 800065a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800065e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000662:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000666:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800066a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 800066e:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000672:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4c16      	ldr	r4, [pc, #88]	@ (80006d4 <ASPEP_sendPing+0x88>)
 800067a:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800067e:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000682:	5ca2      	ldrb	r2, [r4, r2]
 8000684:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000688:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800068a:	5ca2      	ldrb	r2, [r4, r2]
 800068c:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000690:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000692:	5ca2      	ldrb	r2, [r4, r2]
 8000694:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000698:	5ceb      	ldrb	r3, [r5, r3]
 800069a:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800069e:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80006a2:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80006a4:	b143      	cbz	r3, 80006b8 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80006a6:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80006a8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80006ac:	b913      	cbnz	r3, 80006b4 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80006b4:	bc30      	pop	{r4, r5}
 80006b6:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80006b8:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80006bc:	2303      	movs	r3, #3
 80006be:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80006c2:	6481      	str	r1, [r0, #72]	@ 0x48
 80006c4:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80006c6:	2204      	movs	r2, #4
 80006c8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80006ca:	6940      	ldr	r0, [r0, #20]
}
 80006cc:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80006ce:	4718      	bx	r3
 80006d0:	080094cc 	.word	0x080094cc
 80006d4:	080094dc 	.word	0x080094dc

080006d8 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006d8:	2a0a      	cmp	r2, #10
 80006da:	d009      	beq.n	80006f0 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006dc:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d91d      	bls.n	8000720 <ASPEP_getBuffer+0x48>
 80006e4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d90d      	bls.n	8000708 <ASPEP_getBuffer+0x30>
        result = false;
 80006ec:	2000      	movs	r0, #0
}
 80006ee:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006f0:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d8f9      	bhi.n	80006ec <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 80006fa:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006fc:	3304      	adds	r3, #4
 80006fe:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000700:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000704:	2001      	movs	r0, #1
 8000706:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000708:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 800070a:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 800070e:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000712:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000714:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000718:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800071a:	600b      	str	r3, [r1, #0]
  bool result = true;
 800071c:	2001      	movs	r0, #1
 800071e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000720:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000722:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000726:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800072a:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 800072c:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000730:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000732:	600b      	str	r3, [r1, #0]
 8000734:	e7f2      	b.n	800071c <ASPEP_getBuffer+0x44>
 8000736:	bf00      	nop

08000738 <ASPEP_sendPacket>:
{
 8000738:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800073a:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 800073e:	2802      	cmp	r0, #2
 8000740:	d001      	beq.n	8000746 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000742:	2002      	movs	r0, #2
 8000744:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000746:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 800074a:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 800074e:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000752:	2801      	cmp	r0, #1
 8000754:	d104      	bne.n	8000760 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000756:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 800075a:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 800075c:	3202      	adds	r2, #2
 800075e:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000760:	2b0a      	cmp	r3, #10
 8000762:	d105      	bne.n	8000770 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000764:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000768:	b348      	cbz	r0, 80007be <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 800076a:	2000      	movs	r0, #0
 800076c:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000770:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000774:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000776:	4d34      	ldr	r5, [pc, #208]	@ (8000848 <ASPEP_sendPacket+0x110>)
 8000778:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 800077a:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800077c:	5d2e      	ldrb	r6, [r5, r4]
 800077e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000782:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000784:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000788:	5d2e      	ldrb	r6, [r5, r4]
 800078a:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800078e:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000790:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000792:	5d2c      	ldrb	r4, [r5, r4]
 8000794:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000798:	406c      	eors	r4, r5
 800079a:	4d2c      	ldr	r5, [pc, #176]	@ (800084c <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 800079c:	5d2c      	ldrb	r4, [r5, r4]
 800079e:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80007a2:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80007a6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80007a8:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80007ac:	b1b9      	cbz	r1, 80007de <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ae:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	d006      	beq.n	80007c2 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80007b4:	2b0a      	cmp	r3, #10
 80007b6:	d02a      	beq.n	800080e <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 80007b8:	b37b      	cbz	r3, 800081a <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 80007ba:	2000      	movs	r0, #0
}
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80007be:	2001      	movs	r0, #1
}
 80007c0:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007c2:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80007c6:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 80007c8:	458e      	cmp	lr, r1
 80007ca:	bf14      	ite	ne
 80007cc:	2003      	movne	r0, #3
 80007ce:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007d0:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 80007d4:	b3a1      	cbz	r1, 8000840 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007d6:	2102      	movs	r1, #2
 80007d8:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007da:	809a      	strh	r2, [r3, #4]
}
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80007de:	2b09      	cmp	r3, #9
 80007e0:	d029      	beq.n	8000836 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80007e2:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007e4:	f04f 0303 	mov.w	r3, #3
 80007e8:	bf0b      	itete	eq
 80007ea:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007ee:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80007f2:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007f6:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007fa:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 80007fe:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000800:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000804:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000808:	4671      	mov	r1, lr
 800080a:	4798      	blx	r3
 800080c:	e7d5      	b.n	80007ba <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 800080e:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000812:	2b01      	cmp	r3, #1
 8000814:	d009      	beq.n	800082a <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000816:	2003      	movs	r0, #3
}
 8000818:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 800081a:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f9      	bne.n	8000816 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000822:	2302      	movs	r3, #2
 8000824:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000828:	e7c7      	b.n	80007ba <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 800082a:	2302      	movs	r3, #2
 800082c:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000830:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000834:	e7c1      	b.n	80007ba <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000836:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800083a:	2103      	movs	r1, #3
 800083c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800083e:	e7dc      	b.n	80007fa <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000840:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000844:	e7c7      	b.n	80007d6 <ASPEP_sendPacket+0x9e>
 8000846:	bf00      	nop
 8000848:	080094dc 	.word	0x080094dc
 800084c:	080094cc 	.word	0x080094cc

08000850 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000850:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000852:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000856:	2b03      	cmp	r3, #3
{
 8000858:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800085a:	d013      	beq.n	8000884 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800085c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800085e:	2100      	movs	r1, #0
 8000860:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000862:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000866:	2a02      	cmp	r2, #2
 8000868:	d013      	beq.n	8000892 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800086a:	2b02      	cmp	r3, #2
 800086c:	d11d      	bne.n	80008aa <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800086e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000872:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000874:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000876:	2204      	movs	r2, #4
 8000878:	6940      	ldr	r0, [r0, #20]
 800087a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 800087c:	2303      	movs	r3, #3
 800087e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000882:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000884:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000888:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800088a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800088c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000890:	d10b      	bne.n	80008aa <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000892:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000896:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000898:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800089a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800089c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800089e:	6960      	ldr	r0, [r4, #20]
 80008a0:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 80008a2:	2303      	movs	r3, #3
 80008a4:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 80008a8:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 80008aa:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 80008ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80008ae:	b1cb      	cbz	r3, 80008e4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80008b0:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80008b2:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 80008b4:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 80008b6:	6819      	ldr	r1, [r3, #0]
 80008b8:	889a      	ldrh	r2, [r3, #4]
 80008ba:	6960      	ldr	r0, [r4, #20]
 80008bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80008be:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008c0:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d007      	beq.n	80008d8 <ASPEP_HWDataTransmittedIT+0x88>
 80008c8:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d003      	beq.n	80008d8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008d4:	b662      	cpsie	i
}
 80008d6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80008da:	0063      	lsls	r3, r4, #1
 80008dc:	3368      	adds	r3, #104	@ 0x68
 80008de:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008e0:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 80008e2:	e7f7      	b.n	80008d4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008e4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80008e6:	e7f5      	b.n	80008d4 <ASPEP_HWDataTransmittedIT+0x84>

080008e8 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 80008e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008ec:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008f0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008f2:	2300      	movs	r3, #0
{
 80008f4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008f6:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008f8:	b19d      	cbz	r5, 8000922 <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008fa:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008fe:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000902:	2d01      	cmp	r5, #1
 8000904:	d04e      	beq.n	80009a4 <ASPEP_RXframeProcess+0xbc>
 8000906:	2d02      	cmp	r5, #2
 8000908:	d012      	beq.n	8000930 <ASPEP_RXframeProcess+0x48>
 800090a:	b9d5      	cbnz	r5, 8000942 <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 800090c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800090e:	2b05      	cmp	r3, #5
 8000910:	d062      	beq.n	80009d8 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000912:	2b06      	cmp	r3, #6
 8000914:	d115      	bne.n	8000942 <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000916:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800091a:	4629      	mov	r1, r5
 800091c:	f7ff fe96 	bl	800064c <ASPEP_sendPing>
 8000920:	e00f      	b.n	8000942 <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000922:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000926:	b9b3      	cbnz	r3, 8000956 <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000928:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 800092a:	4628      	mov	r0, r5
 800092c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000930:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8000932:	2d05      	cmp	r5, #5
 8000934:	f000 80d9 	beq.w	8000aea <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8000938:	2d06      	cmp	r5, #6
 800093a:	f000 8125 	beq.w	8000b88 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800093e:	2d09      	cmp	r5, #9
 8000940:	d03e      	beq.n	80009c0 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000942:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000944:	6960      	ldr	r0, [r4, #20]
 8000946:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000948:	2204      	movs	r2, #4
 800094a:	f104 011c 	add.w	r1, r4, #28
 800094e:	4798      	blx	r3
}
 8000950:	4628      	mov	r0, r5
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000956:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 800095a:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800095c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000960:	488c      	ldr	r0, [pc, #560]	@ (8000b94 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000962:	4d8d      	ldr	r5, [pc, #564]	@ (8000b98 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000964:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000968:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800096c:	5c82      	ldrb	r2, [r0, r2]
 800096e:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000972:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000974:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000976:	5ceb      	ldrb	r3, [r5, r3]
 8000978:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 800097c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800097e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000980:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 80f4 	beq.w	8000b70 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8000988:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800098a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800098e:	b913      	cbnz	r3, 8000996 <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8000990:	2302      	movs	r3, #2
 8000992:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000996:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000998:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800099a:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 800099c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 80009a0:	4798      	blx	r3
 80009a2:	e7c1      	b.n	8000928 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 80009a4:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80009a6:	2905      	cmp	r1, #5
 80009a8:	d064      	beq.n	8000a74 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 80009aa:	2906      	cmp	r1, #6
 80009ac:	d1c9      	bne.n	8000942 <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80009ae:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80009b2:	4629      	mov	r1, r5
 80009b4:	f7ff fe4a 	bl	800064c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009b8:	2302      	movs	r3, #2
 80009ba:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80009be:	e7c0      	b.n	8000942 <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80009c0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 80009c4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80009c8:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80009ca:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80009cc:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80009ce:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80009d2:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 80009d4:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 80009d6:	e7b5      	b.n	8000944 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009d8:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009dc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009e0:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009e2:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e6:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ea:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80009ee:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80009f2:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009f4:	4563      	cmp	r3, ip
 80009f6:	bf28      	it	cs
 80009f8:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fa:	42b0      	cmp	r0, r6
 80009fc:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009fe:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a02:	bf28      	it	cs
 8000a04:	4631      	movcs	r1, r6
 8000a06:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000a0a:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0e:	45b8      	cmp	r8, r7
 8000a10:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a12:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a16:	bf28      	it	cs
 8000a18:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a1a:	45ca      	cmp	sl, r9
 8000a1c:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a1e:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a22:	bf28      	it	cs
 8000a24:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a26:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a2a:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a2c:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a2e:	d81b      	bhi.n	8000a68 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000a30:	459c      	cmp	ip, r3
 8000a32:	d819      	bhi.n	8000a68 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000a34:	45b8      	cmp	r8, r7
 8000a36:	d817      	bhi.n	8000a68 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000a38:	45ca      	cmp	sl, r9
 8000a3a:	d815      	bhi.n	8000a68 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000a3c:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 8000a40:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d10f      	bne.n	8000a68 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a48:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a4a:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a4c:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a4e:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a50:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000a52:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a56:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000a58:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a5a:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000a5c:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000a60:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000a64:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a68:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f7ff fda7 	bl	80005c0 <ASPEP_sendBeacon>
 8000a72:	e766      	b.n	8000942 <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a74:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a76:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a7a:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a7c:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a80:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a84:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000a88:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000a8c:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a8e:	42a8      	cmp	r0, r5
 8000a90:	bf28      	it	cs
 8000a92:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a94:	4561      	cmp	r1, ip
 8000a96:	460f      	mov	r7, r1
 8000a98:	bf28      	it	cs
 8000a9a:	4667      	movcs	r7, ip
 8000a9c:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000aa0:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000aa4:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa8:	42b7      	cmp	r7, r6
 8000aaa:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aac:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ab0:	bf28      	it	cs
 8000ab2:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ab4:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ab6:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aba:	46c1      	mov	r9, r8
 8000abc:	bf28      	it	cs
 8000abe:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac0:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ac4:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ac8:	d80b      	bhi.n	8000ae2 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000aca:	4285      	cmp	r5, r0
 8000acc:	d809      	bhi.n	8000ae2 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000ace:	42b7      	cmp	r7, r6
 8000ad0:	d807      	bhi.n	8000ae2 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000ad2:	45f0      	cmp	r8, lr
 8000ad4:	d805      	bhi.n	8000ae2 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ad6:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000ada:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d0c2      	beq.n	8000a68 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000ae8:	e7be      	b.n	8000a68 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000aea:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000aee:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000af2:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000af4:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000af8:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000afc:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000b00:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000b04:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000b06:	4565      	cmp	r5, ip
 8000b08:	bf28      	it	cs
 8000b0a:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b0c:	4570      	cmp	r0, lr
 8000b0e:	4607      	mov	r7, r0
 8000b10:	4619      	mov	r1, r3
 8000b12:	bf28      	it	cs
 8000b14:	4677      	movcs	r7, lr
 8000b16:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000b1a:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8000b1e:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b22:	42b7      	cmp	r7, r6
 8000b24:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b26:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000b2a:	bf28      	it	cs
 8000b2c:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b2e:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b30:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000b34:	46ca      	mov	sl, r9
 8000b36:	bf28      	it	cs
 8000b38:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b3a:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000b3e:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000b40:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000b42:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8000b46:	d80d      	bhi.n	8000b64 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b48:	45ac      	cmp	ip, r5
 8000b4a:	d80b      	bhi.n	8000b64 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b4c:	42b7      	cmp	r7, r6
 8000b4e:	d809      	bhi.n	8000b64 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b50:	45c1      	cmp	r9, r8
 8000b52:	d807      	bhi.n	8000b64 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b54:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8000b58:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff fd29 	bl	80005c0 <ASPEP_sendBeacon>
 8000b6e:	e6e8      	b.n	8000942 <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000b70:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000b7a:	64a1      	str	r1, [r4, #72]	@ 0x48
 8000b7c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000b7e:	2204      	movs	r2, #4
 8000b80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b82:	6960      	ldr	r0, [r4, #20]
 8000b84:	4798      	blx	r3
 8000b86:	e706      	b.n	8000996 <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b88:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	f7ff fd5d 	bl	800064c <ASPEP_sendPing>
 8000b92:	e6d6      	b.n	8000942 <ASPEP_RXframeProcess+0x5a>
 8000b94:	080094dc 	.word	0x080094dc
 8000b98:	080094cc 	.word	0x080094cc

08000b9c <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b9c:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8000b9e:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8000ba2:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000ba4:	b143      	cbz	r3, 8000bb8 <ASPEP_HWDataReceivedIT+0x1c>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d000      	beq.n	8000bac <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000baa:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bac:	2200      	movs	r2, #0
 8000bae:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 8000bb2:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 8000bb6:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bb8:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bba:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <ASPEP_HWDataReceivedIT+0x9c>)
 8000bbc:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bbe:	5cd3      	ldrb	r3, [r2, r3]
 8000bc0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000bc4:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000bc6:	5cd3      	ldrb	r3, [r2, r3]
 8000bc8:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000bcc:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bd4:	5cd3      	ldrb	r3, [r2, r3]
 8000bd6:	b95b      	cbnz	r3, 8000bf0 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bd8:	7f03      	ldrb	r3, [r0, #28]
 8000bda:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8000bde:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000be0:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8000be2:	d809      	bhi.n	8000bf8 <ASPEP_HWDataReceivedIT+0x5c>
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d91f      	bls.n	8000c28 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8000bee:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000bf6:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	d115      	bne.n	8000c28 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bfc:	8b83      	ldrh	r3, [r0, #28]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0ef      	beq.n	8000be8 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8000c08:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d30f      	bcc.n	8000c30 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000c10:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8000c14:	6981      	ldr	r1, [r0, #24]
 8000c16:	6940      	ldr	r0, [r0, #20]
 8000c18:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000c1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000c1e:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8000c26:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8000c2e:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c30:	2302      	movs	r3, #2
 8000c32:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8000c36:	bd10      	pop	{r4, pc}
 8000c38:	080094dc 	.word	0x080094dc

08000c3c <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8000c3c:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c44:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000c46:	6940      	ldr	r0, [r0, #20]
 8000c48:	2204      	movs	r2, #4
 8000c4a:	311c      	adds	r1, #28
 8000c4c:	4718      	bx	r3
 8000c4e:	bf00      	nop

08000c50 <HF_GetIDSize>:
#include "register_interface.h"
#include "mc_config.h"

uint8_t HF_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8000c50:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8000c54:	3808      	subs	r0, #8
 8000c56:	b2c0      	uxtb	r0, r0
 8000c58:	2810      	cmp	r0, #16
 8000c5a:	bf9a      	itte	ls
 8000c5c:	4b01      	ldrls	r3, [pc, #4]	@ (8000c64 <HF_GetIDSize+0x14>)
 8000c5e:	5c18      	ldrbls	r0, [r3, r0]
 8000c60:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8000c62:	4770      	bx	lr
 8000c64:	080095dc 	.word	0x080095dc

08000c68 <HF_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8000c68:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d003      	beq.n	8000c78 <HF_GetPtrReg+0x10>
 8000c70:	4b47      	ldr	r3, [pc, #284]	@ (8000d90 <HF_GetPtrReg+0x128>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = HF_ERROR_UNKNOWN_REG;
 8000c72:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8000c74:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8000c76:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8000c78:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8000c7c:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
    uint16_t regID = dataID & REG_MASK;
 8000c80:	b282      	uxth	r2, r0
        switch (regID)
 8000c82:	d073      	beq.n	8000d6c <HF_GetPtrReg+0x104>
 8000c84:	d812      	bhi.n	8000cac <HF_GetPtrReg+0x44>
 8000c86:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 8000c8a:	d07c      	beq.n	8000d86 <HF_GetPtrReg+0x11e>
 8000c8c:	d821      	bhi.n	8000cd2 <HF_GetPtrReg+0x6a>
 8000c8e:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 8000c92:	d070      	beq.n	8000d76 <HF_GetPtrReg+0x10e>
 8000c94:	d84c      	bhi.n	8000d30 <HF_GetPtrReg+0xc8>
 8000c96:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8000c9a:	d03d      	beq.n	8000d18 <HF_GetPtrReg+0xb0>
 8000c9c:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 8000ca0:	d1e6      	bne.n	8000c70 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000ca4:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000ca6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8000ca8:	3302      	adds	r3, #2
            break;
 8000caa:	e7e3      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000cac:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8000cb0:	d066      	beq.n	8000d80 <HF_GetPtrReg+0x118>
 8000cb2:	d81c      	bhi.n	8000cee <HF_GetPtrReg+0x86>
 8000cb4:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 8000cb8:	d04b      	beq.n	8000d52 <HF_GetPtrReg+0xea>
 8000cba:	d841      	bhi.n	8000d40 <HF_GetPtrReg+0xd8>
 8000cbc:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 8000cc0:	d025      	beq.n	8000d0e <HF_GetPtrReg+0xa6>
 8000cc2:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 8000cc6:	d1d3      	bne.n	8000c70 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8000cc8:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000ccc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8000cce:	3316      	adds	r3, #22
            break;
 8000cd0:	e7d0      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000cd2:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 8000cd6:	d041      	beq.n	8000d5c <HF_GetPtrReg+0xf4>
 8000cd8:	f5b2 6f19 	cmp.w	r2, #2448	@ 0x990
 8000cdc:	d020      	beq.n	8000d20 <HF_GetPtrReg+0xb8>
 8000cde:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 8000ce2:	d1c5      	bne.n	8000c70 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8000ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000ce6:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000ce8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8000cea:	330a      	adds	r3, #10
            break;
 8000cec:	e7c2      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000cee:	f5b2 6f49 	cmp.w	r2, #3216	@ 0xc90
 8000cf2:	d038      	beq.n	8000d66 <HF_GetPtrReg+0xfe>
 8000cf4:	f641 43d0 	movw	r3, #7376	@ 0x1cd0
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d016      	beq.n	8000d2a <HF_GetPtrReg+0xc2>
 8000cfc:	4826      	ldr	r0, [pc, #152]	@ (8000d98 <HF_GetPtrReg+0x130>)
 8000cfe:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <HF_GetPtrReg+0x128>)
 8000d00:	f5b2 6f45 	cmp.w	r2, #3152	@ 0xc50
 8000d04:	bf0a      	itet	eq
 8000d06:	4603      	moveq	r3, r0
 8000d08:	2005      	movne	r0, #5
 8000d0a:	2000      	moveq	r0, #0
 8000d0c:	e7b2      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d12:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8000d14:	3314      	adds	r3, #20
            break;
 8000d16:	e7ad      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <HF_GetPtrReg+0x12c>)
  uint8_t retVal = HF_CMD_OK;
 8000d1a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
             break;
 8000d1e:	e7a9      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d22:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d24:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8000d26:	330e      	adds	r3, #14
            break;
 8000d28:	e7a4      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HF_GetPtrReg+0x134>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	e7a1      	b.n	8000c74 <HF_GetPtrReg+0xc>
 8000d30:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 8000d34:	d19c      	bne.n	8000c70 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d38:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d3a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8000d3c:	3306      	adds	r3, #6
            break;
 8000d3e:	e799      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000d40:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <HF_GetPtrReg+0x138>)
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <HF_GetPtrReg+0x128>)
 8000d44:	f5b2 6f35 	cmp.w	r2, #2896	@ 0xb50
 8000d48:	bf0a      	itet	eq
 8000d4a:	4603      	moveq	r3, r0
 8000d4c:	2005      	movne	r0, #5
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	e790      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d54:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d56:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8000d58:	3318      	adds	r3, #24
            break;
 8000d5a:	e78b      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d60:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8000d62:	330c      	adds	r3, #12
            break;
 8000d64:	e786      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HF_GetPtrReg+0x13c>)
  uint8_t retVal = HF_CMD_OK;
 8000d68:	2000      	movs	r0, #0
 8000d6a:	e783      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d70:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8000d72:	3312      	adds	r3, #18
            break;
 8000d74:	e77e      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d7a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8000d7c:	3304      	adds	r3, #4
            break;
 8000d7e:	e779      	b.n	8000c74 <HF_GetPtrReg+0xc>
        switch (regID)
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HF_GetPtrReg+0x140>)
  uint8_t retVal = HF_CMD_OK;
 8000d82:	2000      	movs	r0, #0
 8000d84:	e776      	b.n	8000c74 <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8000d86:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HF_GetPtrReg+0x12c>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8000d8a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8000d8c:	3308      	adds	r3, #8
            break;
 8000d8e:	e771      	b.n	8000c74 <HF_GetPtrReg+0xc>
 8000d90:	20000508 	.word	0x20000508
 8000d94:	20000000 	.word	0x20000000
 8000d98:	200000d8 	.word	0x200000d8
 8000d9c:	200003c4 	.word	0x200003c4
 8000da0:	2000006c 	.word	0x2000006c
 8000da4:	200000da 	.word	0x200000da
 8000da8:	20000074 	.word	0x20000074
 8000dac:	00000000 	.word	0x00000000

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b510      	push	{r4, lr}
 8000db2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db4:	2238      	movs	r2, #56	@ 0x38
 8000db6:	2100      	movs	r1, #0
 8000db8:	a806      	add	r0, sp, #24
 8000dba:	f008 fb41 	bl	8009440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8000dc4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8000dc8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dca:	f004 ff67 	bl	8005c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dce:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000e20 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dd4:	2255      	movs	r2, #85	@ 0x55
 8000dd6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000ddc:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de4:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000de8:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dec:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	f004 ffcf 	bl	8005d90 <HAL_RCC_OscConfig>
 8000df2:	b108      	cbz	r0, 8000df8 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfe:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e02:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e0c:	f005 fa3e 	bl	800628c <HAL_RCC_ClockConfig>
 8000e10:	b108      	cbz	r0, 8000e16 <SystemClock_Config+0x66>
 8000e12:	b672      	cpsid	i
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 8000e16:	f005 fb67 	bl	80064e8 <HAL_RCC_EnableCSS>
}
 8000e1a:	b014      	add	sp, #80	@ 0x50
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	00000001 	.word	0x00000001
 8000e24:	00010000 	.word	0x00010000

08000e28 <main>:
{
 8000e28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	2400      	movs	r4, #0
{
 8000e2e:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8000e30:	f003 fb32 	bl	8004498 <HAL_Init>
  SystemClock_Config();
 8000e34:	f7ff ffbc 	bl	8000db0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	4daa      	ldr	r5, [pc, #680]	@ (80010e8 <main+0x2c0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	941b      	str	r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e42:	48aa      	ldr	r0, [pc, #680]	@ (80010ec <main+0x2c4>)
  hadc1.Instance = ADC1;
 8000e44:	f8df 92e0 	ldr.w	r9, [pc, #736]	@ 8001128 <main+0x300>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000e4e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	9305      	str	r3, [sp, #20]
 8000e56:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e58:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e5a:	f043 0320 	orr.w	r3, r3, #32
 8000e5e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000e60:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e62:	f003 0320 	and.w	r3, r3, #32
 8000e66:	9306      	str	r3, [sp, #24]
 8000e68:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000e72:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	9307      	str	r3, [sp, #28]
 8000e7a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e7e:	f043 0302 	orr.w	r3, r3, #2
 8000e82:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000e84:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000e8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000e92:	9217      	str	r2, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e98:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9a:	9318      	str	r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f004 fcc8 	bl	8005830 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ea0:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000ea8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64ab      	str	r3, [r5, #72]	@ 0x48
 8000eba:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8000ebc:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ec2:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec4:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ec6:	223c      	movs	r2, #60	@ 0x3c
 8000ec8:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8000eca:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ed0:	f008 fab6 	bl	8009440 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	a80f      	add	r0, sp, #60	@ 0x3c
 8000eda:	f008 fab1 	bl	8009440 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000ede:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee2:	e9c9 4401 	strd	r4, r4, [r9, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee6:	e9c9 440b 	strd	r4, r4, [r9, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8000eea:	f8c9 4010 	str.w	r4, [r9, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eee:	f8a9 401c 	strh.w	r4, [r9, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	f889 4024 	strb.w	r4, [r9, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef6:	f889 4038 	strb.w	r4, [r9, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efa:	f8c9 403c 	str.w	r4, [r9, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000efe:	f889 4040 	strb.w	r4, [r9, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8000f02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	2501      	movs	r5, #1
 8000f08:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8000f0a:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0c:	4648      	mov	r0, r9
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0e:	e9c9 5405 	strd	r5, r4, [r9, #20]
  hadc1.Instance = ADC1;
 8000f12:	f8c9 2000 	str.w	r2, [r9]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f16:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f1a:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1e:	f003 fae5 	bl	80044ec <HAL_ADC_Init>
 8000f22:	b108      	cbz	r0, 8000f28 <main+0x100>
 8000f24:	b672      	cpsid	i
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0xfe>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f28:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f2a:	a90c      	add	r1, sp, #48	@ 0x30
 8000f2c:	4648      	mov	r0, r9
 8000f2e:	f004 f93f 	bl	80051b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f32:	b108      	cbz	r0, 8000f38 <main+0x110>
 8000f34:	b672      	cpsid	i
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x10e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f38:	4b6d      	ldr	r3, [pc, #436]	@ (80010f0 <main+0x2c8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f3a:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f3e:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8000f42:	e9cd 401b 	strd	r4, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f46:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f4a:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000f4e:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f52:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f56:	f04f 0a84 	mov.w	sl, #132	@ 0x84
 8000f5a:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f5c:	a917      	add	r1, sp, #92	@ 0x5c
 8000f5e:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f60:	e9cd a321 	strd	sl, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000f64:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000f66:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f68:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f6c:	f003 fe22 	bl	8004bb4 <HAL_ADCEx_InjectedConfigChannel>
 8000f70:	b108      	cbz	r0, 8000f76 <main+0x14e>
 8000f72:	b672      	cpsid	i
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x14c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f76:	4a5f      	ldr	r2, [pc, #380]	@ (80010f4 <main+0x2cc>)
 8000f78:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f7c:	a917      	add	r1, sp, #92	@ 0x5c
 8000f7e:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f80:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f84:	f003 fe16 	bl	8004bb4 <HAL_ADCEx_InjectedConfigChannel>
 8000f88:	b108      	cbz	r0, 8000f8e <main+0x166>
 8000f8a:	b672      	cpsid	i
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <main+0x164>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 800112c <main+0x304>
  sConfig.Offset = 0;
 8000f92:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	a90f      	add	r1, sp, #60	@ 0x3c
 8000f98:	4648      	mov	r0, r9
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9a:	e9cd 4811 	strd	r4, r8, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f9e:	e9cd e20f 	strd	lr, r2, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa2:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	f003 fb96 	bl	80046d4 <HAL_ADC_ConfigChannel>
 8000fa8:	b108      	cbz	r0, 8000fae <main+0x186>
 8000faa:	b672      	cpsid	i
  while (1)
 8000fac:	e7fe      	b.n	8000fac <main+0x184>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fae:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8001130 <main+0x308>
 8000fb2:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	a90f      	add	r1, sp, #60	@ 0x3c
 8000fb6:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fb8:	e9cd c30f 	strd	ip, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	f003 fb8a 	bl	80046d4 <HAL_ADC_ConfigChannel>
 8000fc0:	4601      	mov	r1, r0
 8000fc2:	b108      	cbz	r0, 8000fc8 <main+0x1a0>
 8000fc4:	b672      	cpsid	i
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <main+0x19e>
  hadc2.Instance = ADC2;
 8000fc8:	f8df 9168 	ldr.w	r9, [pc, #360]	@ 8001134 <main+0x30c>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000fcc:	9001      	str	r0, [sp, #4]
 8000fce:	223c      	movs	r2, #60	@ 0x3c
 8000fd0:	a817      	add	r0, sp, #92	@ 0x5c
 8000fd2:	f008 fa35 	bl	8009440 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fd6:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	@ (80010f8 <main+0x2d0>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000fda:	f8c9 700c 	str.w	r7, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fde:	4648      	mov	r0, r9
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe0:	e9c9 1101 	strd	r1, r1, [r9, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000fe4:	e9c9 1504 	strd	r1, r5, [r9, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe8:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fec:	f8a9 101c 	strh.w	r1, [r9, #28]
  hadc2.Init.NbrOfConversion = 1;
 8000ff0:	f8c9 5020 	str.w	r5, [r9, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ff4:	f889 1024 	strb.w	r1, [r9, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ff8:	f889 1038 	strb.w	r1, [r9, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ffc:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001000:	f889 1040 	strb.w	r1, [r9, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001004:	f8c9 2000 	str.w	r2, [r9]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001008:	f003 fa70 	bl	80044ec <HAL_ADC_Init>
 800100c:	b108      	cbz	r0, 8001012 <main+0x1ea>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <main+0x1e8>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001012:	4a3a      	ldr	r2, [pc, #232]	@ (80010fc <main+0x2d4>)
  sConfigInjected.InjectedOffset = 0;
 8001014:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001016:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001018:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 800101c:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001020:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001024:	a917      	add	r1, sp, #92	@ 0x5c
 8001026:	4648      	mov	r0, r9
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001028:	e9cd b518 	strd	fp, r5, [sp, #96]	@ 0x60
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800102c:	e9cd 841a 	strd	r8, r4, [sp, #104]	@ 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001030:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001032:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001036:	9322      	str	r3, [sp, #136]	@ 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001038:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800103a:	f003 fdbb 	bl	8004bb4 <HAL_ADCEx_InjectedConfigChannel>
 800103e:	b108      	cbz	r0, 8001044 <main+0x21c>
 8001040:	b672      	cpsid	i
  while (1)
 8001042:	e7fe      	b.n	8001042 <main+0x21a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001044:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <main+0x2c8>)
 8001046:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001048:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800104a:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800104e:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001050:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001052:	f003 fdaf 	bl	8004bb4 <HAL_ADCEx_InjectedConfigChannel>
 8001056:	4603      	mov	r3, r0
 8001058:	b108      	cbz	r0, 800105e <main+0x236>
 800105a:	b672      	cpsid	i
  while (1)
 800105c:	e7fe      	b.n	800105c <main+0x234>
  hcomp1.Instance = COMP1;
 800105e:	4828      	ldr	r0, [pc, #160]	@ (8001100 <main+0x2d8>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001060:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001064:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001068:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 800106a:	4b26      	ldr	r3, [pc, #152]	@ (8001104 <main+0x2dc>)
 800106c:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001072:	f004 f901 	bl	8005278 <HAL_COMP_Init>
 8001076:	b108      	cbz	r0, 800107c <main+0x254>
 8001078:	b672      	cpsid	i
  while (1)
 800107a:	e7fe      	b.n	800107a <main+0x252>
  hcomp2.Instance = COMP2;
 800107c:	4822      	ldr	r0, [pc, #136]	@ (8001108 <main+0x2e0>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800107e:	4e23      	ldr	r6, [pc, #140]	@ (800110c <main+0x2e4>)
 8001080:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001082:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001084:	e9c0 6300 	strd	r6, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001088:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800108c:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001090:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001092:	f004 f8f1 	bl	8005278 <HAL_COMP_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	b108      	cbz	r0, 800109e <main+0x276>
 800109a:	b672      	cpsid	i
  while (1)
 800109c:	e7fe      	b.n	800109c <main+0x274>
  hcomp4.Instance = COMP4;
 800109e:	481c      	ldr	r0, [pc, #112]	@ (8001110 <main+0x2e8>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80010a0:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80010a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80010a8:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <main+0x2ec>)
 80010ae:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80010b0:	f004 f8e2 	bl	8005278 <HAL_COMP_Init>
 80010b4:	b108      	cbz	r0, 80010ba <main+0x292>
 80010b6:	b672      	cpsid	i
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0x290>
  hcordic.Instance = CORDIC;
 80010ba:	4817      	ldr	r0, [pc, #92]	@ (8001118 <main+0x2f0>)
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <main+0x2f4>)
 80010be:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80010c0:	f004 f97a 	bl	80053b8 <HAL_CORDIC_Init>
 80010c4:	4601      	mov	r1, r0
 80010c6:	b108      	cbz	r0, 80010cc <main+0x2a4>
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <main+0x2a2>
  hdac3.Instance = DAC3;
 80010cc:	4d14      	ldr	r5, [pc, #80]	@ (8001120 <main+0x2f8>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80010ce:	2230      	movs	r2, #48	@ 0x30
 80010d0:	a817      	add	r0, sp, #92	@ 0x5c
 80010d2:	f008 f9b5 	bl	8009440 <memset>
  hdac3.Instance = DAC3;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <main+0x2fc>)
 80010d8:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80010da:	4628      	mov	r0, r5
 80010dc:	f004 fa14 	bl	8005508 <HAL_DAC_Init>
 80010e0:	4602      	mov	r2, r0
 80010e2:	b348      	cbz	r0, 8001138 <main+0x310>
 80010e4:	b672      	cpsid	i
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <main+0x2be>
 80010e8:	40021000 	.word	0x40021000
 80010ec:	48000800 	.word	0x48000800
 80010f0:	0c900008 	.word	0x0c900008
 80010f4:	32601000 	.word	0x32601000
 80010f8:	50000100 	.word	0x50000100
 80010fc:	cb8c0000 	.word	0xcb8c0000
 8001100:	200007e4 	.word	0x200007e4
 8001104:	40010200 	.word	0x40010200
 8001108:	200007c0 	.word	0x200007c0
 800110c:	40010204 	.word	0x40010204
 8001110:	2000079c 	.word	0x2000079c
 8001114:	4001020c 	.word	0x4001020c
 8001118:	20000774 	.word	0x20000774
 800111c:	40020c00 	.word	0x40020c00
 8001120:	20000760 	.word	0x20000760
 8001124:	50001000 	.word	0x50001000
 8001128:	20000874 	.word	0x20000874
 800112c:	04300002 	.word	0x04300002
 8001130:	14f00020 	.word	0x14f00020
 8001134:	20000808 	.word	0x20000808
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001138:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800113a:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800113e:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001142:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001144:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001146:	a917      	add	r1, sp, #92	@ 0x5c
 8001148:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800114a:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800114e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001150:	f004 f9f0 	bl	8005534 <HAL_DAC_ConfigChannel>
 8001154:	b108      	cbz	r0, 800115a <main+0x332>
 8001156:	b672      	cpsid	i
  while (1)
 8001158:	e7fe      	b.n	8001158 <main+0x330>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800115a:	4628      	mov	r0, r5
 800115c:	2210      	movs	r2, #16
 800115e:	a917      	add	r1, sp, #92	@ 0x5c
 8001160:	f004 f9e8 	bl	8005534 <HAL_DAC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	b108      	cbz	r0, 800116c <main+0x344>
 8001168:	b672      	cpsid	i
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x342>
  hopamp1.Instance = OPAMP1;
 800116c:	48a0      	ldr	r0, [pc, #640]	@ (80013f0 <main+0x5c8>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800116e:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001172:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001176:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001178:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800117a:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800117c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800117e:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8001182:	4b9c      	ldr	r3, [pc, #624]	@ (80013f4 <main+0x5cc>)
 8001184:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001186:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800118a:	f004 fd0f 	bl	8005bac <HAL_OPAMP_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	b108      	cbz	r0, 8001196 <main+0x36e>
 8001192:	b672      	cpsid	i
  while (1)
 8001194:	e7fe      	b.n	8001194 <main+0x36c>
  hopamp2.Instance = OPAMP2;
 8001196:	4898      	ldr	r0, [pc, #608]	@ (80013f8 <main+0x5d0>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001198:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800119c:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800119e:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011a0:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011a2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 80011a4:	4b95      	ldr	r3, [pc, #596]	@ (80013fc <main+0x5d4>)
 80011a6:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80011a8:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80011ac:	f004 fcfe 	bl	8005bac <HAL_OPAMP_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b108      	cbz	r0, 80011b8 <main+0x390>
 80011b4:	b672      	cpsid	i
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <main+0x38e>
  hopamp3.Instance = OPAMP3;
 80011b8:	4891      	ldr	r0, [pc, #580]	@ (8001400 <main+0x5d8>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80011ba:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80011be:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80011c0:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80011c2:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80011c4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 80011c6:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 80011c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001404 <main+0x5dc>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80011ca:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 80011cc:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80011ce:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80011d0:	f004 fcec 	bl	8005bac <HAL_OPAMP_Init>
 80011d4:	4604      	mov	r4, r0
 80011d6:	b108      	cbz	r0, 80011dc <main+0x3b4>
 80011d8:	b672      	cpsid	i
  while (1)
 80011da:	e7fe      	b.n	80011da <main+0x3b2>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80011dc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e0:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80011e4:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80011e8:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 80011ec:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80011f4:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	4601      	mov	r1, r0
 80011f8:	2234      	movs	r2, #52	@ 0x34
 80011fa:	a817      	add	r0, sp, #92	@ 0x5c
 80011fc:	f008 f920 	bl	8009440 <memset>
  htim1.Instance = TIM1;
 8001200:	4881      	ldr	r0, [pc, #516]	@ (8001408 <main+0x5e0>)
 8001202:	4b82      	ldr	r3, [pc, #520]	@ (800140c <main+0x5e4>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001204:	6145      	str	r5, [r0, #20]
  htim1.Instance = TIM1;
 8001206:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001208:	2520      	movs	r5, #32
 800120a:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 800120e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001216:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800121a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121c:	f005 fb78 	bl	8006910 <HAL_TIM_PWM_Init>
 8001220:	b108      	cbz	r0, 8001226 <main+0x3fe>
 8001222:	b672      	cpsid	i
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x3fc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001226:	2570      	movs	r5, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001228:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122a:	4877      	ldr	r0, [pc, #476]	@ (8001408 <main+0x5e0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800122c:	9509      	str	r5, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122e:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001234:	f005 fd12 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	b108      	cbz	r0, 800123e <main+0x416>
 800123a:	b672      	cpsid	i
  while (1)
 800123c:	e7fe      	b.n	800123c <main+0x414>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800123e:	2401      	movs	r4, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001240:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001242:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001244:	4870      	ldr	r0, [pc, #448]	@ (8001408 <main+0x5e0>)
 8001246:	aa0c      	add	r2, sp, #48	@ 0x30
 8001248:	4621      	mov	r1, r4
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800124a:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800124e:	f005 fda5 	bl	8006d9c <HAL_TIMEx_ConfigBreakInput>
 8001252:	b108      	cbz	r0, 8001258 <main+0x430>
 8001254:	b672      	cpsid	i
  while (1)
 8001256:	e7fe      	b.n	8001256 <main+0x42e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001258:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800125a:	486b      	ldr	r0, [pc, #428]	@ (8001408 <main+0x5e0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 800125c:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800125e:	aa0c      	add	r2, sp, #48	@ 0x30
 8001260:	4621      	mov	r1, r4
 8001262:	f005 fd9b 	bl	8006d9c <HAL_TIMEx_ConfigBreakInput>
 8001266:	b108      	cbz	r0, 800126c <main+0x444>
 8001268:	b672      	cpsid	i
  while (1)
 800126a:	e7fe      	b.n	800126a <main+0x442>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800126c:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 800126e:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001270:	4865      	ldr	r0, [pc, #404]	@ (8001408 <main+0x5e0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001272:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001274:	4621      	mov	r1, r4
 8001276:	f005 fd91 	bl	8006d9c <HAL_TIMEx_ConfigBreakInput>
 800127a:	4602      	mov	r2, r0
 800127c:	b108      	cbz	r0, 8001282 <main+0x45a>
 800127e:	b672      	cpsid	i
  while (1)
 8001280:	e7fe      	b.n	8001280 <main+0x458>
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001282:	2160      	movs	r1, #96	@ 0x60
 8001284:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001288:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128c:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001290:	e9cd 130f 	strd	r1, r3, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	a90f      	add	r1, sp, #60	@ 0x3c
 8001298:	485b      	ldr	r0, [pc, #364]	@ (8001408 <main+0x5e0>)
 800129a:	f005 fbf9 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 800129e:	b108      	cbz	r0, 80012a4 <main+0x47c>
 80012a0:	b672      	cpsid	i
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <main+0x47a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a4:	4858      	ldr	r0, [pc, #352]	@ (8001408 <main+0x5e0>)
 80012a6:	4632      	mov	r2, r6
 80012a8:	a90f      	add	r1, sp, #60	@ 0x3c
 80012aa:	f005 fbf1 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	b108      	cbz	r0, 80012b4 <main+0x48c>
 80012b0:	b672      	cpsid	i
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <main+0x48a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b4:	4854      	ldr	r0, [pc, #336]	@ (8001408 <main+0x5e0>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	a90f      	add	r1, sp, #60	@ 0x3c
 80012ba:	f005 fbe9 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80012be:	b108      	cbz	r0, 80012c4 <main+0x49c>
 80012c0:	b672      	cpsid	i
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <main+0x49a>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80012c4:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c8:	484f      	ldr	r0, [pc, #316]	@ (8001408 <main+0x5e0>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80012ce:	e9cd 530f 	strd	r5, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d2:	f005 fbdd 	bl	8006a90 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b108      	cbz	r0, 80012de <main+0x4b6>
 80012da:	b672      	cpsid	i
  while (1)
 80012dc:	e7fe      	b.n	80012dc <main+0x4b4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80012de:	f44f 6400 	mov.w	r4, #2048	@ 0x800
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80012e2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012e6:	e9cd 4017 	strd	r4, r0, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80012ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80012ee:	243f      	movs	r4, #63	@ 0x3f
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80012f0:	901b      	str	r0, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakFilter = 3;
 80012f6:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80012f8:	e9cd 3419 	strd	r3, r4, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012fc:	9020      	str	r0, [sp, #128]	@ 0x80
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012fe:	f44f 5400 	mov.w	r4, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001302:	4841      	ldr	r0, [pc, #260]	@ (8001408 <main+0x5e0>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001304:	9323      	str	r3, [sp, #140]	@ 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001306:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001308:	e9cd 421c 	strd	r4, r2, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130c:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001310:	e9cd 2321 	strd	r2, r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001314:	f005 fcf4 	bl	8006d00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001318:	4604      	mov	r4, r0
 800131a:	b108      	cbz	r0, 8001320 <main+0x4f8>
 800131c:	b672      	cpsid	i
  while (1)
 800131e:	e7fe      	b.n	800131e <main+0x4f6>
  HAL_TIM_MspPostInit(&htim1);
 8001320:	4839      	ldr	r0, [pc, #228]	@ (8001408 <main+0x5e0>)
 8001322:	f001 ff0b 	bl	800313c <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8001326:	483a      	ldr	r0, [pc, #232]	@ (8001410 <main+0x5e8>)
 8001328:	493a      	ldr	r1, [pc, #232]	@ (8001414 <main+0x5ec>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132a:	6284      	str	r4, [r0, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 800132c:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	230c      	movs	r3, #12
  huart2.Init.BaudRate = 1843200;
 8001332:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001336:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800133a:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001342:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	f006 f841 	bl	80073cc <HAL_UART_Init>
 800134a:	b108      	cbz	r0, 8001350 <main+0x528>
 800134c:	b672      	cpsid	i
  while (1)
 800134e:	e7fe      	b.n	800134e <main+0x526>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	482f      	ldr	r0, [pc, #188]	@ (8001410 <main+0x5e8>)
 8001354:	f006 f88c 	bl	8007470 <HAL_UARTEx_SetTxFifoThreshold>
 8001358:	4601      	mov	r1, r0
 800135a:	b108      	cbz	r0, 8001360 <main+0x538>
 800135c:	b672      	cpsid	i
  while (1)
 800135e:	e7fe      	b.n	800135e <main+0x536>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	482b      	ldr	r0, [pc, #172]	@ (8001410 <main+0x5e8>)
 8001362:	f006 f8c7 	bl	80074f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001366:	b108      	cbz	r0, 800136c <main+0x544>
 8001368:	b672      	cpsid	i
  while (1)
 800136a:	e7fe      	b.n	800136a <main+0x542>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800136c:	4828      	ldr	r0, [pc, #160]	@ (8001410 <main+0x5e8>)
 800136e:	f006 f861 	bl	8007434 <HAL_UARTEx_DisableFifoMode>
 8001372:	4604      	mov	r4, r0
 8001374:	b108      	cbz	r0, 800137a <main+0x552>
 8001376:	b672      	cpsid	i
  while (1)
 8001378:	e7fe      	b.n	8001378 <main+0x550>
  MX_MotorControl_Init();
 800137a:	f001 f8b5 	bl	80024e8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 800137e:	2201      	movs	r2, #1
 8001380:	2103      	movs	r1, #3
 8001382:	2026      	movs	r0, #38	@ 0x26
 8001384:	f004 f844 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001388:	2026      	movs	r0, #38	@ 0x26
 800138a:	f004 f87d 	bl	8005488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 800138e:	4622      	mov	r2, r4
 8001390:	2103      	movs	r1, #3
 8001392:	200b      	movs	r0, #11
 8001394:	f004 f83c 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001398:	200b      	movs	r0, #11
 800139a:	f004 f875 	bl	8005488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	2104      	movs	r1, #4
 80013a2:	2018      	movs	r0, #24
 80013a4:	f004 f834 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80013a8:	2018      	movs	r0, #24
 80013aa:	f004 f86d 	bl	8005488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013ae:	4622      	mov	r2, r4
 80013b0:	4621      	mov	r1, r4
 80013b2:	2019      	movs	r0, #25
 80013b4:	f004 f82c 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013b8:	2019      	movs	r0, #25
 80013ba:	f004 f865 	bl	8005488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80013be:	4622      	mov	r2, r4
 80013c0:	2102      	movs	r1, #2
 80013c2:	2012      	movs	r0, #18
 80013c4:	f004 f824 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80013c8:	2012      	movs	r0, #18
 80013ca:	f004 f85d 	bl	8005488 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80013ce:	2103      	movs	r1, #3
 80013d0:	4622      	mov	r2, r4
 80013d2:	2028      	movs	r0, #40	@ 0x28
 80013d4:	f004 f81c 	bl	8005410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d8:	2028      	movs	r0, #40	@ 0x28
 80013da:	f004 f855 	bl	8005488 <HAL_NVIC_EnableIRQ>
  MC_StartMotor1();
 80013de:	f000 f81d 	bl	800141c <MC_StartMotor1>
  MC_ProgramSpeedRampMotor1(2000,1000);
 80013e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ea:	f000 f823 	bl	8001434 <MC_ProgramSpeedRampMotor1>
  while (1)
 80013ee:	e7fe      	b.n	80013ee <main+0x5c6>
 80013f0:	20000724 	.word	0x20000724
 80013f4:	40010300 	.word	0x40010300
 80013f8:	200006e8 	.word	0x200006e8
 80013fc:	40010304 	.word	0x40010304
 8001400:	200006ac 	.word	0x200006ac
 8001404:	40010308 	.word	0x40010308
 8001408:	20000660 	.word	0x20000660
 800140c:	40012c00 	.word	0x40012c00
 8001410:	200005cc 	.word	0x200005cc
 8001414:	40004400 	.word	0x40004400

08001418 <Error_Handler>:
 8001418:	b672      	cpsid	i
  while (1)
 800141a:	e7fe      	b.n	800141a <Error_Handler+0x2>

0800141c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 800141c:	4b01      	ldr	r3, [pc, #4]	@ (8001424 <MC_StartMotor1+0x8>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f000 b888 	b.w	8001534 <MCI_StartMotor>
 8001424:	20001ba0 	.word	0x20001ba0

08001428 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001428:	4b01      	ldr	r3, [pc, #4]	@ (8001430 <MC_StopMotor1+0x8>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f000 b898 	b.w	8001560 <MCI_StopMotor>
 8001430:	20001ba0 	.word	0x20001ba0

08001434 <MC_ProgramSpeedRampMotor1>:
  * @param  hDurationms Duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001434:	b410      	push	{r4}
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8001436:	4c04      	ldr	r4, [pc, #16]	@ (8001448 <MC_ProgramSpeedRampMotor1+0x14>)
{
 8001438:	4603      	mov	r3, r0
 800143a:	460a      	mov	r2, r1
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 800143c:	6820      	ldr	r0, [r4, #0]
}
 800143e:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 8001442:	4619      	mov	r1, r3
 8001444:	f000 b80e 	b.w	8001464 <MCI_ExecSpeedRamp>
 8001448:	20001ba0 	.word	0x20001ba0

0800144c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 800144c:	4b01      	ldr	r3, [pc, #4]	@ (8001454 <MC_GetSTMStateMotor1+0x8>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f000 b86a 	b.w	8001528 <MCI_GetSTMState>
 8001454:	20001ba0 	.word	0x20001ba0

08001458 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001458:	2002      	movs	r0, #2
 800145a:	4770      	bx	lr

0800145c <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <MCI_ExecSpeedRamp>:
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001464:	f240 1c01 	movw	ip, #257	@ 0x101
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001468:	2303      	movs	r3, #3
    pHandle->hFinalSpeed = hFinalSpeed;
 800146a:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 800146c:	8302      	strh	r2, [r0, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800146e:	f8a0 c006 	strh.w	ip, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001472:	7203      	strb	r3, [r0, #8]

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <MCI_ExecTorqueRamp>:
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001478:	f240 2c01 	movw	ip, #513	@ 0x201
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 800147c:	2304      	movs	r3, #4
    pHandle->hFinalTorque = hFinalTorque;
 800147e:	82c1      	strh	r1, [r0, #22]
    pHandle->hDurationms = hDurationms;
 8001480:	8302      	strh	r2, [r0, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001482:	f8a0 c006 	strh.w	ip, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001486:	7203      	strb	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 800148c:	b082      	sub	sp, #8
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800148e:	f240 3201 	movw	r2, #769	@ 0x301
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001492:	2304      	movs	r3, #4
    pHandle->Iqdref.q = Iqdref.q;
 8001494:	6241      	str	r1, [r0, #36]	@ 0x24
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001496:	80c2      	strh	r2, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001498:	7203      	strb	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800149a:	b002      	add	sp, #8
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop

080014a0 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 80014a0:	8843      	ldrh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 80014a2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 80014a6:	430b      	orrs	r3, r1
 80014a8:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80014ac:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 80014b0:	8043      	strh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 80014b2:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED)
 80014b8:	7983      	ldrb	r3, [r0, #6]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d000      	beq.n	80014c0 <MCI_ExecBufferedCommands+0x8>
 80014be:	4770      	bx	lr
{
 80014c0:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80014c2:	79c2      	ldrb	r2, [r0, #7]
 80014c4:	2a02      	cmp	r2, #2
 80014c6:	4604      	mov	r4, r0
 80014c8:	d01e      	beq.n	8001508 <MCI_ExecBufferedCommands+0x50>
 80014ca:	2a03      	cmp	r2, #3
 80014cc:	d013      	beq.n	80014f6 <MCI_ExecBufferedCommands+0x3e>
 80014ce:	2a01      	cmp	r2, #1
 80014d0:	d117      	bne.n	8001502 <MCI_ExecBufferedCommands+0x4a>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80014d2:	6a03      	ldr	r3, [r0, #32]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80014da:	69c0      	ldr	r0, [r0, #28]
 80014dc:	2103      	movs	r1, #3
 80014de:	f001 fae9 	bl	8002ab4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80014e2:	8b22      	ldrh	r2, [r4, #24]
 80014e4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 80014e8:	69e0      	ldr	r0, [r4, #28]
 80014ea:	f001 fae7 	bl	8002abc <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 80014ee:	b140      	cbz	r0, 8001502 <MCI_ExecBufferedCommands+0x4a>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80014f0:	2302      	movs	r3, #2
 80014f2:	71a3      	strb	r3, [r4, #6]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80014f4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80014f6:	6a02      	ldr	r2, [r0, #32]
 80014f8:	f882 3020 	strb.w	r3, [r2, #32]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80014fc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80014fe:	60d0      	str	r0, [r2, #12]
      if (commandHasBeenExecuted)
 8001500:	e7f6      	b.n	80014f0 <MCI_ExecBufferedCommands+0x38>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001502:	2303      	movs	r3, #3
 8001504:	71a3      	strb	r3, [r4, #6]
}
 8001506:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001508:	6a03      	ldr	r3, [r0, #32]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001510:	69c0      	ldr	r0, [r0, #28]
 8001512:	2104      	movs	r1, #4
 8001514:	f001 face 	bl	8002ab4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001518:	8b22      	ldrh	r2, [r4, #24]
 800151a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 800151e:	69e0      	ldr	r0, [r4, #28]
 8001520:	f001 facc 	bl	8002abc <STC_ExecRamp>
          break;
 8001524:	e7e3      	b.n	80014ee <MCI_ExecBufferedCommands+0x36>
 8001526:	bf00      	nop

08001528 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001528:	7840      	ldrb	r0, [r0, #1]
 800152a:	4770      	bx	lr

0800152c <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 800152c:	8880      	ldrh	r0, [r0, #4]
 800152e:	4770      	bx	lr

08001530 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001530:	8840      	ldrh	r0, [r0, #2]
 8001532:	4770      	bx	lr

08001534 <MCI_StartMotor>:
{
 8001534:	b510      	push	{r4, lr}
 8001536:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001538:	f7ff fff6 	bl	8001528 <MCI_GetSTMState>
 800153c:	b108      	cbz	r0, 8001542 <MCI_StartMotor+0xe>
  bool retVal = false;
 800153e:	2000      	movs	r0, #0
}
 8001540:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fff2 	bl	800152c <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001548:	2800      	cmp	r0, #0
 800154a:	d1f8      	bne.n	800153e <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800154c:	4620      	mov	r0, r4
 800154e:	f7ff ffef 	bl	8001530 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001552:	2800      	cmp	r0, #0
 8001554:	d1f3      	bne.n	800153e <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001556:	2001      	movs	r0, #1
 8001558:	7020      	strb	r0, [r4, #0]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800155a:	71a0      	strb	r0, [r4, #6]
}
 800155c:	bd10      	pop	{r4, pc}
 800155e:	bf00      	nop

08001560 <MCI_StopMotor>:
{
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001564:	f7ff ffe0 	bl	8001528 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001568:	4604      	mov	r4, r0
 800156a:	b118      	cbz	r0, 8001574 <MCI_StopMotor+0x14>
 800156c:	f1b0 040c 	subs.w	r4, r0, #12
 8001570:	bf18      	it	ne
 8001572:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001574:	4628      	mov	r0, r5
 8001576:	f7ff ffd9 	bl	800152c <MCI_GetOccurredFaults>
 800157a:	b110      	cbz	r0, 8001582 <MCI_StopMotor+0x22>
  bool retVal = false;
 800157c:	2400      	movs	r4, #0
}
 800157e:	4620      	mov	r0, r4
 8001580:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001582:	4628      	mov	r0, r5
 8001584:	f7ff ffd4 	bl	8001530 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001588:	2800      	cmp	r0, #0
 800158a:	d1f7      	bne.n	800157c <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800158c:	2c00      	cmp	r4, #0
 800158e:	d0f5      	beq.n	800157c <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001590:	2305      	movs	r3, #5
 8001592:	702b      	strb	r3, [r5, #0]
      retVal = true;
 8001594:	e7f3      	b.n	800157e <MCI_StopMotor+0x1e>
 8001596:	bf00      	nop

08001598 <MCI_FaultAcknowledged>:
{
 8001598:	b510      	push	{r4, lr}
 800159a:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800159c:	f7ff ffc4 	bl	8001528 <MCI_GetSTMState>
 80015a0:	280b      	cmp	r0, #11
 80015a2:	d001      	beq.n	80015a8 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80015a4:	2000      	movs	r0, #0
}
 80015a6:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80015a8:	4620      	mov	r0, r4
 80015aa:	f7ff ffc1 	bl	8001530 <MCI_GetCurrentFaults>
 80015ae:	2800      	cmp	r0, #0
 80015b0:	d1f8      	bne.n	80015a4 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80015b2:	2302      	movs	r3, #2
 80015b4:	7023      	strb	r3, [r4, #0]
      pHandle->PastFaults = MC_NO_FAULTS;
 80015b6:	80a0      	strh	r0, [r4, #4]
      reVal = true;
 80015b8:	2001      	movs	r0, #1
}
 80015ba:	bd10      	pop	{r4, pc}

080015bc <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80015bc:	8883      	ldrh	r3, [r0, #4]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80015be:	8840      	ldrh	r0, [r0, #2]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80015c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80015c8:	7a00      	ldrb	r0, [r0, #8]
 80015ca:	4770      	bx	lr

080015cc <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80015cc:	79c3      	ldrb	r3, [r0, #7]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d013      	beq.n	80015fa <MCI_GetImposedMotorDirection+0x2e>
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d009      	beq.n	80015ea <MCI_GetImposedMotorDirection+0x1e>
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d117      	bne.n	800160a <MCI_GetImposedMotorDirection+0x3e>
    {
      case MCI_CMD_EXECSPEEDRAMP:
      {
        if (pHandle->hFinalSpeed < 0)
 80015da:	f9b0 3014 	ldrsh.w	r3, [r0, #20]
  int16_t retVal = 1;
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bfb4      	ite	lt
 80015e2:	f04f 30ff 	movlt.w	r0, #4294967295
 80015e6:	2001      	movge	r0, #1
 80015e8:	4770      	bx	lr
        break;
      }

      case MCI_CMD_SETCURRENTREFERENCES:
      {
        if (pHandle->Iqdref.q < 0)
 80015ea:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	@ 0x24
  int16_t retVal = 1;
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bfb4      	ite	lt
 80015f2:	f04f 30ff 	movlt.w	r0, #4294967295
 80015f6:	2001      	movge	r0, #1
 80015f8:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80015fa:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
  int16_t retVal = 1;
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bfb4      	ite	lt
 8001602:	f04f 30ff 	movlt.w	r0, #4294967295
 8001606:	2001      	movge	r0, #1
 8001608:	4770      	bx	lr
 800160a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001610:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001618:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop

08001620 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001620:	8b00      	ldrh	r0, [r0, #24]
 8001622:	4770      	bx	lr

08001624 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001624:	69c3      	ldr	r3, [r0, #28]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800162a:	61da      	str	r2, [r3, #28]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop

08001630 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8001630:	69c3      	ldr	r3, [r0, #28]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001632:	6958      	ldr	r0, [r3, #20]
 8001634:	f007 baf6 	b.w	8008c24 <SPD_GetAvrgMecSpeedUnit>

08001638 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001638:	69c0      	ldr	r0, [r0, #28]
 800163a:	f001 ba37 	b.w	8002aac <STC_GetMecSpeedRefUnit>
 800163e:	bf00      	nop

08001640 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001640:	6a03      	ldr	r3, [r0, #32]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	b283      	uxth	r3, r0
 8001646:	f36f 000f 	bfc	r0, #0, #16
{
 800164a:	b082      	sub	sp, #8
#endif
}
 800164c:	4318      	orrs	r0, r3
 800164e:	b002      	add	sp, #8
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001654:	6a03      	ldr	r3, [r0, #32]
 8001656:	6858      	ldr	r0, [r3, #4]
 8001658:	b283      	uxth	r3, r0
 800165a:	f36f 000f 	bfc	r0, #0, #16
{
 800165e:	b082      	sub	sp, #8
#endif
}
 8001660:	4318      	orrs	r0, r3
 8001662:	b002      	add	sp, #8
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop

08001668 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001668:	6a03      	ldr	r3, [r0, #32]
 800166a:	6898      	ldr	r0, [r3, #8]
 800166c:	b283      	uxth	r3, r0
 800166e:	f36f 000f 	bfc	r0, #0, #16
{
 8001672:	b082      	sub	sp, #8
#endif
}
 8001674:	4318      	orrs	r0, r3
 8001676:	b002      	add	sp, #8
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800167c:	6a03      	ldr	r3, [r0, #32]
 800167e:	68d8      	ldr	r0, [r3, #12]
 8001680:	b283      	uxth	r3, r0
 8001682:	f36f 000f 	bfc	r0, #0, #16
{
 8001686:	b082      	sub	sp, #8
#endif
}
 8001688:	4318      	orrs	r0, r3
 800168a:	b002      	add	sp, #8
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001690:	6a03      	ldr	r3, [r0, #32]
 8001692:	f8d3 0012 	ldr.w	r0, [r3, #18]
 8001696:	b283      	uxth	r3, r0
 8001698:	f36f 000f 	bfc	r0, #0, #16
{
 800169c:	b082      	sub	sp, #8
#endif
}
 800169e:	4318      	orrs	r0, r3
 80016a0:	b002      	add	sp, #8
 80016a2:	4770      	bx	lr

080016a4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80016a4:	6a03      	ldr	r3, [r0, #32]
 80016a6:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80016aa:	b283      	uxth	r3, r0
 80016ac:	f36f 000f 	bfc	r0, #0, #16
{
 80016b0:	b082      	sub	sp, #8
#endif
}
 80016b2:	4318      	orrs	r0, r3
 80016b4:	b002      	add	sp, #8
 80016b6:	4770      	bx	lr

080016b8 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80016b8:	6a03      	ldr	r3, [r0, #32]
#endif
}
 80016ba:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
 80016be:	4770      	bx	lr

080016c0 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80016c0:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80016c2:	e9d0 0407 	ldrd	r0, r4, [r0, #28]
 80016c6:	f001 fa7b 	bl	8002bc0 <STC_GetDefaultIqdref>
 80016ca:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80016ce:	81a0      	strh	r0, [r4, #12]
 80016d0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80016d4:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016d8:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016dc:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80016e0:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80016e4:	fb10 f202 	smulbb	r2, r0, r2
 80016e8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80016ec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80016f0:	b084      	sub	sp, #16
 80016f2:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80016f4:	da05      	bge.n	8001702 <MCM_Clarke+0x2e>
 80016f6:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80016f8:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80016fc:	da0c      	bge.n	8001718 <MCM_Clarke+0x44>
 80016fe:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <MCM_Clarke+0x50>)
 8001700:	e001      	b.n	8001706 <MCM_Clarke+0x32>
 8001702:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001706:	b29b      	uxth	r3, r3
 8001708:	2000      	movs	r0, #0
 800170a:	f363 000f 	bfi	r0, r3, #0, #16
 800170e:	b293      	uxth	r3, r2
 8001710:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001714:	b004      	add	sp, #16
 8001716:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <MCM_Clarke+0x50>)
 800171a:	b20a      	sxth	r2, r1
 800171c:	4282      	cmp	r2, r0
 800171e:	bfb8      	it	lt
 8001720:	4602      	movlt	r2, r0
 8001722:	e7f0      	b.n	8001706 <MCM_Clarke+0x32>
 8001724:	ffff8001 	.word	0xffff8001

08001728 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800172a:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800172e:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001732:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 8001736:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001738:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800173a:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800173c:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 800173e:	b002      	add	sp, #8
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40020c00 	.word	0x40020c00

08001748 <MCM_Park>:
{
 8001748:	b530      	push	{r4, r5, lr}
 800174a:	4605      	mov	r5, r0
 800174c:	4604      	mov	r4, r0
 800174e:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001750:	4608      	mov	r0, r1
 8001752:	f7ff ffe9 	bl	8001728 <MCM_Trig_Functions>
 8001756:	b22d      	sxth	r5, r5
 8001758:	b201      	sxth	r1, r0
 800175a:	1424      	asrs	r4, r4, #16
 800175c:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800175e:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001762:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800176a:	da05      	bge.n	8001778 <MCM_Park+0x30>
 800176c:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 800176e:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001772:	da22      	bge.n	80017ba <MCM_Park+0x72>
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <MCM_Park+0x80>)
 8001776:	e001      	b.n	800177c <MCM_Park+0x34>
 8001778:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800177c:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001780:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8001784:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001788:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 800178c:	da04      	bge.n	8001798 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 800178e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001792:	da0c      	bge.n	80017ae <MCM_Park+0x66>
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <MCM_Park+0x80>)
 8001796:	e001      	b.n	800179c <MCM_Park+0x54>
 8001798:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 800179c:	b292      	uxth	r2, r2
 800179e:	2000      	movs	r0, #0
 80017a0:	f362 000f 	bfi	r0, r2, #0, #16
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f363 401f 	bfi	r0, r3, #16, #16
}
 80017aa:	b005      	add	sp, #20
 80017ac:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80017ae:	4906      	ldr	r1, [pc, #24]	@ (80017c8 <MCM_Park+0x80>)
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	428b      	cmp	r3, r1
 80017b4:	bfb8      	it	lt
 80017b6:	460b      	movlt	r3, r1
 80017b8:	e7f0      	b.n	800179c <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80017ba:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <MCM_Park+0x80>)
 80017bc:	b212      	sxth	r2, r2
 80017be:	429a      	cmp	r2, r3
 80017c0:	bfb8      	it	lt
 80017c2:	461a      	movlt	r2, r3
 80017c4:	e7da      	b.n	800177c <MCM_Park+0x34>
 80017c6:	bf00      	nop
 80017c8:	ffff8001 	.word	0xffff8001

080017cc <MCM_Rev_Park>:
{
 80017cc:	b530      	push	{r4, r5, lr}
 80017ce:	4605      	mov	r5, r0
 80017d0:	b085      	sub	sp, #20
 80017d2:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80017d4:	4608      	mov	r0, r1
 80017d6:	f7ff ffa7 	bl	8001728 <MCM_Trig_Functions>
 80017da:	1424      	asrs	r4, r4, #16
 80017dc:	1402      	asrs	r2, r0, #16
 80017de:	b22d      	sxth	r5, r5
 80017e0:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80017e2:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80017e6:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80017ea:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80017ee:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80017f2:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80017f6:	2000      	movs	r0, #0
 80017f8:	f363 000f 	bfi	r0, r3, #0, #16
 80017fc:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001800:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001804:	b005      	add	sp, #20
 8001806:	bd30      	pop	{r4, r5, pc}

08001808 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001808:	2800      	cmp	r0, #0
 800180a:	dd09      	ble.n	8001820 <MCM_Sqrt+0x18>
 800180c:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 800180e:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <MCM_Sqrt+0x1c>)
 8001810:	f240 1269 	movw	r2, #361	@ 0x169
 8001814:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001816:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001818:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800181a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800181c:	b662      	cpsie	i
}
 800181e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001820:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001822:	4770      	bx	lr
 8001824:	40020c00 	.word	0x40020c00

08001828 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8001828:	b318      	cbz	r0, 8001872 <MCboot+0x4a>
{
 800182a:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 800182c:	4a11      	ldr	r2, [pc, #68]	@ (8001874 <MCboot+0x4c>)
    bMCBootCompleted = (uint8_t )0;
 800182e:	4c12      	ldr	r4, [pc, #72]	@ (8001878 <MCboot+0x50>)
    pMCIList[M1] = &Mci[M1];
 8001830:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8001832:	2300      	movs	r3, #0
 8001834:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 8001836:	f000 f9f9 	bl	8001c2c <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 800183a:	4810      	ldr	r0, [pc, #64]	@ (800187c <MCboot+0x54>)
 800183c:	f7fe feac 	bl	8000598 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001840:	480f      	ldr	r0, [pc, #60]	@ (8001880 <MCboot+0x58>)
 8001842:	f006 f84f 	bl	80078e4 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8001846:	480f      	ldr	r0, [pc, #60]	@ (8001884 <MCboot+0x5c>)
 8001848:	f007 fd04 	bl	8009254 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800184c:	480e      	ldr	r0, [pc, #56]	@ (8001888 <MCboot+0x60>)
 800184e:	f001 f84b 	bl	80028e8 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8001852:	480e      	ldr	r0, [pc, #56]	@ (800188c <MCboot+0x64>)
 8001854:	f007 f84c 	bl	80088f0 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8001858:	480d      	ldr	r0, [pc, #52]	@ (8001890 <MCboot+0x68>)
 800185a:	f001 f845 	bl	80028e8 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 800185e:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MCboot+0x6c>)
 8001860:	f005 fff6 	bl	8007850 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8001864:	f7ff fdfa 	bl	800145c <MC_APP_BootHook>

    /**************************************/
    /*    Start timers synchronously      */
    /**************************************/
    startTimers();
 8001868:	f000 fe5c 	bl	8002524 <startTimers>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 800186c:	2301      	movs	r3, #1
 800186e:	7023      	strb	r3, [r4, #0]
  }
}
 8001870:	bd10      	pop	{r4, pc}
 8001872:	4770      	bx	lr
 8001874:	20000000 	.word	0x20000000
 8001878:	2000090c 	.word	0x2000090c
 800187c:	20000454 	.word	0x20000454
 8001880:	20000338 	.word	0x20000338
 8001884:	200003c0 	.word	0x200003c0
 8001888:	20000388 	.word	0x20000388
 800188c:	20000374 	.word	0x20000374
 8001890:	200003b0 	.word	0x200003b0
 8001894:	20000398 	.word	0x20000398

08001898 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001898:	4b01      	ldr	r3, [pc, #4]	@ (80018a0 <TSK_SetChargeBootCapDelayM1+0x8>)
 800189a:	8018      	strh	r0, [r3, #0]
}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000910 	.word	0x20000910

080018a4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80018a6:	8818      	ldrh	r0, [r3, #0]
 80018a8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80018aa:	fab0 f080 	clz	r0, r0
 80018ae:	0940      	lsrs	r0, r0, #5
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000910 	.word	0x20000910

080018b8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80018b8:	4b01      	ldr	r3, [pc, #4]	@ (80018c0 <TSK_SetStopPermanencyTimeM1+0x8>)
 80018ba:	8018      	strh	r0, [r3, #0]
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2000090e 	.word	0x2000090e

080018c4 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80018c6:	8818      	ldrh	r0, [r3, #0]
 80018c8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80018ca:	fab0 f080 	clz	r0, r0
 80018ce:	0940      	lsrs	r0, r0, #5
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	2000090e 	.word	0x2000090e

080018d8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80018d8:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 fbb0 	bl	8002040 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */
  GLOBAL_TIMESTAMP++;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 80018e4:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80018e6:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 80018ea:	3301      	adds	r3, #1
 80018ec:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80018ee:	b909      	cbnz	r1, 80018f4 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 80018f0:	2000      	movs	r0, #0
 80018f2:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 80018f4:	f005 fe74 	bl	80075e0 <MCPA_dataLog>
}
 80018f8:	2000      	movs	r0, #0
 80018fa:	bd08      	pop	{r3, pc}
 80018fc:	20001bc0 	.word	0x20001bc0
 8001900:	20000418 	.word	0x20000418

08001904 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001906:	4604      	mov	r4, r0
 8001908:	b198      	cbz	r0, 8001932 <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800190a:	4e1a      	ldr	r6, [pc, #104]	@ (8001974 <TSK_SafetyTask_PWMOFF+0x70>)
 800190c:	6830      	ldr	r0, [r6, #0]
 800190e:	f000 ffcf 	bl	80028b0 <PWMC_IsFaultOccurred>
 8001912:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001914:	4d18      	ldr	r5, [pc, #96]	@ (8001978 <TSK_SafetyTask_PWMOFF+0x74>)
 8001916:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800191a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800191e:	43ca      	mvns	r2, r1
 8001920:	4628      	mov	r0, r5
 8001922:	b292      	uxth	r2, r2
 8001924:	f7ff fdbc 	bl	80014a0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001928:	4628      	mov	r0, r5
 800192a:	f7ff fe47 	bl	80015bc <MCI_GetFaultState>
 800192e:	b9b8      	cbnz	r0, 8001960 <TSK_SafetyTask_PWMOFF+0x5c>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline uint16_t RCM_GetRegularConv(const RegConv_t *regConv)
{
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  return ((MC_NULL == regConv) ? 0U : regConv->data);
#else
  return (regConv->data);
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <TSK_SafetyTask_PWMOFF+0x78>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001934:	4812      	ldr	r0, [pc, #72]	@ (8001980 <TSK_SafetyTask_PWMOFF+0x7c>)
 8001936:	8959      	ldrh	r1, [r3, #10]
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001938:	4e0e      	ldr	r6, [pc, #56]	@ (8001974 <TSK_SafetyTask_PWMOFF+0x70>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 800193a:	f005 ff9b 	bl	8007874 <NTC_CalcAvTemp>
 800193e:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001940:	6830      	ldr	r0, [r6, #0]
 8001942:	f000 ffb5 	bl	80028b0 <PWMC_IsFaultOccurred>
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <TSK_SafetyTask_PWMOFF+0x80>)
 8001948:	4605      	mov	r5, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 800194a:	8959      	ldrh	r1, [r3, #10]
 800194c:	480e      	ldr	r0, [pc, #56]	@ (8001988 <TSK_SafetyTask_PWMOFF+0x84>)
 800194e:	f006 ffd5 	bl	80088fc <RVBS_CalcAvVbus>
 8001952:	4307      	orrs	r7, r0
 8001954:	f007 070e 	and.w	r7, r7, #14
 8001958:	ea45 0107 	orr.w	r1, r5, r7
 800195c:	b289      	uxth	r1, r1
 800195e:	e7d9      	b.n	8001914 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001960:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001964:	f000 ff6e 	bl	8002844 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001968:	4620      	mov	r0, r4
}
 800196a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 800196e:	f000 b927 	b.w	8001bc0 <FOC_Clear>
 8001972:	bf00      	nop
 8001974:	20000908 	.word	0x20000908
 8001978:	20000000 	.word	0x20000000
 800197c:	200003b0 	.word	0x200003b0
 8001980:	20000398 	.word	0x20000398
 8001984:	20000388 	.word	0x20000388
 8001988:	20000374 	.word	0x20000374

0800198c <TSK_SafetyTask>:
{
 800198c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <TSK_SafetyTask+0x14>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d000      	beq.n	8001998 <TSK_SafetyTask+0xc>
}
 8001996:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff ffb3 	bl	8001904 <TSK_SafetyTask_PWMOFF>
}
 800199e:	bd08      	pop	{r3, pc}
 80019a0:	2000090c 	.word	0x2000090c

080019a4 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <MC_RunMotorControlTasks+0x7c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b1cb      	cbz	r3, 80019de <MC_RunMotorControlTasks+0x3a>
{
 80019aa:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80019ac:	4c1d      	ldr	r4, [pc, #116]	@ (8001a24 <MC_RunMotorControlTasks+0x80>)
 80019ae:	8823      	ldrh	r3, [r4, #0]
 80019b0:	b1b3      	cbz	r3, 80019e0 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 80019b8:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80019ba:	8813      	ldrh	r3, [r2, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b11b      	cbz	r3, 80019c8 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 80019c0:	8813      	ldrh	r3, [r2, #0]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80019c8:	4a18      	ldr	r2, [pc, #96]	@ (8001a2c <MC_RunMotorControlTasks+0x88>)
 80019ca:	8813      	ldrh	r3, [r2, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b11b      	cbz	r3, 80019d8 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 80019d0:	8813      	ldrh	r3, [r2, #0]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 80019d8:	f7ff ffd8 	bl	800198c <TSK_SafetyTask>
}
 80019dc:	bd70      	pop	{r4, r5, r6, pc}
 80019de:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80019e0:	4d13      	ldr	r5, [pc, #76]	@ (8001a30 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 80019e2:	f000 f9bb 	bl	8001d5c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80019e6:	f7ff fd3b 	bl	8001460 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80019ea:	4629      	mov	r1, r5
 80019ec:	f851 0b0c 	ldr.w	r0, [r1], #12
 80019f0:	6883      	ldr	r3, [r0, #8]
 80019f2:	4798      	blx	r3
 80019f4:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80019f6:	b130      	cbz	r0, 8001a06 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80019f8:	4629      	mov	r1, r5
 80019fa:	220a      	movs	r2, #10
 80019fc:	f851 0b08 	ldr.w	r0, [r1], #8
 8001a00:	6803      	ldr	r3, [r0, #0]
 8001a02:	4798      	blx	r3
 8001a04:	b908      	cbnz	r0, 8001a0a <MC_RunMotorControlTasks+0x66>
{
 8001a06:	2301      	movs	r3, #1
 8001a08:	e7d5      	b.n	80019b6 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f000 fca8 	bl	8002360 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001a10:	6828      	ldr	r0, [r5, #0]
 8001a12:	89ea      	ldrh	r2, [r5, #14]
 8001a14:	6846      	ldr	r6, [r0, #4]
 8001a16:	68a9      	ldr	r1, [r5, #8]
 8001a18:	230a      	movs	r3, #10
 8001a1a:	47b0      	blx	r6
 8001a1c:	e7f3      	b.n	8001a06 <MC_RunMotorControlTasks+0x62>
 8001a1e:	bf00      	nop
 8001a20:	2000090c 	.word	0x2000090c
 8001a24:	20000912 	.word	0x20000912
 8001a28:	20000910 	.word	0x20000910
 8001a2c:	2000090e 	.word	0x2000090e
 8001a30:	20000444 	.word	0x20000444

08001a34 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f8c2 	bl	8001bc0 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <TSK_HardwareFaultTask+0x18>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	f7ff bd2b 	b.w	80014a0 <MCI_FaultProcessing>
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000

08001a50 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001a50:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001a52:	f7ff fcfb 	bl	800144c <MC_GetSTMStateMotor1>
 8001a56:	b918      	cbnz	r0, 8001a60 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001a5c:	f7ff bcde 	b.w	800141c <MC_StartMotor1>
}
 8001a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001a64:	f7ff bce0 	b.w	8001428 <MC_StopMotor1>

08001a68 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001a68:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a6a:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <mc_lock_pins+0x138>)
 8001a6c:	494d      	ldr	r1, [pc, #308]	@ (8001ba4 <mc_lock_pins+0x13c>)
 8001a6e:	484e      	ldr	r0, [pc, #312]	@ (8001ba8 <mc_lock_pins+0x140>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a70:	2504      	movs	r5, #4
 8001a72:	b092      	sub	sp, #72	@ 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a74:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a76:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a78:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001a7a:	69d3      	ldr	r3, [r2, #28]
 8001a7c:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a7e:	2602      	movs	r6, #2
  (void) temp;
 8001a80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a82:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a84:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a86:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a88:	69d3      	ldr	r3, [r2, #28]
 8001a8a:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 8001a8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a8e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a92:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8001a96:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a98:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a9a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a9c:	69d4      	ldr	r4, [r2, #28]
 8001a9e:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8001aa4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aa6:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa8:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 8001aac:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aae:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ab0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ab2:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001ab6:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8001aba:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001abe:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ac0:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac2:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ac4:	69d4      	ldr	r4, [r2, #28]
 8001ac6:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8001ac8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aca:	4c38      	ldr	r4, [pc, #224]	@ (8001bac <mc_lock_pins+0x144>)
 8001acc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ace:	2780      	movs	r7, #128	@ 0x80
 8001ad0:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad2:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ad4:	69dc      	ldr	r4, [r3, #28]
 8001ad6:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8001ad8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ada:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001adc:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ade:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ae0:	69d8      	ldr	r0, [r3, #28]
 8001ae2:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8001ae4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ae6:	4832      	ldr	r0, [pc, #200]	@ (8001bb0 <mc_lock_pins+0x148>)
 8001ae8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aea:	2408      	movs	r4, #8
 8001aec:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aee:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001af0:	69d8      	ldr	r0, [r3, #28]
 8001af2:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 8001af4:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001af6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001af8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001afa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001afc:	69d9      	ldr	r1, [r3, #28]
 8001afe:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b00:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b02:	492c      	ldr	r1, [pc, #176]	@ (8001bb4 <mc_lock_pins+0x14c>)
  (void) temp;
 8001b04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b06:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b08:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b0a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b0c:	69d9      	ldr	r1, [r3, #28]
 8001b0e:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b10:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b12:	4929      	ldr	r1, [pc, #164]	@ (8001bb8 <mc_lock_pins+0x150>)
  (void) temp;
 8001b14:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b16:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b18:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b1a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b1c:	69d8      	ldr	r0, [r3, #28]
 8001b1e:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b20:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b22:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 8001b26:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b28:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b2a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b2c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b2e:	69d9      	ldr	r1, [r3, #28]
 8001b30:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b32:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b36:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8001b3a:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b3c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b3e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b40:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b42:	69d9      	ldr	r1, [r3, #28]
 8001b44:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b46:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b4a:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8001b4e:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b50:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b52:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b54:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b56:	69d9      	ldr	r1, [r3, #28]
 8001b58:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b5e:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 8001b62:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b64:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b66:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b68:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b72:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8001b76:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b78:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b7a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b7c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b7e:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 8001b82:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b88:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8001b8c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b8e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b90:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b92:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001b98:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001b9a:	b012      	add	sp, #72	@ 0x48
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	48000400 	.word	0x48000400
 8001ba4:	00010004 	.word	0x00010004
 8001ba8:	00010002 	.word	0x00010002
 8001bac:	00010080 	.word	0x00010080
 8001bb0:	00010008 	.word	0x00010008
 8001bb4:	00010040 	.word	0x00010040
 8001bb8:	00010020 	.word	0x00010020
 8001bbc:	48000800 	.word	0x48000800

08001bc0 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
 8001bc2:	eb00 1100 	add.w	r1, r0, r0, lsl #4
 8001bc6:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <FOC_Clear+0x58>)

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8001bc8:	2400      	movs	r4, #0
 8001bca:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8001bce:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001bd2:	4912      	ldr	r1, [pc, #72]	@ (8001c1c <FOC_Clear+0x5c>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001bd4:	6054      	str	r4, [r2, #4]
{
 8001bd6:	4605      	mov	r5, r0
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001bd8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  FOCVars[bMotor].Iab = NULL_ab;
 8001bdc:	6094      	str	r4, [r2, #8]
 8001bde:	60d4      	str	r4, [r2, #12]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001be0:	f8c2 4012 	str.w	r4, [r2, #18]
 8001be4:	f8c2 4016 	str.w	r4, [r2, #22]
 8001be8:	f8c2 401a 	str.w	r4, [r2, #26]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001bec:	4621      	mov	r1, r4
 8001bee:	f005 fe8d 	bl	800790c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <FOC_Clear+0x60>)
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001bfa:	f005 fe87 	bl	800790c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <FOC_Clear+0x64>)
 8001c00:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001c04:	f000 ff46 	bl	8002a94 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <FOC_Clear+0x68>)
 8001c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001c12:	f000 be17 	b.w	8002844 <PWMC_SwitchOffPWM>
 8001c16:	bf00      	nop
 8001c18:	200008e4 	.word	0x200008e4
 8001c1c:	20000030 	.word	0x20000030
 8001c20:	2000002c 	.word	0x2000002c
 8001c24:	20000034 	.word	0x20000034
 8001c28:	20000908 	.word	0x20000908

08001c2c <FOC_Init>:
{
 8001c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c2e:	4c26      	ldr	r4, [pc, #152]	@ (8001cc8 <FOC_Init+0x9c>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001c30:	4e26      	ldr	r6, [pc, #152]	@ (8001ccc <FOC_Init+0xa0>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c32:	4827      	ldr	r0, [pc, #156]	@ (8001cd0 <FOC_Init+0xa4>)
    STO_PLL_Init (&STO_PLL_M1);
 8001c34:	4f27      	ldr	r7, [pc, #156]	@ (8001cd4 <FOC_Init+0xa8>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001c36:	4d28      	ldr	r5, [pc, #160]	@ (8001cd8 <FOC_Init+0xac>)
{
 8001c38:	b085      	sub	sp, #20
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c3a:	6020      	str	r0, [r4, #0]
    R3_2_Init(&PWM_Handle_M1);
 8001c3c:	f006 fa4a 	bl	80080d4 <R3_2_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001c40:	4630      	mov	r0, r6
 8001c42:	f005 fe4f 	bl	80078e4 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001c46:	4638      	mov	r0, r7
 8001c48:	f007 fa1a 	bl	8009080 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001c4c:	6828      	ldr	r0, [r5, #0]
 8001c4e:	463a      	mov	r2, r7
 8001c50:	4631      	mov	r1, r6
 8001c52:	f000 ff07 	bl	8002a64 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	6829      	ldr	r1, [r5, #0]
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <FOC_Init+0xb0>)
 8001c5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ce0 <FOC_Init+0xb4>)
 8001c5e:	9000      	str	r0, [sp, #0]
 8001c60:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <FOC_Init+0xb8>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001c62:	4c21      	ldr	r4, [pc, #132]	@ (8001ce8 <FOC_Init+0xbc>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001c64:	f006 ff14 	bl	8008a90 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001c68:	4820      	ldr	r0, [pc, #128]	@ (8001cec <FOC_Init+0xc0>)
 8001c6a:	f005 fe3b 	bl	80078e4 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001c6e:	4820      	ldr	r0, [pc, #128]	@ (8001cf0 <FOC_Init+0xc4>)
 8001c70:	f005 fe38 	bl	80078e4 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <FOC_Init+0xc8>)
 8001c76:	4a20      	ldr	r2, [pc, #128]	@ (8001cf8 <FOC_Init+0xcc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001c7a:	4820      	ldr	r0, [pc, #128]	@ (8001cfc <FOC_Init+0xd0>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001c7c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <FOC_Init+0xd4>)
 8001c82:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001c84:	f006 fe72 	bl	800896c <REMNG_Init>
    FOC_Clear(M1);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ff99 	bl	8001bc0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c8e:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c90:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001c92:	f884 3020 	strb.w	r3, [r4, #32]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001c96:	f000 ff93 	bl	8002bc0 <STC_GetDefaultIqdref>
 8001c9a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8001c9e:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001ca0:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001ca2:	81e2      	strh	r2, [r4, #14]
 8001ca4:	81a3      	strh	r3, [r4, #12]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001ca6:	f000 ff8b 	bl	8002bc0 <STC_GetDefaultIqdref>
 8001caa:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8001cae:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001cb0:	8223      	strh	r3, [r4, #16]
    MCI_ExecSpeedRamp(&Mci[M1],
 8001cb2:	f000 ff81 	bl	8002bb8 <STC_GetMecSpeedRefUnitDefault>
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	4812      	ldr	r0, [pc, #72]	@ (8001d04 <FOC_Init+0xd8>)
 8001cba:	2200      	movs	r2, #0
}
 8001cbc:	b005      	add	sp, #20
 8001cbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8001cc2:	f7ff bbcf 	b.w	8001464 <MCI_ExecSpeedRamp>
 8001cc6:	bf00      	nop
 8001cc8:	20000908 	.word	0x20000908
 8001ccc:	20000338 	.word	0x20000338
 8001cd0:	20000190 	.word	0x20000190
 8001cd4:	20000068 	.word	0x20000068
 8001cd8:	20000034 	.word	0x20000034
 8001cdc:	20000054 	.word	0x20000054
 8001ce0:	200003c0 	.word	0x200003c0
 8001ce4:	20000230 	.word	0x20000230
 8001ce8:	200008e4 	.word	0x200008e4
 8001cec:	2000030c 	.word	0x2000030c
 8001cf0:	200002e0 	.word	0x200002e0
 8001cf4:	20000028 	.word	0x20000028
 8001cf8:	20000374 	.word	0x20000374
 8001cfc:	2000003c 	.word	0x2000003c
 8001d00:	200008e0 	.word	0x200008e0
 8001d04:	20000000 	.word	0x20000000

08001d08 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d10:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d12:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8001d14:	4e0f      	ldr	r6, [pc, #60]	@ (8001d54 <FOC_CalcCurrRef+0x48>)
 8001d16:	eb00 1500 	add.w	r5, r0, r0, lsl #4
 8001d1a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 8001d1e:	0107      	lsls	r7, r0, #4
 8001d20:	f9b5 800e 	ldrsh.w	r8, [r5, #14]
 8001d24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d28:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001d2a:	f895 3020 	ldrb.w	r3, [r5, #32]
 8001d2e:	b14b      	cbz	r3, 8001d44 <FOC_CalcCurrRef+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8001d32:	4427      	add	r7, r4
 8001d34:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8001d38:	81b0      	strh	r0, [r6, #12]
 8001d3a:	f8a6 800e 	strh.w	r8, [r6, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3e:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001d44:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <FOC_CalcCurrRef+0x4c>)
 8001d46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001d4a:	f000 feff 	bl	8002b4c <STC_CalcTorqueReference>
 8001d4e:	8368      	strh	r0, [r5, #26]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8001d50:	e7ee      	b.n	8001d30 <FOC_CalcCurrRef+0x24>
 8001d52:	bf00      	nop
 8001d54:	200008e4 	.word	0x200008e4
 8001d58:	20000034 	.word	0x20000034

08001d5c <TSK_MediumFrequencyTaskM1>:
{
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8001d60:	2300      	movs	r3, #0
  (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d62:	4669      	mov	r1, sp
 8001d64:	48ac      	ldr	r0, [pc, #688]	@ (8002018 <TSK_MediumFrequencyTaskM1+0x2bc>)
  int16_t wAux = 0;
 8001d66:	f8ad 3000 	strh.w	r3, [sp]
  (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001d6a:	f007 f88b 	bl	8008e84 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d6e:	4bab      	ldr	r3, [pc, #684]	@ (800201c <TSK_MediumFrequencyTaskM1+0x2c0>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001d70:	4cab      	ldr	r4, [pc, #684]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f005 fe3c 	bl	80079f0 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7ff fbd9 	bl	8001530 <MCI_GetCurrentFaults>
 8001d7e:	b118      	cbz	r0, 8001d88 <TSK_MediumFrequencyTaskM1+0x2c>
    Mci[M1].State = FAULT_NOW;
 8001d80:	230a      	movs	r3, #10
 8001d82:	7063      	strb	r3, [r4, #1]
}
 8001d84:	b003      	add	sp, #12
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fbcf 	bl	800152c <MCI_GetOccurredFaults>
 8001d8e:	bb68      	cbnz	r0, 8001dec <TSK_MediumFrequencyTaskM1+0x90>
      switch (Mci[M1].State)
 8001d90:	7863      	ldrb	r3, [r4, #1]
 8001d92:	2b13      	cmp	r3, #19
 8001d94:	d8f6      	bhi.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
 8001d96:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <TSK_MediumFrequencyTaskM1+0x40>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001f9f 	.word	0x08001f9f
 8001da0:	08001d85 	.word	0x08001d85
 8001da4:	08001d85 	.word	0x08001d85
 8001da8:	08001d85 	.word	0x08001d85
 8001dac:	08001f11 	.word	0x08001f11
 8001db0:	08001d85 	.word	0x08001d85
 8001db4:	08001ee7 	.word	0x08001ee7
 8001db8:	08001d85 	.word	0x08001d85
 8001dbc:	08001ec7 	.word	0x08001ec7
 8001dc0:	08001d85 	.word	0x08001d85
 8001dc4:	08001ded 	.word	0x08001ded
 8001dc8:	08001eb9 	.word	0x08001eb9
 8001dcc:	08001d85 	.word	0x08001d85
 8001dd0:	08001d85 	.word	0x08001d85
 8001dd4:	08001d85 	.word	0x08001d85
 8001dd8:	08001d85 	.word	0x08001d85
 8001ddc:	08001e75 	.word	0x08001e75
 8001de0:	08001e43 	.word	0x08001e43
 8001de4:	08001d85 	.word	0x08001d85
 8001de8:	08001df5 	.word	0x08001df5
      Mci[M1].State = FAULT_OVER;
 8001dec:	230b      	movs	r3, #11
 8001dee:	7063      	strb	r3, [r4, #1]
}
 8001df0:	b003      	add	sp, #12
 8001df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	f000 80e8 	beq.w	8001fcc <TSK_MediumFrequencyTaskM1+0x270>
            bool FlagEnableClosedLoop = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001dfc:	4889      	ldr	r0, [pc, #548]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001dfe:	a901      	add	r1, sp, #4
 8001e00:	f007 fa7e 	bl	8009300 <VSS_CalcAvrgMecSpeedUnit>
 8001e04:	4605      	mov	r5, r0
            bool FlagTransitionPhaseCompleted = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001e06:	4887      	ldr	r0, [pc, #540]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001e08:	f007 fb16 	bl	8009438 <VSS_TransitionEnded>
            FlagEnableClosedLoop = FlagEnableClosedLoop || FlagTransitionPhaseCompleted;
 8001e0c:	b90d      	cbnz	r5, 8001e12 <TSK_MediumFrequencyTaskM1+0xb6>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d0b8      	beq.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001e12:	4d85      	ldr	r5, [pc, #532]	@ (8002028 <TSK_MediumFrequencyTaskM1+0x2cc>)
              PID_SetIntegralTerm(&PIDSpeedHandle_M1, 0);
 8001e14:	4885      	ldr	r0, [pc, #532]	@ (800202c <TSK_MediumFrequencyTaskM1+0x2d0>)
 8001e16:	2100      	movs	r1, #0
 8001e18:	f005 fd78 	bl	800790c <PID_SetIntegralTerm>
              STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 8001e1c:	497e      	ldr	r1, [pc, #504]	@ (8002018 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001e1e:	6828      	ldr	r0, [r5, #0]
 8001e20:	f000 fe36 	bl	8002a90 <STC_SetSpeedSensor>
              FOC_InitAdditionalMethods(M1);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ff6f 	bl	8001d08 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ff6e 	bl	8001d0c <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001e30:	6828      	ldr	r0, [r5, #0]
 8001e32:	f000 fecb 	bl	8002bcc <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001e36:	487a      	ldr	r0, [pc, #488]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001e38:	f7ff fb3e 	bl	80014b8 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8001e3c:	2306      	movs	r3, #6
 8001e3e:	7063      	strb	r3, [r4, #1]
 8001e40:	e7a0      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e42:	7823      	ldrb	r3, [r4, #0]
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001e44:	4d7a      	ldr	r5, [pc, #488]	@ (8002030 <TSK_MediumFrequencyTaskM1+0x2d4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e46:	2b05      	cmp	r3, #5
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001e48:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e4a:	f000 80c1 	beq.w	8001fd0 <TSK_MediumFrequencyTaskM1+0x274>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001e4e:	2101      	movs	r1, #1
 8001e50:	f000 fcfc 	bl	800284c <PWMC_CurrentReadingCalibr>
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d095      	beq.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001e58:	7823      	ldrb	r3, [r4, #0]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	f000 80d6 	beq.w	800200c <TSK_MediumFrequencyTaskM1+0x2b0>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001e60:	6828      	ldr	r0, [r5, #0]
 8001e62:	2100      	movs	r1, #0
 8001e64:	f006 f866 	bl	8007f34 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001e68:	2014      	movs	r0, #20
 8001e6a:	f7ff fd15 	bl	8001898 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8001e6e:	2310      	movs	r3, #16
 8001e70:	7063      	strb	r3, [r4, #1]
 8001e72:	e787      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e74:	7823      	ldrb	r3, [r4, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	f000 80a8 	beq.w	8001fcc <TSK_MediumFrequencyTaskM1+0x270>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001e7c:	f7ff fd12 	bl	80018a4 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	f43f af7f 	beq.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001e86:	4d6a      	ldr	r5, [pc, #424]	@ (8002030 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001e88:	6828      	ldr	r0, [r5, #0]
 8001e8a:	f006 f88d 	bl	8007fa8 <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e8e:	4966      	ldr	r1, [pc, #408]	@ (8002028 <TSK_MediumFrequencyTaskM1+0x2cc>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001e90:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <TSK_MediumFrequencyTaskM1+0x2d8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e92:	6808      	ldr	r0, [r1, #0]
 8001e94:	4963      	ldr	r1, [pc, #396]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2020 	strb.w	r2, [r3, #32]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001e9c:	f000 fdf8 	bl	8002a90 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001ea0:	485d      	ldr	r0, [pc, #372]	@ (8002018 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001ea2:	f007 f8c7 	bl	8009034 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7ff fe8a 	bl	8001bc0 <FOC_Clear>
                Mci[M1].State = START;
 8001eac:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001eae:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8001eb0:	7063      	strb	r3, [r4, #1]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001eb2:	f000 fcc9 	bl	8002848 <PWMC_SwitchOnPWM>
 8001eb6:	e765      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001eb8:	7823      	ldrb	r3, [r4, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	f47f af62 	bne.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	8023      	strh	r3, [r4, #0]
 8001ec4:	e75e      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001ec6:	f7ff fcfd 	bl	80018c4 <TSK_StopPermanencyTimeHasElapsedM1>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	f43f af5a 	beq.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001ed0:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001ed2:	4954      	ldr	r1, [pc, #336]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	f000 fddb 	bl	8002a90 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001eda:	4852      	ldr	r0, [pc, #328]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001edc:	f007 f9ac 	bl	8009238 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	8023      	strh	r3, [r4, #0]
 8001ee4:	e74e      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001ee6:	7823      	ldrb	r3, [r4, #0]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d06f      	beq.n	8001fcc <TSK_MediumFrequencyTaskM1+0x270>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001eec:	484c      	ldr	r0, [pc, #304]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001eee:	f7ff fae3 	bl	80014b8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff ff0a 	bl	8001d0c <FOC_CalcCurrRef>
{
  bool SpeedSensorReliability = true;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  if ((MC_NULL == pHandle) || (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber))
#else
  if (pHandle->bSpeedErrorNumber == pHandle->bMaximumSpeedErrorsNumber)
 8001ef8:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	78db      	ldrb	r3, [r3, #3]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	f47f af40 	bne.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001f04:	4846      	ldr	r0, [pc, #280]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	2120      	movs	r1, #32
 8001f0a:	f7ff fac9 	bl	80014a0 <MCI_FaultProcessing>
 8001f0e:	e739      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001f10:	7823      	ldrb	r3, [r4, #0]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d05a      	beq.n	8001fcc <TSK_MediumFrequencyTaskM1+0x270>
            if(! RUC_Exec(&RevUpControlM1))
 8001f16:	4848      	ldr	r0, [pc, #288]	@ (8002038 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001f18:	f006 fe42 	bl	8008ba0 <RUC_Exec>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d162      	bne.n	8001fe8 <TSK_MediumFrequencyTaskM1+0x28c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001f22:	483f      	ldr	r0, [pc, #252]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001f24:	2110      	movs	r1, #16
 8001f26:	f7ff fabb 	bl	80014a0 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001f2a:	483e      	ldr	r0, [pc, #248]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001f2c:	f10d 0102 	add.w	r1, sp, #2
 8001f30:	f007 f9e6 	bl	8009300 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001f34:	4840      	ldr	r0, [pc, #256]	@ (8002038 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001f36:	f006 fe6b 	bl	8008c10 <RUC_FirstAccelerationStageReached>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	f43f af22 	beq.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001f40:	4e35      	ldr	r6, [pc, #212]	@ (8002018 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8001f42:	f10d 0102 	add.w	r1, sp, #2
 8001f46:	4630      	mov	r0, r6
 8001f48:	f007 f8d4 	bl	80090f4 <STO_PLL_IsObserverConverged>
 8001f4c:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001f4e:	4834      	ldr	r0, [pc, #208]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8001f50:	f7ff fb3c 	bl	80015cc <MCI_GetImposedMotorDirection>
 8001f54:	b241      	sxtb	r1, r0
 8001f56:	4630      	mov	r0, r6
 8001f58:	f007 f96a 	bl	8009230 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001f5c:	4831      	ldr	r0, [pc, #196]	@ (8002024 <TSK_MediumFrequencyTaskM1+0x2c8>)
 8001f5e:	4629      	mov	r1, r5
 8001f60:	f007 fa5c 	bl	800941c <VSS_SetStartTransition>
            if (ObserverConverged)
 8001f64:	2d00      	cmp	r5, #0
 8001f66:	f43f af0d 	beq.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001f6a:	4f32      	ldr	r7, [pc, #200]	@ (8002034 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001f6c:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8001f70:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8001f72:	4d32      	ldr	r5, [pc, #200]	@ (800203c <TSK_MediumFrequencyTaskM1+0x2e0>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001f74:	f7ff fbe8 	bl	8001748 <MCM_Park>
 8001f78:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001f7a:	6828      	ldr	r0, [r5, #0]
 8001f7c:	f006 fcf6 	bl	800896c <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001f80:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001f84:	6828      	ldr	r0, [r5, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f006 fd3c 	bl	8008a04 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001f8c:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001f90:	6828      	ldr	r0, [r5, #0]
 8001f92:	2219      	movs	r2, #25
 8001f94:	f006 fd36 	bl	8008a04 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001f98:	2313      	movs	r3, #19
 8001f9a:	7063      	strb	r3, [r4, #1]
 8001f9c:	e6f2      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001f9e:	7825      	ldrb	r5, [r4, #0]
 8001fa0:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8001fa4:	2d01      	cmp	r5, #1
 8001fa6:	f47f aeed 	bne.w	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001faa:	481d      	ldr	r0, [pc, #116]	@ (8002020 <TSK_MediumFrequencyTaskM1+0x2c4>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001fac:	4e20      	ldr	r6, [pc, #128]	@ (8002030 <TSK_MediumFrequencyTaskM1+0x2d4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001fae:	f7ff fb0d 	bl	80015cc <MCI_GetImposedMotorDirection>
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	4820      	ldr	r0, [pc, #128]	@ (8002038 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001fb6:	f006 fda7 	bl	8008b08 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001fba:	6830      	ldr	r0, [r6, #0]
 8001fbc:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8001fc0:	b9e1      	cbnz	r1, 8001ffc <TSK_MediumFrequencyTaskM1+0x2a0>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001fc2:	f000 fc43 	bl	800284c <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8001fc6:	2311      	movs	r3, #17
 8001fc8:	7063      	strb	r3, [r4, #1]
 8001fca:	e6db      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8001fcc:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <TSK_MediumFrequencyTaskM1+0x2d4>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	f005 ffea 	bl	8007fa8 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fdf3 	bl	8001bc0 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001fda:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001fde:	f7ff fc6b 	bl	80018b8 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	7063      	strb	r3, [r4, #1]
}
 8001fe6:	e6cd      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <TSK_MediumFrequencyTaskM1+0x2cc>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f000 fdae 	bl	8002b4c <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <TSK_MediumFrequencyTaskM1+0x2d8>)
 8001ff2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
              FOCVars[M1].Iqdref = IqdRef;
 8001ff6:	8198      	strh	r0, [r3, #12]
 8001ff8:	81da      	strh	r2, [r3, #14]
 8001ffa:	e796      	b.n	8001f2a <TSK_MediumFrequencyTaskM1+0x1ce>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001ffc:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001ffe:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002002:	f000 fc23 	bl	800284c <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002006:	6830      	ldr	r0, [r6, #0]
 8002008:	2100      	movs	r1, #0
 800200a:	e72b      	b.n	8001e64 <TSK_MediumFrequencyTaskM1+0x108>
                FOC_Clear(M1);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff fdd7 	bl	8001bc0 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002012:	2300      	movs	r3, #0
 8002014:	8023      	strh	r3, [r4, #0]
 8002016:	e6b5      	b.n	8001d84 <TSK_MediumFrequencyTaskM1+0x28>
 8002018:	20000068 	.word	0x20000068
 800201c:	20000028 	.word	0x20000028
 8002020:	20000000 	.word	0x20000000
 8002024:	200003c0 	.word	0x200003c0
 8002028:	20000034 	.word	0x20000034
 800202c:	20000338 	.word	0x20000338
 8002030:	20000908 	.word	0x20000908
 8002034:	200008e4 	.word	0x200008e4
 8002038:	20000230 	.word	0x20000230
 800203c:	200008e0 	.word	0x200008e0

08002040 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  * @param bMotorNbr Motor reference number defined
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8002044:	4f5f      	ldr	r7, [pc, #380]	@ (80021c4 <FOC_HighFrequencyTask+0x184>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8002046:	4c60      	ldr	r4, [pc, #384]	@ (80021c8 <FOC_HighFrequencyTask+0x188>)
{
 8002048:	b089      	sub	sp, #36	@ 0x24
 800204a:	4605      	mov	r5, r0
  RCM_ReadOngoingConv();
 800204c:	f000 fce8 	bl	8002a20 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002050:	f000 fcb0 	bl	80029b4 <RCM_ExecNextConv>
  if (SWITCH_OVER == Mci[M1].State)
 8002054:	787b      	ldrb	r3, [r7, #1]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8002056:	f8d4 0016 	ldr.w	r0, [r4, #22]
 800205a:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 800205c:	2b13      	cmp	r3, #19
 800205e:	f000 80a5 	beq.w	80021ac <FOC_HighFrequencyTask+0x16c>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError = MC_NO_FAULTS;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002062:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <FOC_HighFrequencyTask+0x18c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002064:	f8df 8188 	ldr.w	r8, [pc, #392]	@ 80021f0 <FOC_HighFrequencyTask+0x1b0>
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d8 0000 	ldr.w	r0, [r8]
  return (pHandle->hElAngle);
 800206e:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002070:	a902      	add	r1, sp, #8
 8002072:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8002076:	6803      	ldr	r3, [r0, #0]
 8002078:	4798      	blx	r3
  Ialphabeta = MCM_Clarke(Iab);
 800207a:	9802      	ldr	r0, [sp, #8]
 800207c:	f7ff fb2a 	bl	80016d4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002080:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002082:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002084:	f7ff fb60 	bl	8001748 <MCM_Park>
static inline bool PWMC_GetPWMState(PWMC_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? false : pHandle->PWMState);
#else
  return (pHandle->PWMState);
 8002088:	f8d8 3000 	ldr.w	r3, [r8]
 800208c:	9000      	str	r0, [sp, #0]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 800208e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002092:	2b00      	cmp	r3, #0
 8002094:	d175      	bne.n	8002182 <FOC_HighFrequencyTask+0x142>
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  }
  else
  {
    Vqd.q = 0;
 8002096:	4699      	mov	r9, r3
    Vqd.d = 0;
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002098:	f8ad 3006 	strh.w	r3, [sp, #6]
 800209c:	f8ad 9004 	strh.w	r9, [sp, #4]
 80020a0:	9901      	ldr	r1, [sp, #4]
 80020a2:	484b      	ldr	r0, [pc, #300]	@ (80021d0 <FOC_HighFrequencyTask+0x190>)
 80020a4:	f005 fa6e 	bl	8007584 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80020a8:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80020aa:	4681      	mov	r9, r0
 80020ac:	9001      	str	r0, [sp, #4]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80020ae:	f7ff fb8d 	bl	80017cc <MCM_Rev_Park>
 80020b2:	4601      	mov	r1, r0

  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 80020b4:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80020b8:	9104      	str	r1, [sp, #16]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 80020ba:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d146      	bne.n	8002150 <FOC_HighFrequencyTask+0x110>
  {
    /* Nothing to do. No PWM setting to prevent possible ChargeBootCap conflict */
  }

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80020c2:	9802      	ldr	r0, [sp, #8]
 80020c4:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80020c6:	9803      	ldr	r0, [sp, #12]
 80020c8:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80020ca:	9800      	ldr	r0, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 80020cc:	f8c4 9012 	str.w	r9, [r4, #18]
  FOCVars[M1].Valphabeta = Valphabeta;
 80020d0:	f8c4 1016 	str.w	r1, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 80020d4:	83a6      	strh	r6, [r4, #28]
  FOCVars[M1].Iqd = Iqd;
 80020d6:	60a0      	str	r0, [r4, #8]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80020d8:	483e      	ldr	r0, [pc, #248]	@ (80021d4 <FOC_HighFrequencyTask+0x194>)
 80020da:	f006 fd99 	bl	8008c10 <RUC_FirstAccelerationStageReached>
    if ((IDLE == Mci[M1].State) || (FAULT_OVER == Mci[M1].State))
 80020de:	787b      	ldrb	r3, [r7, #1]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80020e0:	4606      	mov	r6, r0
    if ((IDLE == Mci[M1].State) || (FAULT_OVER == Mci[M1].State))
 80020e2:	b1cb      	cbz	r3, 8002118 <FOC_HighFrequencyTask+0xd8>
 80020e4:	2b0b      	cmp	r3, #11
 80020e6:	d017      	beq.n	8002118 <FOC_HighFrequencyTask+0xd8>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 80020e8:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <FOC_HighFrequencyTask+0x198>)
      STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80020ea:	6860      	ldr	r0, [r4, #4]
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 80020ec:	4c3b      	ldr	r4, [pc, #236]	@ (80021dc <FOC_HighFrequencyTask+0x19c>)
      STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80020ee:	88db      	ldrh	r3, [r3, #6]
      STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80020f0:	9006      	str	r0, [sp, #24]
      (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80020f2:	a905      	add	r1, sp, #20
 80020f4:	4839      	ldr	r0, [pc, #228]	@ (80021dc <FOC_HighFrequencyTask+0x19c>)
      STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80020f6:	f8ad 301c 	strh.w	r3, [sp, #28]
      (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80020fa:	f006 fdd1 	bl	8008ca0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 80020fe:	4620      	mov	r0, r4
 8002100:	f006 ff6c 	bl	8008fdc <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8002104:	b18e      	cbz	r6, 800212a <FOC_HighFrequencyTask+0xea>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8002106:	787b      	ldrb	r3, [r7, #1]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d016      	beq.n	800213a <FOC_HighFrequencyTask+0xfa>
 800210c:	2b13      	cmp	r3, #19
 800210e:	d014      	beq.n	800213a <FOC_HighFrequencyTask+0xfa>
}
 8002110:	4628      	mov	r0, r5
 8002112:	b009      	add	sp, #36	@ 0x24
 8002114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8002118:	4c30      	ldr	r4, [pc, #192]	@ (80021dc <FOC_HighFrequencyTask+0x19c>)
      STO_PLL_Clear(&STO_PLL_M1);
 800211a:	4830      	ldr	r0, [pc, #192]	@ (80021dc <FOC_HighFrequencyTask+0x19c>)
 800211c:	f006 ff8a 	bl	8009034 <STO_PLL_Clear>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8002120:	4620      	mov	r0, r4
 8002122:	f006 ff5b 	bl	8008fdc <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8002126:	2e00      	cmp	r6, #0
 8002128:	d1ed      	bne.n	8002106 <FOC_HighFrequencyTask+0xc6>
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800212a:	4631      	mov	r1, r6
 800212c:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8002130:	f005 fbec 	bl	800790c <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8002134:	787b      	ldrb	r3, [r7, #1]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d1e8      	bne.n	800210c <FOC_HighFrequencyTask+0xcc>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800213a:	88a3      	ldrh	r3, [r4, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 800213c:	4828      	ldr	r0, [pc, #160]	@ (80021e0 <FOC_HighFrequencyTask+0x1a0>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800213e:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002142:	a904      	add	r1, sp, #16
 8002144:	f007 f88a 	bl	800925c <VSS_CalcElAngle>
}
 8002148:	4628      	mov	r0, r5
 800214a:	b009      	add	sp, #36	@ 0x24
 800214c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002150:	f000 fa54 	bl	80025fc <PWMC_SetPhaseVoltage>
 8002154:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8002156:	9802      	ldr	r0, [sp, #8]
 8002158:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800215a:	9803      	ldr	r0, [sp, #12]
 800215c:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800215e:	9800      	ldr	r0, [sp, #0]
 8002160:	60a0      	str	r0, [r4, #8]
  if(hFOCreturn == MC_DURATION)
 8002162:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002164:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002166:	f8c4 9012 	str.w	r9, [r4, #18]
  FOCVars[M1].hElAngle = hElAngle;
 800216a:	83a6      	strh	r6, [r4, #28]
  FOCVars[M1].Valphabeta = Valphabeta;
 800216c:	f8c4 0016 	str.w	r0, [r4, #22]
  if(hFOCreturn == MC_DURATION)
 8002170:	d1b2      	bne.n	80020d8 <FOC_HighFrequencyTask+0x98>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002172:	4814      	ldr	r0, [pc, #80]	@ (80021c4 <FOC_HighFrequencyTask+0x184>)
 8002174:	2200      	movs	r2, #0
 8002176:	f7ff f993 	bl	80014a0 <MCI_FaultProcessing>
}
 800217a:	4628      	mov	r0, r5
 800217c:	b009      	add	sp, #36	@ 0x24
 800217e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002182:	f9bd 3000 	ldrsh.w	r3, [sp]
 8002186:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800218a:	1ac9      	subs	r1, r1, r3
 800218c:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <FOC_HighFrequencyTask+0x1a4>)
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	f005 fbee 	bl	8007970 <PI_Controller>
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002194:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800219c:	1ac9      	subs	r1, r1, r3
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <FOC_HighFrequencyTask+0x1a8>)
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80021a0:	4681      	mov	r9, r0
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	f005 fbe4 	bl	8007970 <PI_Controller>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e775      	b.n	8002098 <FOC_HighFrequencyTask+0x58>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80021ac:	4e0f      	ldr	r6, [pc, #60]	@ (80021ec <FOC_HighFrequencyTask+0x1ac>)
 80021ae:	6830      	ldr	r0, [r6, #0]
 80021b0:	f006 fc06 	bl	80089c0 <REMNG_RampCompleted>
 80021b4:	2800      	cmp	r0, #0
 80021b6:	f47f af54 	bne.w	8002062 <FOC_HighFrequencyTask+0x22>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80021ba:	6830      	ldr	r0, [r6, #0]
 80021bc:	f006 fbde 	bl	800897c <REMNG_Calc>
 80021c0:	81a0      	strh	r0, [r4, #12]
 80021c2:	e74e      	b.n	8002062 <FOC_HighFrequencyTask+0x22>
 80021c4:	20000000 	.word	0x20000000
 80021c8:	200008e4 	.word	0x200008e4
 80021cc:	20000034 	.word	0x20000034
 80021d0:	20000038 	.word	0x20000038
 80021d4:	20000230 	.word	0x20000230
 80021d8:	20000374 	.word	0x20000374
 80021dc:	20000068 	.word	0x20000068
 80021e0:	200003c0 	.word	0x200003c0
 80021e4:	20000030 	.word	0x20000030
 80021e8:	2000002c 	.word	0x2000002c
 80021ec:	200008e0 	.word	0x200008e0
 80021f0:	20000908 	.word	0x20000908

080021f4 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80021f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f8:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 80021fa:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80021fc:	4b33      	ldr	r3, [pc, #204]	@ (80022cc <RI_SetRegCommandParser+0xd8>)
 80021fe:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8002200:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002204:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002206:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8002208:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 800220c:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8002210:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002212:	f8a0 800e 	strh.w	r8, [r0, #14]
 8002216:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8002218:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 800221c:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 800221e:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002222:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 8002226:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002228:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800222c:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002230:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8002234:	dd36      	ble.n	80022a4 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 8002236:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800223a:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 800223e:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002242:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8002246:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800224a:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 800224c:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800224e:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002252:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8002256:	d12d      	bne.n	80022b4 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002258:	f85b bc08 	ldr.w	fp, [fp, #-8]
 800225c:	f8cd e000 	str.w	lr, [sp]
 8002260:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8002262:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8002266:	eb05 0309 	add.w	r3, r5, r9
 800226a:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 800226c:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002270:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8002272:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8002274:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002276:	d012      	beq.n	800229e <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8002278:	42bd      	cmp	r5, r7
 800227a:	d021      	beq.n	80022c0 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 800227c:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8002280:	89f3      	ldrh	r3, [r6, #14]
 8002282:	3301      	adds	r3, #1
 8002284:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002286:	2800      	cmp	r0, #0
 8002288:	d0cb      	beq.n	8002222 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800228a:	2807      	cmp	r0, #7
 800228c:	d012      	beq.n	80022b4 <RI_SetRegCommandParser+0xc0>
 800228e:	2301      	movs	r3, #1
 8002290:	280a      	cmp	r0, #10
 8002292:	9303      	str	r3, [sp, #12]
 8002294:	d1c5      	bne.n	8002222 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002296:	9803      	ldr	r0, [sp, #12]
 8002298:	b009      	add	sp, #36	@ 0x24
 800229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d1ea      	bne.n	8002278 <RI_SetRegCommandParser+0x84>
 80022a2:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 80022a4:	9b03      	ldr	r3, [sp, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f5      	bne.n	8002296 <RI_SetRegCommandParser+0xa2>
}
 80022aa:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 80022ac:	81f3      	strh	r3, [r6, #14]
}
 80022ae:	b009      	add	sp, #36	@ 0x24
 80022b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 80022b4:	2301      	movs	r3, #1
 80022b6:	9303      	str	r3, [sp, #12]
}
 80022b8:	9803      	ldr	r0, [sp, #12]
 80022ba:	b009      	add	sp, #36	@ 0x24
 80022bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80022c0:	2308      	movs	r3, #8
 80022c2:	9303      	str	r3, [sp, #12]
}
 80022c4:	9803      	ldr	r0, [sp, #12]
 80022c6:	b009      	add	sp, #36	@ 0x24
 80022c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022cc:	08003369 	.word	0x08003369
 80022d0:	08003469 	.word	0x08003469

080022d4 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80022d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d8:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80022e0:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80022e2:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80022e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002358 <RI_GetRegCommandParser+0x84>)
 80022e8:	9304      	str	r3, [sp, #16]
 80022ea:	4b1c      	ldr	r3, [pc, #112]	@ (800235c <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 80022ec:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 80022f0:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80022f2:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 80022f4:	f1b8 0f00 	cmp.w	r8, #0
 80022f8:	d029      	beq.n	800234e <RI_GetRegCommandParser+0x7a>
 80022fa:	4607      	mov	r7, r0
 80022fc:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80022fe:	464d      	mov	r5, r9
 8002300:	e012      	b.n	8002328 <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002302:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8002306:	9400      	str	r4, [sp, #0]
 8002308:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 800230a:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 800230e:	fa19 f383 	uxtah	r3, r9, r3
 8002312:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8002314:	b9e0      	cbnz	r0, 8002350 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 8002316:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 800231a:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 800231c:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 800231e:	440a      	add	r2, r1
          txData = txData+size;
 8002320:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002322:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002324:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8002326:	b19b      	cbz	r3, 8002350 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 8002328:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800232c:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8002330:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002334:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8002338:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800233c:	f10d 030e 	add.w	r3, sp, #14
 8002340:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002342:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002344:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002348:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 800234c:	d0d9      	beq.n	8002302 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 800234e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002350:	b006      	add	sp, #24
 8002352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002356:	bf00      	nop
 8002358:	08003a25 	.word	0x08003a25
 800235c:	08003b59 	.word	0x08003b59

08002360 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002362:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002364:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002366:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002368:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800236c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800236e:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002370:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002374:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002376:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002378:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800237c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002380:	b291      	uxth	r1, r2
{
 8002382:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002384:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002386:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800238a:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800238c:	d039      	beq.n	8002402 <MCP_ReceivedPacket+0xa2>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800238e:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002390:	4f53      	ldr	r7, [pc, #332]	@ (80024e0 <MCP_ReceivedPacket+0x180>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002392:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 800239c:	2500      	movs	r5, #0

    switch (command)
 800239e:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80023a2:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80023a4:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 80023a8:	81e5      	strh	r5, [r4, #14]
    switch (command)
 80023aa:	d835      	bhi.n	8002418 <MCP_ReceivedPacket+0xb8>
 80023ac:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 80023b0:	d81e      	bhi.n	80023f0 <MCP_ReceivedPacket+0x90>
 80023b2:	e8df f00c 	tbb	[pc, ip]
 80023b6:	1d6c      	.short	0x1d6c
 80023b8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023bc:	1d741d1d 	.word	0x1d741d1d
 80023c0:	1d1d1d1d 	.word	0x1d1d1d1d
 80023c4:	1d591d1d 	.word	0x1d591d1d
 80023c8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023cc:	1d4b1d1d 	.word	0x1d4b1d1d
 80023d0:	1d1d1d1d 	.word	0x1d1d1d1d
 80023d4:	1d531d1d 	.word	0x1d531d1d
 80023d8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023dc:	1d5e1d1d 	.word	0x1d5e1d1d
 80023e0:	1d1d1d1d 	.word	0x1d1d1d1d
 80023e4:	1d471d1d 	.word	0x1d471d1d
 80023e8:	1d1d1d1d 	.word	0x1d1d1d1d
 80023ec:	1d1d      	.short	0x1d1d
 80023ee:	66          	.byte	0x66
 80023ef:	00          	.byte	0x00
 80023f0:	2300      	movs	r3, #0
 80023f2:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80023f4:	68a2      	ldr	r2, [r4, #8]
 80023f6:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80023f8:	89e3      	ldrh	r3, [r4, #14]
 80023fa:	3301      	adds	r3, #1
 80023fc:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80023fe:	b003      	add	sp, #12
 8002400:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002402:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8002406:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002408:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800240c:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800240e:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002410:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002412:	d951      	bls.n	80024b8 <MCP_ReceivedPacket+0x158>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002414:	200d      	movs	r0, #13
 8002416:	e7ed      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
    switch (command)
 8002418:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 800241c:	d009      	beq.n	8002432 <MCP_ReceivedPacket+0xd2>
 800241e:	d843      	bhi.n	80024a8 <MCP_ReceivedPacket+0x148>
 8002420:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8002424:	d1e4      	bne.n	80023f0 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8002426:	4638      	mov	r0, r7
 8002428:	f7ff f94a 	bl	80016c0 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800242c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800242e:	4628      	mov	r0, r5
        break;
 8002430:	e7e0      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002432:	68a3      	ldr	r3, [r4, #8]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4631      	mov	r1, r6
 8002438:	f104 030e 	add.w	r3, r4, #14
 800243c:	f7ff f80c 	bl	8001458 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002440:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002442:	e7d7      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002444:	4638      	mov	r0, r7
 8002446:	f7ff f86f 	bl	8001528 <MCI_GetSTMState>
 800244a:	b938      	cbnz	r0, 800245c <MCP_ReceivedPacket+0xfc>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800244c:	4638      	mov	r0, r7
 800244e:	f7ff f871 	bl	8001534 <MCI_StartMotor>
 8002452:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002456:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002458:	b2c0      	uxtb	r0, r0
 800245a:	e7cb      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
          (void)MCI_StopMotor(pMCI);
 800245c:	4638      	mov	r0, r7
 800245e:	f7ff f87f 	bl	8001560 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002462:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002464:	2000      	movs	r0, #0
 8002466:	e7c5      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002468:	4620      	mov	r0, r4
 800246a:	f7ff ff33 	bl	80022d4 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800246e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002470:	e7c0      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8002472:	4638      	mov	r0, r7
 8002474:	f7ff f858 	bl	8001528 <MCI_GetSTMState>
 8002478:	2806      	cmp	r0, #6
 800247a:	d029      	beq.n	80024d0 <MCP_ReceivedPacket+0x170>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800247c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800247e:	2000      	movs	r0, #0
 8002480:	e7b8      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8002482:	4638      	mov	r0, r7
 8002484:	f7ff f888 	bl	8001598 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002488:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800248a:	2000      	movs	r0, #0
        break;
 800248c:	e7b2      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 800248e:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002490:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002492:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002494:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002496:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002498:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800249a:	2000      	movs	r0, #0
        break;
 800249c:	e7aa      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff fea8 	bl	80021f4 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024a4:	89e3      	ldrh	r3, [r4, #14]
        break;
 80024a6:	e7a5      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
    switch (command)
 80024a8:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 80024ac:	d1a0      	bne.n	80023f0 <MCP_ReceivedPacket+0x90>
        HAL_NVIC_SystemReset();
 80024ae:	f002 fff9 	bl	80054a4 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024b2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024b4:	4628      	mov	r0, r5
        break;
 80024b6:	e79d      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <MCP_ReceivedPacket+0x184>)
 80024ba:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80024be:	b16d      	cbz	r5, 80024dc <MCP_ReceivedPacket+0x17c>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80024c0:	68a3      	ldr	r3, [r4, #8]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4631      	mov	r1, r6
 80024c6:	f104 030e 	add.w	r3, r4, #14
 80024ca:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024cc:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80024ce:	e791      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 80024d0:	4638      	mov	r0, r7
 80024d2:	f7ff f8a7 	bl	8001624 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024d6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024d8:	2000      	movs	r0, #0
 80024da:	e78b      	b.n	80023f4 <MCP_ReceivedPacket+0x94>
 80024dc:	462b      	mov	r3, r5
 80024de:	e799      	b.n	8002414 <MCP_ReceivedPacket+0xb4>
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000914 	.word	0x20000914

080024e8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80024e8:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80024ea:	f003 ffd3 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <MX_MotorControl_Init+0x30>)
 80024f0:	fba3 3000 	umull	r3, r0, r3, r0
 80024f4:	09c0      	lsrs	r0, r0, #7
 80024f6:	f002 ffe7 	bl	80054c8 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <MX_MotorControl_Init+0x34>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f002 ff84 	bl	8005410 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002508:	4805      	ldr	r0, [pc, #20]	@ (8002520 <MX_MotorControl_Init+0x38>)
 800250a:	f7ff f98d 	bl	8001828 <MCboot>
  mc_lock_pins();
}
 800250e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002512:	f7ff baa9 	b.w	8001a68 <mc_lock_pins>
 8002516:	bf00      	nop
 8002518:	10624dd3 	.word	0x10624dd3
 800251c:	200004e8 	.word	0x200004e8
 8002520:	20001ba0 	.word	0x20001ba0

08002524 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002524:	4922      	ldr	r1, [pc, #136]	@ (80025b0 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8002526:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <startTimers+0x90>)
 8002528:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800252a:	b410      	push	{r4}
 800252c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002534:	f043 0310 	orr.w	r3, r3, #16
 8002538:	b083      	sub	sp, #12
 800253a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	f043 0306 	orr.w	r3, r3, #6
 800254a:	608b      	str	r3, [r1, #8]
 800254c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800254e:	07db      	lsls	r3, r3, #31
 8002550:	d416      	bmi.n	8002580 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002552:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800255a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800255c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002566:	9b01      	ldr	r3, [sp, #4]
 8002568:	694b      	ldr	r3, [r1, #20]
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002570:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6593      	str	r3, [r2, #88]	@ 0x58
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }

}
 8002578:	b003      	add	sp, #12
 800257a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002580:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <startTimers+0x94>)
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	4c0c      	ldr	r4, [pc, #48]	@ (80025bc <startTimers+0x98>)
 800258c:	4001      	ands	r1, r0
 800258e:	f041 0120 	orr.w	r1, r1, #32
 8002592:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002594:	6959      	ldr	r1, [r3, #20]
 8002596:	f041 0101 	orr.w	r1, r1, #1
 800259a:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	4022      	ands	r2, r4
 80025a0:	4001      	ands	r1, r0
 80025a2:	430a      	orrs	r2, r1
 80025a4:	605a      	str	r2, [r3, #4]
}
 80025a6:	b003      	add	sp, #12
 80025a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	fdffff8f 	.word	0xfdffff8f
 80025bc:	02000070 	.word	0x02000070

080025c0 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80025c0:	3201      	adds	r2, #1
{
 80025c2:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80025c4:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80025c6:	f06f 0602 	mvn.w	r6, #2
 80025ca:	0155      	lsls	r5, r2, #5
 80025cc:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80025ce:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80025d0:	f893 c000 	ldrb.w	ip, [r3]
 80025d4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80025d8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80025dc:	d80c      	bhi.n	80025f8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80025de:	6904      	ldr	r4, [r0, #16]
 80025e0:	07a4      	lsls	r4, r4, #30
 80025e2:	d5f5      	bpl.n	80025d0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80025e4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80025e8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80025ea:	6106      	str	r6, [r0, #16]
 80025ec:	d8f0      	bhi.n	80025d0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80025ee:	781c      	ldrb	r4, [r3, #0]
 80025f0:	2c0f      	cmp	r4, #15
 80025f2:	d8ed      	bhi.n	80025d0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80025f4:	2301      	movs	r3, #1
 80025f6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
 80025fa:	bf00      	nop

080025fc <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80025fc:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80025fe:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
 8002602:	140b      	asrs	r3, r1, #16
 8002604:	fb04 f303 	mul.w	r3, r4, r3
 8002608:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 800260c:	ea4f 0e43 	mov.w	lr, r3, lsl #1

    wX = wUBeta;
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8002610:	f343 7280 	sbfx	r2, r3, #30, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002614:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8002618:	b209      	sxth	r1, r1
 800261a:	fb03 f101 	mul.w	r1, r3, r1
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 800261e:	eb1e 0301 	adds.w	r3, lr, r1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002622:	ea4f 0594 	mov.w	r5, r4, lsr #2
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8002626:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800262a:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 800262e:	ebbe 0c01 	subs.w	ip, lr, r1
 8002632:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8002636:	ea4f 015c 	mov.w	r1, ip, lsr #1
    if (wY < 0)
 800263a:	ea53 73c4 	orrs.w	r3, r3, r4, lsl #31
{
 800263e:	b083      	sub	sp, #12
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 8002640:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    if (wY < 0)
 8002644:	d457      	bmi.n	80026f6 <PWMC_SetPhaseVoltage+0xfa>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002646:	2900      	cmp	r1, #0
 8002648:	db35      	blt.n	80026b6 <PWMC_SetPhaseVoltage+0xba>
      {
        pHandle->Sector = SECTOR_2;
 800264a:	2201      	movs	r2, #1
 800264c:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002650:	1a5a      	subs	r2, r3, r1
 8002652:	bf44      	itt	mi
 8002654:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8002658:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 800265c:	2b00      	cmp	r3, #0
 800265e:	bfb8      	it	lt
 8002660:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00

        if(true == pHandle->SingleShuntTopology)
 8002664:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002668:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800266c:	bfb8      	it	lt
 800266e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002672:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072);
 8002676:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 800267a:	2c00      	cmp	r4, #0
 800267c:	d160      	bne.n	8002740 <PWMC_SetPhaseVoltage+0x144>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800267e:	fa1f fc81 	uxth.w	ip, r1
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002682:	b295      	uxth	r5, r2
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002684:	b29c      	uxth	r4, r3
            pHandle->highDuty = 2U;
 8002686:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800268a:	6944      	ldr	r4, [r0, #20]
            pHandle->lowDuty = 0U;
 800268c:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002694:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002698:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800269c:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80026a0:	4623      	mov	r3, r4
            pHandle->midDuty = 1U;
 80026a2:	f8a0 505a 	strh.w	r5, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80026a6:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80026aa:	f8a0 1052 	strh.w	r1, [r0, #82]	@ 0x52
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80026ae:	b003      	add	sp, #12
 80026b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80026b4:	4718      	bx	r3
        if ( wX <= 0 )
 80026b6:	f1be 0f00 	cmp.w	lr, #0
 80026ba:	dd67      	ble.n	800278c <PWMC_SetPhaseVoltage+0x190>
          pHandle->Sector = SECTOR_1;
 80026bc:	2300      	movs	r3, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80026be:	ebae 0201 	sub.w	r2, lr, r1
          pHandle->Sector = SECTOR_1;
 80026c2:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhA + (wZ / 131072);
 80026c6:	f501 33ff 	add.w	r3, r1, #130560	@ 0x1fe00
 80026ca:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80026ce:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80026d2:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
          wTimePhB = wTimePhA + (wZ / 131072);
 80026d6:	eb02 4163 	add.w	r1, r2, r3, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 80026da:	eba1 436e 	sub.w	r3, r1, lr, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80026de:	2c00      	cmp	r4, #0
 80026e0:	f040 809b 	bne.w	800281a <PWMC_SetPhaseVoltage+0x21e>
 80026e4:	f890 5086 	ldrb.w	r5, [r0, #134]	@ 0x86
 80026e8:	2d00      	cmp	r5, #0
 80026ea:	f000 80a5 	beq.w	8002838 <PWMC_SetPhaseVoltage+0x23c>
 80026ee:	f04f 0c02 	mov.w	ip, #2
 80026f2:	2501      	movs	r5, #1
 80026f4:	e7c7      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
      if (wZ < 0)
 80026f6:	2900      	cmp	r1, #0
        if(true == pHandle->SingleShuntTopology)
 80026f8:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
      if (wZ < 0)
 80026fc:	db61      	blt.n	80027c2 <PWMC_SetPhaseVoltage+0x1c6>
        if (wX <= 0)
 80026fe:	f1be 0f00 	cmp.w	lr, #0
 8002702:	dd22      	ble.n	800274a <PWMC_SetPhaseVoltage+0x14e>
          pHandle->Sector = SECTOR_3;
 8002704:	2202      	movs	r2, #2
 8002706:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800270a:	ebb3 020e 	subs.w	r2, r3, lr
 800270e:	bf44      	itt	mi
 8002710:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8002714:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfb8      	it	lt
 800271c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002720:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002724:	bfb8      	it	lt
 8002726:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800272a:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 800272e:	eb03 416e 	add.w	r1, r3, lr, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002732:	2c00      	cmp	r4, #0
 8002734:	d16c      	bne.n	8002810 <PWMC_SetPhaseVoltage+0x214>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002736:	fa1f fc81 	uxth.w	ip, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 800273a:	b29d      	uxth	r5, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 800273c:	b294      	uxth	r4, r2
 800273e:	e7a2      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
 8002740:	f04f 0c02 	mov.w	ip, #2
 8002744:	2500      	movs	r5, #0
 8002746:	2401      	movs	r4, #1
 8002748:	e79d      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800274a:	ebbe 0201 	subs.w	r2, lr, r1
 800274e:	bf48      	it	mi
 8002750:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002754:	f04f 0303 	mov.w	r3, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002758:	bf48      	it	mi
 800275a:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800275e:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002762:	f1be 0300 	subs.w	r3, lr, #0
 8002766:	bfb8      	it	lt
 8002768:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800276c:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002770:	eb02 4161 	add.w	r1, r2, r1, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 8002774:	bfb8      	it	lt
 8002776:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800277a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 800277e:	2c00      	cmp	r4, #0
 8002780:	d055      	beq.n	800282e <PWMC_SetPhaseVoltage+0x232>
 8002782:	f04f 0c00 	mov.w	ip, #0
 8002786:	2501      	movs	r5, #1
 8002788:	2402      	movs	r4, #2
 800278a:	e77c      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
          pHandle->Sector = SECTOR_6;
 800278c:	f04f 0205 	mov.w	r2, #5
 8002790:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002794:	eba3 020e 	sub.w	r2, r3, lr
          wTimePhB = wTimePhC + (wX / 131072);
 8002798:	4671      	mov	r1, lr
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800279a:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800279e:	bfb8      	it	lt
 80027a0:	f50e 31ff 	addlt.w	r1, lr, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 80027a4:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
          wTimePhC = wTimePhA - (wY / 131072);
 80027a8:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 80027ac:	bfb8      	it	lt
 80027ae:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
 80027b2:	eb03 4161 	add.w	r1, r3, r1, asr #17
          if(true == pHandle->SingleShuntTopology)
 80027b6:	b3ac      	cbz	r4, 8002824 <PWMC_SetPhaseVoltage+0x228>
 80027b8:	f04f 0c01 	mov.w	ip, #1
 80027bc:	2502      	movs	r5, #2
 80027be:	2400      	movs	r4, #0
 80027c0:	e761      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
        pHandle->Sector = SECTOR_5;
 80027c2:	2204      	movs	r2, #4
 80027c4:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80027c8:	1a5a      	subs	r2, r3, r1
 80027ca:	bf44      	itt	mi
 80027cc:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 80027d0:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80027d4:	2900      	cmp	r1, #0
 80027d6:	bfbc      	itt	lt
 80027d8:	f501 31ff 	addlt.w	r1, r1, #130560	@ 0x1fe00
 80027dc:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bfb8      	it	lt
 80027e4:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80027e8:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027ec:	bfb8      	it	lt
 80027ee:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80027f2:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072) ;
 80027f6:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 80027fa:	b924      	cbnz	r4, 8002806 <PWMC_SetPhaseVoltage+0x20a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80027fc:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002800:	b295      	uxth	r5, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002802:	b28c      	uxth	r4, r1
 8002804:	e73f      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
 8002806:	f04f 0c01 	mov.w	ip, #1
 800280a:	2500      	movs	r5, #0
 800280c:	2402      	movs	r4, #2
 800280e:	e73a      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
 8002810:	f04f 0c00 	mov.w	ip, #0
 8002814:	2502      	movs	r5, #2
 8002816:	2401      	movs	r4, #1
 8002818:	e735      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
 800281a:	f04f 0c02 	mov.w	ip, #2
 800281e:	2501      	movs	r5, #1
 8002820:	2400      	movs	r4, #0
 8002822:	e730      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002824:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002828:	b29d      	uxth	r5, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 800282a:	b28c      	uxth	r4, r1
 800282c:	e72b      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800282e:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002832:	b28d      	uxth	r5, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002834:	b294      	uxth	r4, r2
 8002836:	e726      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002838:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhB;
 800283c:	b28d      	uxth	r5, r1
            pHandle->highDuty = (uint16_t)wTimePhC;
 800283e:	b29c      	uxth	r4, r3
 8002840:	e721      	b.n	8002686 <PWMC_SetPhaseVoltage+0x8a>
 8002842:	bf00      	nop

08002844 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002844:	6843      	ldr	r3, [r0, #4]
 8002846:	4718      	bx	r3

08002848 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002848:	6883      	ldr	r3, [r0, #8]
 800284a:	4718      	bx	r3

0800284c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002850:	b179      	cbz	r1, 8002872 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002852:	2901      	cmp	r1, #1
 8002854:	d001      	beq.n	800285a <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002856:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002858:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800285a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800285e:	b16b      	cbz	r3, 800287c <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8002860:	3b01      	subs	r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f4      	bne.n	8002856 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 800286c:	68c3      	ldr	r3, [r0, #12]
 800286e:	4798      	blx	r3
          retVal = true;
 8002870:	e004      	b.n	800287c <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8002872:	f7ff ffe7 	bl	8002844 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002876:	68e3      	ldr	r3, [r4, #12]
 8002878:	4620      	mov	r0, r4
 800287a:	4798      	blx	r3
      retVal = true;
 800287c:	2001      	movs	r0, #1
}
 800287e:	bd10      	pop	{r4, pc}

08002880 <PWMC_OCP_Handler>:
  * @brief  Manages HW overcurrent protection.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *PWMC_OCP_Handler(PWMC_Handle_t *pHandle)
{
 8002880:	b510      	push	{r4, lr}
 8002882:	4604      	mov	r4, r0
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    PWMC_SwitchOffPWM(pHandle);
 8002884:	f7ff ffde 	bl	8002844 <PWMC_SwitchOffPWM>
    pHandle->OverCurrentFlag = true;
 8002888:	2301      	movs	r3, #1
 800288a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800288e:	f104 0078 	add.w	r0, r4, #120	@ 0x78
 8002892:	bd10      	pop	{r4, pc}

08002894 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002894:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8002896:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002898:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800289c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028a0:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 80028a2:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 80028a4:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 80028a8:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80028b0:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80028b2:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 80028b6:	b1a8      	cbz	r0, 80028e4 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80028be:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80028c0:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80028c2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80028c6:	b11a      	cbz	r2, 80028d0 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 80028ce:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80028d0:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 80028d4:	b12a      	cbz	r2, 80028e2 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80028d6:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 80028da:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80028dc:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80028de:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80028e2:	4770      	bx	lr
 80028e4:	2140      	movs	r1, #64	@ 0x40
 80028e6:	e7ec      	b.n	80028c2 <PWMC_IsFaultOccurred+0x12>

080028e8 <RCM_RegisterRegConv>:
  }
  else
  {
#endif

    if (RCM_conversion_nb < RCM_MAX_CONV)
 80028e8:	492f      	ldr	r1, [pc, #188]	@ (80029a8 <RCM_RegisterRegConv+0xc0>)
 80028ea:	780a      	ldrb	r2, [r1, #0]
 80028ec:	2a03      	cmp	r2, #3
 80028ee:	d856      	bhi.n	800299e <RCM_RegisterRegConv+0xb6>
{
 80028f0:	b510      	push	{r4, lr}
    {
      RCM_handle_array[RCM_conversion_nb] = regConv;
 80028f2:	4c2e      	ldr	r4, [pc, #184]	@ (80029ac <RCM_RegisterRegConv+0xc4>)
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
      RCM_conversion_nb++;

      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80028f4:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array[RCM_conversion_nb] = regConv;
 80028f6:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
 80028fa:	7302      	strb	r2, [r0, #12]
      RCM_conversion_nb++;
 80028fc:	3201      	adds	r2, #1
 80028fe:	700a      	strb	r2, [r1, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	07d4      	lsls	r4, r2, #31
 8002904:	d422      	bmi.n	800294c <RCM_RegisterRegConv+0x64>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002906:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002908:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800290a:	f022 0204 	bic.w	r2, r2, #4
 800290e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002910:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002912:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002914:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800291c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002924:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002928:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800292c:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	2a00      	cmp	r2, #0
 8002932:	dbfc      	blt.n	800292e <RCM_RegisterRegConv+0x46>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	07d1      	lsls	r1, r2, #31
 8002938:	d408      	bmi.n	800294c <RCM_RegisterRegConv+0x64>
  MODIFY_REG(ADCx->CR,
 800293a:	491d      	ldr	r1, [pc, #116]	@ (80029b0 <RCM_RegisterRegConv+0xc8>)
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	400a      	ands	r2, r1
 8002940:	f042 0201 	orr.w	r2, r2, #1
 8002944:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	07d2      	lsls	r2, r2, #31
 800294a:	d5f7      	bpl.n	800293c <RCM_RegisterRegConv+0x54>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800294c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800294e:	f021 010f 	bic.w	r1, r1, #15
 8002952:	6319      	str	r1, [r3, #48]	@ 0x30
      {
        /* Nothing to do */
      }
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
      /* Configure the sampling time (should already be configured by for non user conversions) */
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002954:	7a01      	ldrb	r1, [r0, #8]
 8002956:	2201      	movs	r2, #1
 8002958:	408a      	lsls	r2, r1
 800295a:	2909      	cmp	r1, #9
 800295c:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8002960:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8002964:	d91d      	bls.n	80029a2 <RCM_RegisterRegConv+0xba>
 8002966:	f1ac 0c1e 	sub.w	ip, ip, #30
 800296a:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 800296e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002972:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8002976:	f00c 0c04 	and.w	ip, ip, #4
 800297a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800297c:	6840      	ldr	r0, [r0, #4]
 800297e:	f853 100c 	ldr.w	r1, [r3, ip]
 8002982:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002986:	f04f 0e07 	mov.w	lr, #7
 800298a:	4090      	lsls	r0, r2
 800298c:	fa0e f202 	lsl.w	r2, lr, r2
 8002990:	ea21 0202 	bic.w	r2, r1, r2
 8002994:	4302      	orrs	r2, r0
 8002996:	f843 200c 	str.w	r2, [r3, ip]
  bool retVal = true;
 800299a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  return retVal;
}
 800299c:	bd10      	pop	{r4, pc}
      retVal = false;
 800299e:	2000      	movs	r0, #0
}
 80029a0:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80029a2:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 80029a6:	e7e4      	b.n	8002972 <RCM_RegisterRegConv+0x8a>
 80029a8:	20001ba4 	.word	0x20001ba4
 80029ac:	20001ba8 	.word	0x20001ba8
 80029b0:	7fffffc0 	.word	0x7fffffc0

080029b4 <RCM_ExecNextConv>:
 *
 * @note: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (RCM_conversion_nb > 0u)
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <RCM_ExecNextConv+0x60>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b353      	cbz	r3, 8002a10 <RCM_ExecNextConv+0x5c>
  {

    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <RCM_ExecNextConv+0x64>)
 80029bc:	4a17      	ldr	r2, [pc, #92]	@ (8002a1c <RCM_ExecNextConv+0x68>)
 80029be:	7819      	ldrb	r1, [r3, #0]
 80029c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80029c4:	7a11      	ldrb	r1, [r2, #8]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80029c6:	6812      	ldr	r2, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80029c8:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80029ca:	2909      	cmp	r1, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80029cc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80029d0:	fa03 f301 	lsl.w	r3, r3, r1
 80029d4:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80029d8:	bf84      	itt	hi
 80029da:	381e      	subhi	r0, #30
 80029dc:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
  MODIFY_REG(*preg,
 80029e0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80029e2:	bf94      	ite	ls
 80029e4:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 80029e8:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 80029f2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80029f6:	430b      	orrs	r3, r1
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80029fa:	2304      	movs	r3, #4
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 80029fc:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80029fe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8002a00:	6893      	ldr	r3, [r2, #8]
 8002a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	6093      	str	r3, [r2, #8]
  }
  else
  {
     /* no conversion registered */
  }
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20001ba4 	.word	0x20001ba4
 8002a18:	20001ba5 	.word	0x20001ba5
 8002a1c:	20001ba8 	.word	0x20001ba8

08002a20 <RCM_ReadOngoingConv>:
 */
void RCM_ReadOngoingConv(void)
{
  uint32_t result;

  if (RCM_conversion_nb > 0u)
 8002a20:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <RCM_ReadOngoingConv+0x38>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b1b3      	cbz	r3, 8002a54 <RCM_ReadOngoingConv+0x34>
{
 8002a26:	b430      	push	{r4, r5}
  {
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_array_index]->regADC);
 8002a28:	490c      	ldr	r1, [pc, #48]	@ (8002a5c <RCM_ReadOngoingConv+0x3c>)
 8002a2a:	480d      	ldr	r0, [pc, #52]	@ (8002a60 <RCM_ReadOngoingConv+0x40>)
 8002a2c:	780a      	ldrb	r2, [r1, #0]
 8002a2e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8002a32:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002a34:	6825      	ldr	r5, [r4, #0]
 8002a36:	076d      	lsls	r5, r5, #29
 8002a38:	d503      	bpl.n	8002a42 <RCM_ReadOngoingConv+0x22>
 8002a3a:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8002a3c:	f024 040f 	bic.w	r4, r4, #15
    }
    else
    {
      /* Reading of ADC Converted Value */
      RCM_handle_array[RCM_array_index]->data
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_array_index]->regADC);
 8002a40:	8144      	strh	r4, [r0, #10]
    }

    /* Prepare next conversion */
    if (RCM_array_index == (RCM_conversion_nb - 1U))
 8002a42:	3b01      	subs	r3, #1
 8002a44:	429a      	cmp	r2, r3
    {
      RCM_array_index = 0U;
 8002a46:	bf0b      	itete	eq
 8002a48:	2300      	moveq	r3, #0
    }
    else
    {
      RCM_array_index++;
 8002a4a:	3201      	addne	r2, #1
      RCM_array_index = 0U;
 8002a4c:	700b      	strbeq	r3, [r1, #0]
      RCM_array_index++;
 8002a4e:	700a      	strbne	r2, [r1, #0]
  }
  else
  {
     /* no conversion registered */
  }
}
 8002a50:	bc30      	pop	{r4, r5}
 8002a52:	4770      	bx	lr
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20001ba4 	.word	0x20001ba4
 8002a5c:	20001ba5 	.word	0x20001ba5
 8002a60:	20001ba8 	.word	0x20001ba8

08002a64 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 8002a64:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8002a66:	f9b0 c030 	ldrsh.w	ip, [r0, #48]	@ 0x30
    pHandle->PISpeed = pPI;
 8002a6a:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8002a6c:	f9b0 1032 	ldrsh.w	r1, [r0, #50]	@ 0x32
    pHandle->Mode = pHandle->ModeDefault;
 8002a70:	f890 402e 	ldrb.w	r4, [r0, #46]	@ 0x2e
 8002a74:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8002a76:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8002a78:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8002a7c:	0409      	lsls	r1, r1, #16
 8002a7e:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 8002a82:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8002a84:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 8002a88:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8002a8a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8002a8c:	61c3      	str	r3, [r0, #28]
}
 8002a8e:	4770      	bx	lr

08002a90 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8002a90:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8002a92:	4770      	bx	lr

08002a94 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002a94:	7803      	ldrb	r3, [r0, #0]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d004      	beq.n	8002aa4 <STC_Clear+0x10>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    else if (MCM_TORQUE_MODE == pHandle->Mode)
 8002a9a:	2b04      	cmp	r3, #4
    {
      pHandle->TorqueRef = 0U;
 8002a9c:	bf04      	itt	eq
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	6083      	streq	r3, [r0, #8]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8002aa2:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8002aa4:	6900      	ldr	r0, [r0, #16]
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f004 bf30 	b.w	800790c <PID_SetIntegralTerm>

08002aac <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8002aac:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop

08002ab4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8002ab4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8002ab6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8002ab8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8002aba:	4770      	bx	lr

08002abc <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8002abc:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8002abe:	7803      	ldrb	r3, [r0, #0]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d019      	beq.n	8002af8 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8002ac4:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
 8002ac8:	458c      	cmp	ip, r1
 8002aca:	da03      	bge.n	8002ad4 <STC_ExecRamp+0x18>
 8002acc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8002ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ad2:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8002ad4:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 8002ad8:	428c      	cmp	r4, r1
 8002ada:	dcf7      	bgt.n	8002acc <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8002adc:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
 8002ade:	428c      	cmp	r4, r1
 8002ae0:	dd03      	ble.n	8002aea <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8002ae2:	f9b0 4026 	ldrsh.w	r4, [r0, #38]	@ 0x26
 8002ae6:	428c      	cmp	r4, r1
 8002ae8:	dbf0      	blt.n	8002acc <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8002aea:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 8002aec:	b9aa      	cbnz	r2, 8002b1a <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d10a      	bne.n	8002b08 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8002af2:	0409      	lsls	r1, r1, #16
 8002af4:	6041      	str	r1, [r0, #4]
 8002af6:	e009      	b.n	8002b0c <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8002af8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002afa:	428b      	cmp	r3, r1
 8002afc:	dbe6      	blt.n	8002acc <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8002afe:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	@ 0x2c
 8002b02:	428b      	cmp	r3, r1
 8002b04:	dce2      	bgt.n	8002acc <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 8002b06:	b9e2      	cbnz	r2, 8002b42 <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8002b08:	0409      	lsls	r1, r1, #16
 8002b0a:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 8002b10:	61c3      	str	r3, [r0, #28]
{
 8002b12:	2001      	movs	r0, #1
}
 8002b14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b18:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8002b1a:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8002b1e:	8c03      	ldrh	r3, [r0, #32]
        wAux /= 1000U;
 8002b20:	4c09      	ldr	r4, [pc, #36]	@ (8002b48 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 8002b22:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 8002b28:	fba4 4303 	umull	r4, r3, r4, r3
 8002b2c:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8002b2e:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8002b30:	eba1 0c0c 	sub.w	ip, r1, ip
 8002b34:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 8002b38:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8002b3a:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 8002b3e:	61c2      	str	r2, [r0, #28]
 8002b40:	e7e7      	b.n	8002b12 <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 8002b42:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8002b46:	e7ea      	b.n	8002b1e <STC_ExecRamp+0x62>
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8002b4c:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8002b4e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8002b50:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8002b52:	2a04      	cmp	r2, #4
{
 8002b54:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8002b56:	d012      	beq.n	8002b7e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8002b58:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8002b5a:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8002b5c:	d908      	bls.n	8002b70 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8002b5e:	69c1      	ldr	r1, [r0, #28]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8002b60:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8002b62:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8002b64:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8002b66:	2a03      	cmp	r2, #3
 8002b68:	d011      	beq.n	8002b8e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8002b6a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8002b6c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8002b70:	d1f9      	bne.n	8002b66 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002b72:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8002b76:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002b78:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8002b7a:	60c3      	str	r3, [r0, #12]
 8002b7c:	e7f3      	b.n	8002b66 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 8002b7e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8002b80:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8002b82:	d911      	bls.n	8002ba8 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8002b84:	69c2      	ldr	r2, [r0, #28]
      pHandle->RampRemainingStep--;
 8002b86:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8002b88:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 8002b8a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002b8c:	e7ed      	b.n	8002b6a <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8002b8e:	6960      	ldr	r0, [r4, #20]
 8002b90:	f006 f848 	bl	8008c24 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8002b94:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8002b98:	b209      	sxth	r1, r1
 8002b9a:	6920      	ldr	r0, [r4, #16]
 8002b9c:	f004 fee8 	bl	8007970 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8002ba0:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8002ba2:	0405      	lsls	r5, r0, #16
 8002ba4:	60a5      	str	r5, [r4, #8]
}
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8002ba8:	d1df      	bne.n	8002b6a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002baa:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8002bae:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8002bb0:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8002bb2:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8002bb4:	e7d9      	b.n	8002b6a <STC_CalcTorqueReference+0x1e>
 8002bb6:	bf00      	nop

08002bb8 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8002bb8:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 8002bc0:	f8d0 0032 	ldr.w	r0, [r0, #50]	@ 0x32
{
 8002bc4:	b082      	sub	sp, #8
}
 8002bc6:	b002      	add	sp, #8
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8002bd0:	6940      	ldr	r0, [r0, #20]
 8002bd2:	f006 f827 	bl	8008c24 <SPD_GetAvrgMecSpeedUnit>
 8002bd6:	0400      	lsls	r0, r0, #16
 8002bd8:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8002bda:	bd10      	pop	{r4, pc}

08002bdc <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002bdc:	4b44      	ldr	r3, [pc, #272]	@ (8002cf0 <USART2_IRQHandler+0x114>)
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8002be2:	b510      	push	{r4, lr}
 8002be4:	d509      	bpl.n	8002bfa <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8002be6:	4943      	ldr	r1, [pc, #268]	@ (8002cf4 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8002be8:	4843      	ldr	r0, [pc, #268]	@ (8002cf8 <USART2_IRQHandler+0x11c>)
 8002bea:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8002bec:	2440      	movs	r4, #64	@ 0x40
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	61ca      	str	r2, [r1, #28]
 8002bf4:	621c      	str	r4, [r3, #32]
 8002bf6:	f7fd fe2b 	bl	8000850 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8002cf0 <USART2_IRQHandler+0x114>)
 8002bfc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002bfe:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002c00:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002c02:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002c04:	074c      	lsls	r4, r1, #29
 8002c06:	d56a      	bpl.n	8002cde <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002c08:	07d8      	lsls	r0, r3, #31
 8002c0a:	d51e      	bpl.n	8002c4a <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8002c0c:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <USART2_IRQHandler+0x114>)
 8002c0e:	220e      	movs	r2, #14
 8002c10:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c16:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8002c26:	e840 3100 	strex	r1, r3, [r0]
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d1f3      	bne.n	8002c16 <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c32:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8002c36:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002c3a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3e:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8002c42:	e840 3100 	strex	r1, r3, [r0]
 8002c46:	2900      	cmp	r1, #0
 8002c48:	d1f3      	bne.n	8002c32 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002c4a:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <USART2_IRQHandler+0x114>)
 8002c4c:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002c4e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002c50:	06d2      	lsls	r2, r2, #27
 8002c52:	d543      	bpl.n	8002cdc <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8002c54:	06db      	lsls	r3, r3, #27
 8002c56:	d541      	bpl.n	8002cdc <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c5c:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8002c60:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002c64:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8002c6c:	e840 3100 	strex	r1, r3, [r0]
 8002c70:	2900      	cmp	r1, #0
 8002c72:	d1f3      	bne.n	8002c5c <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c78:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002c80:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8002c88:	e840 3100 	strex	r1, r3, [r0]
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d1f3      	bne.n	8002c78 <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002c94:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8002c98:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8002ca4:	e840 3100 	strex	r1, r3, [r0]
 8002ca8:	2900      	cmp	r1, #0
 8002caa:	d1f3      	bne.n	8002c94 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <USART2_IRQHandler+0x114>)
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002cb4:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc0:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8002cc4:	e840 3100 	strex	r1, r3, [r0]
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d1f3      	bne.n	8002cb4 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8002cce:	480a      	ldr	r0, [pc, #40]	@ (8002cf8 <USART2_IRQHandler+0x11c>)
 8002cd0:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8002cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd6:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8002cd8:	f7fd bfb0 	b.w	8000c3c <ASPEP_HWReset>
}
 8002cdc:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8002cde:	07d9      	lsls	r1, r3, #31
 8002ce0:	d5b3      	bpl.n	8002c4a <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002ce2:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002ce6:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 8002cea:	4302      	orrs	r2, r0
 8002cec:	d18e      	bne.n	8002c0c <USART2_IRQHandler+0x30>
 8002cee:	e7ac      	b.n	8002c4a <USART2_IRQHandler+0x6e>
 8002cf0:	40004400 	.word	0x40004400
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	20000454 	.word	0x20000454

08002cfc <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8002cfc:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8002cfe:	f7fe fe99 	bl	8001a34 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8002d02:	e7fe      	b.n	8002d02 <HardFault_Handler+0x6>

08002d04 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8002d04:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002d06:	4c0d      	ldr	r4, [pc, #52]	@ (8002d3c <SysTick_Handler+0x38>)
 8002d08:	7823      	ldrb	r3, [r4, #0]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d00f      	beq.n	8002d2e <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8002d12:	4a0b      	ldr	r2, [pc, #44]	@ (8002d40 <SysTick_Handler+0x3c>)
 8002d14:	7023      	strb	r3, [r4, #0]
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	079b      	lsls	r3, r3, #30
 8002d1a:	d504      	bpl.n	8002d26 <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8002d1c:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8002d1e:	4809      	ldr	r0, [pc, #36]	@ (8002d44 <SysTick_Handler+0x40>)
 8002d20:	6053      	str	r3, [r2, #4]
 8002d22:	f7fd ff3b 	bl	8000b9c <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8002d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002d2a:	f7fe be3b 	b.w	80019a4 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002d2e:	f001 fbcb 	bl	80044c8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002d32:	f002 fbe5 	bl	8005500 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e7eb      	b.n	8002d12 <SysTick_Handler+0xe>
 8002d3a:	bf00      	nop
 8002d3c:	200004dc 	.word	0x200004dc
 8002d40:	40020000 	.word	0x40020000
 8002d44:	20000454 	.word	0x20000454

08002d48 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002d48:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <EXTI15_10_IRQHandler+0x14>)
 8002d4a:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U != LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8002d4c:	0552      	lsls	r2, r2, #21
 8002d4e:	d400      	bmi.n	8002d52 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8002d50:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d56:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8002d58:	f7fe be7a 	b.w	8001a50 <UI_HandleStartStopButton_cb>
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <HAL_MspInit+0x3c>)
 8002d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d66:	f042 0201 	orr.w	r2, r2, #1
{
 8002d6a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d70:	f002 0201 	and.w	r2, r2, #1
 8002d74:	9200      	str	r2, [sp, #0]
 8002d76:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d7a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d88:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002d8c:	f002 fb2e 	bl	80053ec <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d90:	b003      	add	sp, #12
 8002d92:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d96:	f002 bff3 	b.w	8005d80 <HAL_PWREx_DisableUCPDDeadBattery>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002da0:	b510      	push	{r4, lr}
 8002da2:	4604      	mov	r4, r0
 8002da4:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da8:	2244      	movs	r2, #68	@ 0x44
 8002daa:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8002db0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8002db4:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db6:	f006 fb43 	bl	8009440 <memset>
  if(hadc->Instance==ADC1)
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc0:	d004      	beq.n	8002dcc <HAL_ADC_MspInit+0x2c>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002dc2:	4a43      	ldr	r2, [pc, #268]	@ (8002ed0 <HAL_ADC_MspInit+0x130>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d046      	beq.n	8002e56 <HAL_ADC_MspInit+0xb6>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002dc8:	b01c      	add	sp, #112	@ 0x70
 8002dca:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002dcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002dd0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dd4:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002dd6:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002dd8:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dda:	f003 fb8d 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d16a      	bne.n	8002eb8 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002de2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed4 <HAL_ADC_MspInit+0x134>)
 8002de4:	6813      	ldr	r3, [r2, #0]
 8002de6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002de8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dec:	d109      	bne.n	8002e02 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002dee:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed8 <HAL_ADC_MspInit+0x138>)
 8002df0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002df2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002df6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b35      	ldr	r3, [pc, #212]	@ (8002ed8 <HAL_ADC_MspInit+0x138>)
 8002e04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e0e:	f002 0201 	and.w	r2, r2, #1
 8002e12:	9202      	str	r2, [sp, #8]
 8002e14:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e18:	f042 0202 	orr.w	r2, r2, #2
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002e20:	2005      	movs	r0, #5
 8002e22:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002e28:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	a906      	add	r1, sp, #24
 8002e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3a:	f002 fcf9 	bl	8005830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002e3e:	f244 0202 	movw	r2, #16386	@ 0x4002
 8002e42:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	4825      	ldr	r0, [pc, #148]	@ (8002edc <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002e4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f002 fcef 	bl	8005830 <HAL_GPIO_Init>
}
 8002e52:	b01c      	add	sp, #112	@ 0x70
 8002e54:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e56:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002e5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e5e:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002e60:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002e62:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e64:	f003 fb48 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8002e68:	bb48      	cbnz	r0, 8002ebe <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <HAL_ADC_MspInit+0x134>)
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e70:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e74:	d109      	bne.n	8002e8a <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <HAL_ADC_MspInit+0x138>)
 8002e78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	4b13      	ldr	r3, [pc, #76]	@ (8002ed8 <HAL_ADC_MspInit+0x138>)
 8002e8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8002e96:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8002ec8 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ea0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8002ea8:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8002eb0:	f002 fcbe 	bl	8005830 <HAL_GPIO_Init>
}
 8002eb4:	b01c      	add	sp, #112	@ 0x70
 8002eb6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002eb8:	f7fe faae 	bl	8001418 <Error_Handler>
 8002ebc:	e791      	b.n	8002de2 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8002ebe:	f7fe faab 	bl	8001418 <Error_Handler>
 8002ec2:	e7d2      	b.n	8002e6a <HAL_ADC_MspInit+0xca>
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	00000040 	.word	0x00000040
 8002ecc:	00000003 	.word	0x00000003
 8002ed0:	50000100 	.word	0x50000100
 8002ed4:	20001bb8 	.word	0x20001bb8
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	48000400 	.word	0x48000400

08002ee0 <HAL_COMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcomp: COMP handle pointer
  * @retval None
  */
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002ee0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8002ee2:	6802      	ldr	r2, [r0, #0]
 8002ee4:	4934      	ldr	r1, [pc, #208]	@ (8002fb8 <HAL_COMP_MspInit+0xd8>)
{
 8002ee6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee8:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8002eea:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002ef0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002ef4:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8002ef6:	d008      	beq.n	8002f0a <HAL_COMP_MspInit+0x2a>

    /* USER CODE BEGIN COMP1_MspInit 1 */

    /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8002ef8:	4b30      	ldr	r3, [pc, #192]	@ (8002fbc <HAL_COMP_MspInit+0xdc>)
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d01e      	beq.n	8002f3c <HAL_COMP_MspInit+0x5c>

    /* USER CODE BEGIN COMP2_MspInit 1 */

    /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8002efe:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <HAL_COMP_MspInit+0xe0>)
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d034      	beq.n	8002f6e <HAL_COMP_MspInit+0x8e>
    /* USER CODE BEGIN COMP4_MspInit 1 */

    /* USER CODE END COMP4_MspInit 1 */
  }

}
 8002f04:	b00b      	add	sp, #44	@ 0x2c
 8002f06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f0e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002f12:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8002fa0 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002f26:	a904      	add	r1, sp, #16
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8002f2c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f30:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f002 fc7d 	bl	8005830 <HAL_GPIO_Init>
}
 8002f36:	b00b      	add	sp, #44	@ 0x2c
 8002f38:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8002f40:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002f44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002f4e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8002fa8 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002f58:	a904      	add	r1, sp, #16
 8002f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002f5e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f002 fc64 	bl	8005830 <HAL_GPIO_Init>
}
 8002f68:	b00b      	add	sp, #44	@ 0x2c
 8002f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6e:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8002f72:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002f78:	4812      	ldr	r0, [pc, #72]	@ (8002fc4 <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	f042 0202 	orr.w	r2, r2, #2
 8002f7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002f82:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8002fb0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002f8c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002f8e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002f94:	f002 fc4c 	bl	8005830 <HAL_GPIO_Init>
}
 8002f98:	b00b      	add	sp, #44	@ 0x2c
 8002f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f9e:	bf00      	nop
 8002fa0:	00000002 	.word	0x00000002
 8002fa4:	00000003 	.word	0x00000003
 8002fa8:	00000080 	.word	0x00000080
 8002fac:	00000003 	.word	0x00000003
 8002fb0:	00000001 	.word	0x00000001
 8002fb4:	00000003 	.word	0x00000003
 8002fb8:	40010200 	.word	0x40010200
 8002fbc:	40010204 	.word	0x40010204
 8002fc0:	4001020c 	.word	0x4001020c
 8002fc4:	48000400 	.word	0x48000400

08002fc8 <HAL_CORDIC_MspInit>:
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_CORDIC_MspInit+0x28>)
 8002fca:	6802      	ldr	r2, [r0, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d000      	beq.n	8002fd2 <HAL_CORDIC_MspInit+0xa>
 8002fd0:	4770      	bx	lr
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002fd2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
{
 8002fda:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002fdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fe0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8002fec:	b002      	add	sp, #8
 8002fee:	4770      	bx	lr
 8002ff0:	40020c00 	.word	0x40020c00

08002ff4 <HAL_DAC_MspInit>:
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_DAC_MspInit+0x2c>)
 8002ff6:	6802      	ldr	r2, [r0, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d000      	beq.n	8002ffe <HAL_DAC_MspInit+0xa>
 8002ffc:	4770      	bx	lr
  {
    /* USER CODE BEGIN DAC3_MspInit 0 */

    /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8002ffe:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8003002:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8003006:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003008:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800300a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800300e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END DAC3_MspInit 1 */

  }

}
 800301a:	b002      	add	sp, #8
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	50001000 	.word	0x50001000
 8003024:	00000000 	.word	0x00000000

08003028 <HAL_OPAMP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hopamp: OPAMP handle pointer
  * @retval None
  */
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003028:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 800302a:	6802      	ldr	r2, [r0, #0]
 800302c:	4934      	ldr	r1, [pc, #208]	@ (8003100 <HAL_OPAMP_MspInit+0xd8>)
{
 800302e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8003032:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003038:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800303c:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 800303e:	d008      	beq.n	8003052 <HAL_OPAMP_MspInit+0x2a>

    /* USER CODE BEGIN OPAMP1_MspInit 1 */

    /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003040:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <HAL_OPAMP_MspInit+0xdc>)
 8003042:	429a      	cmp	r2, r3
 8003044:	d01e      	beq.n	8003084 <HAL_OPAMP_MspInit+0x5c>

    /* USER CODE BEGIN OPAMP2_MspInit 1 */

    /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8003046:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_OPAMP_MspInit+0xe0>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d033      	beq.n	80030b4 <HAL_OPAMP_MspInit+0x8c>
    /* USER CODE BEGIN OPAMP3_MspInit 1 */

    /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 800304c:	b00b      	add	sp, #44	@ 0x2c
 800304e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003056:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800305a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80030e8 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003060:	f042 0201 	orr.w	r2, r2, #1
 8003064:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306e:	a904      	add	r1, sp, #16
 8003070:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003074:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800307a:	f002 fbd9 	bl	8005830 <HAL_GPIO_Init>
}
 800307e:	b00b      	add	sp, #44	@ 0x2c
 8003080:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8003088:	33fc      	adds	r3, #252	@ 0xfc
 800308a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003094:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80030f0 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	a904      	add	r1, sp, #16
 80030a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80030a4:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f002 fbc1 	bl	8005830 <HAL_GPIO_Init>
}
 80030ae:	b00b      	add	sp, #44	@ 0x2c
 80030b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b4:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80030b8:	33f8      	adds	r3, #248	@ 0xf8
 80030ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030bc:	4813      	ldr	r0, [pc, #76]	@ (800310c <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	f042 0202 	orr.w	r2, r2, #2
 80030c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80030c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80030f8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80030d2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d8:	f002 fbaa 	bl	8005830 <HAL_GPIO_Init>
}
 80030dc:	b00b      	add	sp, #44	@ 0x2c
 80030de:	f85d fb04 	ldr.w	pc, [sp], #4
 80030e2:	bf00      	nop
 80030e4:	f3af 8000 	nop.w
 80030e8:	0000000e 	.word	0x0000000e
 80030ec:	00000003 	.word	0x00000003
 80030f0:	000000e0 	.word	0x000000e0
 80030f4:	00000003 	.word	0x00000003
 80030f8:	00000007 	.word	0x00000007
 80030fc:	00000003 	.word	0x00000003
 8003100:	40010300 	.word	0x40010300
 8003104:	40010304 	.word	0x40010304
 8003108:	40010308 	.word	0x40010308
 800310c:	48000400 	.word	0x48000400

08003110 <HAL_TIM_PWM_MspInit>:
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8003110:	4b09      	ldr	r3, [pc, #36]	@ (8003138 <HAL_TIM_PWM_MspInit+0x28>)
 8003112:	6802      	ldr	r2, [r0, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d000      	beq.n	800311a <HAL_TIM_PWM_MspInit+0xa>
 8003118:	4770      	bx	lr
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800311a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 800311e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003126:	661a      	str	r2, [r3, #96]	@ 0x60
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003132:	b002      	add	sp, #8
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00

0800313c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800313c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800313e:	4a2b      	ldr	r2, [pc, #172]	@ (80031ec <HAL_TIM_MspPostInit+0xb0>)
 8003140:	6801      	ldr	r1, [r0, #0]
{
 8003142:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003144:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003146:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800314c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003150:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8003152:	d001      	beq.n	8003158 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003154:	b00a      	add	sp, #40	@ 0x28
 8003156:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003158:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800315c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003160:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003166:	f042 0204 	orr.w	r2, r2, #4
 800316a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800316c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800316e:	f002 0204 	and.w	r2, r2, #4
 8003172:	9201      	str	r2, [sp, #4]
 8003174:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003178:	f042 0202 	orr.w	r2, r2, #2
 800317c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800317e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003180:	f002 0202 	and.w	r2, r2, #2
 8003184:	9202      	str	r2, [sp, #8]
 8003186:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003192:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800319c:	2402      	movs	r4, #2
 800319e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80031a2:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80031a4:	a904      	add	r1, sp, #16
 80031a6:	4812      	ldr	r0, [pc, #72]	@ (80031f0 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80031aa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80031ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f002 fb3e 	bl	8005830 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80031b4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031ba:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80031bc:	480d      	ldr	r0, [pc, #52]	@ (80031f4 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80031be:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80031c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80031c8:	f002 fb32 	bl	8005830 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80031cc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80031d0:	2302      	movs	r3, #2
 80031d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031d8:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80031de:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80031e2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f002 fb24 	bl	8005830 <HAL_GPIO_Init>
}
 80031e8:	b00a      	add	sp, #40	@ 0x28
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	48000800 	.word	0x48000800
 80031f4:	48000400 	.word	0x48000400

080031f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	4604      	mov	r4, r0
 80031fc:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003200:	2244      	movs	r2, #68	@ 0x44
 8003202:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003208:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800320c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800320e:	f006 f917 	bl	8009440 <memset>
  if(huart->Instance==USART2)
 8003212:	4b35      	ldr	r3, [pc, #212]	@ (80032e8 <HAL_UART_MspInit+0xf0>)
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d001      	beq.n	800321e <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800321a:	b018      	add	sp, #96	@ 0x60
 800321c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800321e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003220:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003222:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003224:	f003 f968 	bl	80064f8 <HAL_RCCEx_PeriphCLKConfig>
 8003228:	2800      	cmp	r0, #0
 800322a:	d14c      	bne.n	80032c6 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 800322c:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	4830      	ldr	r0, [pc, #192]	@ (80032f0 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003230:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003232:	4e30      	ldr	r6, [pc, #192]	@ (80032f4 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003234:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003238:	659a      	str	r2, [r3, #88]	@ 0x58
 800323a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800323c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003240:	9200      	str	r2, [sp, #0]
 8003242:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003246:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 80032d8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	f042 0202 	orr.w	r2, r2, #2
 800324e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003252:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003256:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80032e0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003262:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003264:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003266:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003268:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f002 fae0 	bl	8005830 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003270:	4921      	ldr	r1, [pc, #132]	@ (80032f8 <HAL_UART_MspInit+0x100>)
 8003272:	221a      	movs	r2, #26
 8003274:	2300      	movs	r3, #0
 8003276:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800327a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8003282:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8003286:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800328a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800328c:	f002 fa3e 	bl	800570c <HAL_DMA_Init>
 8003290:	b9f8      	cbnz	r0, 80032d2 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003292:	4d1a      	ldr	r5, [pc, #104]	@ (80032fc <HAL_UART_MspInit+0x104>)
 8003294:	491a      	ldr	r1, [pc, #104]	@ (8003300 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003296:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800329a:	221b      	movs	r2, #27
 800329c:	2300      	movs	r3, #0
 800329e:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032a2:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80032a4:	2110      	movs	r1, #16
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80032ac:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80032b0:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80032b4:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80032b6:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80032b8:	f002 fa28 	bl	800570c <HAL_DMA_Init>
 80032bc:	b930      	cbnz	r0, 80032cc <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80032be:	67e5      	str	r5, [r4, #124]	@ 0x7c
 80032c0:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80032c2:	b018      	add	sp, #96	@ 0x60
 80032c4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80032c6:	f7fe f8a7 	bl	8001418 <Error_Handler>
 80032ca:	e7af      	b.n	800322c <HAL_UART_MspInit+0x34>
      Error_Handler();
 80032cc:	f7fe f8a4 	bl	8001418 <Error_Handler>
 80032d0:	e7f5      	b.n	80032be <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80032d2:	f7fe f8a1 	bl	8001418 <Error_Handler>
 80032d6:	e7dc      	b.n	8003292 <HAL_UART_MspInit+0x9a>
 80032d8:	00000018 	.word	0x00000018
 80032dc:	00000002 	.word	0x00000002
	...
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40021000 	.word	0x40021000
 80032f0:	48000400 	.word	0x48000400
 80032f4:	2000056c 	.word	0x2000056c
 80032f8:	40020008 	.word	0x40020008
 80032fc:	2000050c 	.word	0x2000050c
 8003300:	4002001c 	.word	0x4002001c

08003304 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003304:	4b02      	ldr	r3, [pc, #8]	@ (8003310 <ADC1_2_IRQHandler+0xc>)
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 800330a:	f7fe bae5 	b.w	80018d8 <TSK_HighFrequencyTask>
 800330e:	bf00      	nop
 8003310:	50000100 	.word	0x50000100

08003314 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003316:	4804      	ldr	r0, [pc, #16]	@ (8003328 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003318:	f06f 0201 	mvn.w	r2, #1
 800331c:	611a      	str	r2, [r3, #16]
 800331e:	f005 b91b 	b.w	8008558 <R3_2_TIMx_UP_IRQHandler>
 8003322:	bf00      	nop
 8003324:	40012c00 	.word	0x40012c00
 8003328:	20000190 	.word	0x20000190

0800332c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 800332c:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	0612      	lsls	r2, r2, #24
 8003334:	d505      	bpl.n	8003342 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003336:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 800333a:	480a      	ldr	r0, [pc, #40]	@ (8003364 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	f7ff fa9f 	bl	8002880 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003342:	4907      	ldr	r1, [pc, #28]	@ (8003360 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003344:	690b      	ldr	r3, [r1, #16]
 8003346:	05db      	lsls	r3, r3, #23
 8003348:	d505      	bpl.n	8003356 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800334a:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 800334e:	4805      	ldr	r0, [pc, #20]	@ (8003364 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003350:	610b      	str	r3, [r1, #16]
 8003352:	f7ff fa9f 	bl	8002894 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 800335a:	f7fe bb23 	b.w	80019a4 <MC_RunMotorControlTasks>
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00
 8003364:	20000190 	.word	0x20000190

08003368 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003368:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800336a:	3908      	subs	r1, #8
{
 800336c:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003370:	2920      	cmp	r1, #32
 8003372:	d812      	bhi.n	800339a <RI_SetRegisterGlobal+0x32>
 8003374:	e8df f001 	tbb	[pc, r1]
 8003378:	11111117 	.word	0x11111117
 800337c:	11111111 	.word	0x11111111
 8003380:	11111121 	.word	0x11111121
 8003384:	11111111 	.word	0x11111111
 8003388:	1111112f 	.word	0x1111112f
 800338c:	11111111 	.word	0x11111111
 8003390:	11111139 	.word	0x11111139
 8003394:	11111111 	.word	0x11111111
 8003398:	4d          	.byte	0x4d
 8003399:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800339a:	2200      	movs	r2, #0
 800339c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800339e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80033a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033a4:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80033a6:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 80033a8:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 80033ac:	bf14      	ite	ne
 80033ae:	2005      	movne	r0, #5
 80033b0:	2004      	moveq	r0, #4
}
 80033b2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 80033b6:	801a      	strh	r2, [r3, #0]
}
 80033b8:	4770      	bx	lr
      switch (regID)
 80033ba:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80033be:	d039      	beq.n	8003434 <RI_SetRegisterGlobal+0xcc>
 80033c0:	d942      	bls.n	8003448 <RI_SetRegisterGlobal+0xe0>
 80033c2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80033c6:	d035      	beq.n	8003434 <RI_SetRegisterGlobal+0xcc>
 80033c8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80033cc:	4290      	cmp	r0, r2
 80033ce:	bf14      	ite	ne
 80033d0:	2005      	movne	r0, #5
 80033d2:	2004      	moveq	r0, #4
 80033d4:	e02f      	b.n	8003436 <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 80033d6:	2818      	cmp	r0, #24
      *size = 4;
 80033d8:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80033dc:	bf14      	ite	ne
 80033de:	2005      	movne	r0, #5
 80033e0:	4610      	moveq	r0, r2
}
 80033e2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80033e6:	801a      	strh	r2, [r3, #0]
}
 80033e8:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80033ea:	2101      	movs	r1, #1
 80033ec:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80033ee:	f992 0000 	ldrsb.w	r0, [r2]
 80033f2:	b328      	cbz	r0, 8003440 <RI_SetRegisterGlobal+0xd8>
 80033f4:	fa1f f08c 	uxth.w	r0, ip
 80033f8:	e003      	b.n	8003402 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80033fa:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80033fc:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003400:	b1f4      	cbz	r4, 8003440 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8003402:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003406:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8003408:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800340c:	d3f5      	bcc.n	80033fa <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 800340e:	2004      	movs	r0, #4
 8003410:	e7c6      	b.n	80033a0 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	3202      	adds	r2, #2
 8003416:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003418:	fa1f fc8c 	uxth.w	ip, ip
 800341c:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 800341e:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003420:	d81a      	bhi.n	8003458 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8003422:	28a8      	cmp	r0, #168	@ 0xa8
 8003424:	d0f3      	beq.n	800340e <RI_SetRegisterGlobal+0xa6>
 8003426:	d81b      	bhi.n	8003460 <RI_SetRegisterGlobal+0xf8>
 8003428:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800342c:	2828      	cmp	r0, #40	@ 0x28
 800342e:	d0ee      	beq.n	800340e <RI_SetRegisterGlobal+0xa6>
 8003430:	2005      	movs	r0, #5
 8003432:	e7b5      	b.n	80033a0 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8003434:	2000      	movs	r0, #0
      *size = 2;
 8003436:	2202      	movs	r2, #2
}
 8003438:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 800343c:	801a      	strh	r2, [r3, #0]
}
 800343e:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003440:	2300      	movs	r3, #0
 8003442:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8003444:	2004      	movs	r0, #4
 8003446:	e7ab      	b.n	80033a0 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 8003448:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800344c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003450:	bf14      	ite	ne
 8003452:	2005      	movne	r0, #5
 8003454:	2004      	moveq	r0, #4
 8003456:	e7ee      	b.n	8003436 <RI_SetRegisterGlobal+0xce>
        *size = 0;
 8003458:	2200      	movs	r2, #0
 800345a:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 800345c:	200a      	movs	r0, #10
 800345e:	e79f      	b.n	80033a0 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8003460:	28e8      	cmp	r0, #232	@ 0xe8
 8003462:	d1e5      	bne.n	8003430 <RI_SetRegisterGlobal+0xc8>
 8003464:	e7d3      	b.n	800340e <RI_SetRegisterGlobal+0xa6>
 8003466:	bf00      	nop

08003468 <RI_SetRegisterMotor1>:
{
 8003468:	b530      	push	{r4, r5, lr}
 800346a:	b083      	sub	sp, #12
  switch(typeID)
 800346c:	3908      	subs	r1, #8
{
 800346e:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8003472:	4694      	mov	ip, r2
 8003474:	461c      	mov	r4, r3
  switch(typeID)
 8003476:	2920      	cmp	r1, #32
 8003478:	d812      	bhi.n	80034a0 <RI_SetRegisterMotor1+0x38>
 800347a:	e8df f001 	tbb	[pc, r1]
 800347e:	1116      	.short	0x1116
 8003480:	11111111 	.word	0x11111111
 8003484:	11231111 	.word	0x11231111
 8003488:	11111111 	.word	0x11111111
 800348c:	11581111 	.word	0x11581111
 8003490:	11111111 	.word	0x11111111
 8003494:	11461111 	.word	0x11461111
 8003498:	11111111 	.word	0x11111111
 800349c:	1111      	.short	0x1111
 800349e:	65          	.byte	0x65
 800349f:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80034a0:	2300      	movs	r3, #0
 80034a2:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80034a4:	2007      	movs	r0, #7
}
 80034a6:	b003      	add	sp, #12
 80034a8:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80034aa:	2888      	cmp	r0, #136	@ 0x88
 80034ac:	f000 8098 	beq.w	80035e0 <RI_SetRegisterMotor1+0x178>
 80034b0:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 80034b4:	2848      	cmp	r0, #72	@ 0x48
 80034b6:	bf0c      	ite	eq
 80034b8:	2004      	moveq	r0, #4
 80034ba:	2005      	movne	r0, #5
      *size = 1;
 80034bc:	2301      	movs	r3, #1
 80034be:	8023      	strh	r3, [r4, #0]
}
 80034c0:	b003      	add	sp, #12
 80034c2:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80034c4:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80034c8:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 80034ca:	f000 8214 	beq.w	80038f6 <RI_SetRegisterMotor1+0x48e>
 80034ce:	d85e      	bhi.n	800358e <RI_SetRegisterMotor1+0x126>
 80034d0:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80034d4:	f000 820a 	beq.w	80038ec <RI_SetRegisterMotor1+0x484>
 80034d8:	f240 80bb 	bls.w	8003652 <RI_SetRegisterMotor1+0x1ea>
 80034dc:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80034e0:	f000 81ee 	beq.w	80038c0 <RI_SetRegisterMotor1+0x458>
 80034e4:	f200 817e 	bhi.w	80037e4 <RI_SetRegisterMotor1+0x37c>
 80034e8:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80034ec:	f000 81c5 	beq.w	800387a <RI_SetRegisterMotor1+0x412>
 80034f0:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80034f4:	f000 81b4 	beq.w	8003860 <RI_SetRegisterMotor1+0x3f8>
 80034f8:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80034fc:	f040 81ae 	bne.w	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003500:	48b2      	ldr	r0, [pc, #712]	@ (80037cc <RI_SetRegisterMotor1+0x364>)
 8003502:	b229      	sxth	r1, r5
 8003504:	f004 f9f8 	bl	80078f8 <PID_SetKI>
          break;
 8003508:	e061      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
  *size= 1U ; /* /0 is the min String size */
 800350a:	2201      	movs	r2, #1
 800350c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800350e:	f99c 3000 	ldrsb.w	r3, [ip]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d036      	beq.n	8003584 <RI_SetRegisterMotor1+0x11c>
 8003516:	fa1f f38e 	uxth.w	r3, lr
 800351a:	e003      	b.n	8003524 <RI_SetRegisterMotor1+0xbc>
    *size = *size + 1U;
 800351c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800351e:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003522:	b379      	cbz	r1, 8003584 <RI_SetRegisterMotor1+0x11c>
    *size = *size + 1U;
 8003524:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003526:	4293      	cmp	r3, r2
    *size = *size + 1U;
 8003528:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800352a:	d8f7      	bhi.n	800351c <RI_SetRegisterMotor1+0xb4>
 800352c:	e02d      	b.n	800358a <RI_SetRegisterMotor1+0x122>
      switch (regID)
 800352e:	2898      	cmp	r0, #152	@ 0x98
 8003530:	d066      	beq.n	8003600 <RI_SetRegisterMotor1+0x198>
 8003532:	d85d      	bhi.n	80035f0 <RI_SetRegisterMotor1+0x188>
 8003534:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_RO_REG;
 8003538:	2818      	cmp	r0, #24
 800353a:	bf14      	ite	ne
 800353c:	2005      	movne	r0, #5
 800353e:	2004      	moveq	r0, #4
      *size = 4;
 8003540:	2304      	movs	r3, #4
 8003542:	8023      	strh	r3, [r4, #0]
}
 8003544:	b003      	add	sp, #12
 8003546:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003548:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 800354a:	1c8a      	adds	r2, r1, #2
 800354c:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800354e:	fa1f f38e 	uxth.w	r3, lr
 8003552:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8003554:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8003556:	d83f      	bhi.n	80035d8 <RI_SetRegisterMotor1+0x170>
        switch (regID)
 8003558:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 800355c:	f000 80c3 	beq.w	80036e6 <RI_SetRegisterMotor1+0x27e>
 8003560:	f200 80a6 	bhi.w	80036b0 <RI_SetRegisterMotor1+0x248>
 8003564:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003568:	f000 8088 	beq.w	800367c <RI_SetRegisterMotor1+0x214>
 800356c:	f200 80af 	bhi.w	80036ce <RI_SetRegisterMotor1+0x266>
 8003570:	28a8      	cmp	r0, #168	@ 0xa8
 8003572:	d00a      	beq.n	800358a <RI_SetRegisterMotor1+0x122>
 8003574:	f200 81b6 	bhi.w	80038e4 <RI_SetRegisterMotor1+0x47c>
 8003578:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800357c:	2828      	cmp	r0, #40	@ 0x28
 800357e:	d004      	beq.n	800358a <RI_SetRegisterMotor1+0x122>
 8003580:	2005      	movs	r0, #5
 8003582:	e790      	b.n	80034a6 <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 8003584:	2300      	movs	r3, #0
 8003586:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 800358a:	2004      	movs	r0, #4
 800358c:	e78b      	b.n	80034a6 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 800358e:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003592:	4298      	cmp	r0, r3
 8003594:	f000 81a1 	beq.w	80038da <RI_SetRegisterMotor1+0x472>
 8003598:	d840      	bhi.n	800361c <RI_SetRegisterMotor1+0x1b4>
 800359a:	f241 4350 	movw	r3, #5200	@ 0x1450
 800359e:	4298      	cmp	r0, r3
 80035a0:	f000 8170 	beq.w	8003884 <RI_SetRegisterMotor1+0x41c>
 80035a4:	f240 80fc 	bls.w	80037a0 <RI_SetRegisterMotor1+0x338>
 80035a8:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 80035ac:	4298      	cmp	r0, r3
 80035ae:	f000 81c7 	beq.w	8003940 <RI_SetRegisterMotor1+0x4d8>
 80035b2:	f241 5310 	movw	r3, #5392	@ 0x1510
 80035b6:	4298      	cmp	r0, r3
 80035b8:	f000 81b8 	beq.w	800392c <RI_SetRegisterMotor1+0x4c4>
 80035bc:	f241 4390 	movw	r3, #5264	@ 0x1490
 80035c0:	4298      	cmp	r0, r3
 80035c2:	f040 814b 	bne.w	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80035c6:	4882      	ldr	r0, [pc, #520]	@ (80037d0 <RI_SetRegisterMotor1+0x368>)
 80035c8:	4629      	mov	r1, r5
 80035ca:	f004 f9af 	bl	800792c <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 80035ce:	2000      	movs	r0, #0
      *size = 2;
 80035d0:	2302      	movs	r3, #2
 80035d2:	8023      	strh	r3, [r4, #0]
}
 80035d4:	b003      	add	sp, #12
 80035d6:	bd30      	pop	{r4, r5, pc}
        *size = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 80035dc:	200a      	movs	r0, #10
 80035de:	e762      	b.n	80034a6 <RI_SetRegisterMotor1+0x3e>
          uint8_t regdata8 = *data;
 80035e0:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d05b      	beq.n	800369e <RI_SetRegisterMotor1+0x236>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	f000 8125 	beq.w	8003836 <RI_SetRegisterMotor1+0x3ce>
  uint8_t retVal = MCP_CMD_OK;
 80035ec:	2000      	movs	r0, #0
 80035ee:	e765      	b.n	80034bc <RI_SetRegisterMotor1+0x54>
      switch (regID)
 80035f0:	28d8      	cmp	r0, #216	@ 0xd8
 80035f2:	d052      	beq.n	800369a <RI_SetRegisterMotor1+0x232>
          retVal = MCP_ERROR_RO_REG;
 80035f4:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 80035f8:	bf14      	ite	ne
 80035fa:	2005      	movne	r0, #5
 80035fc:	2004      	moveq	r0, #4
 80035fe:	e79f      	b.n	8003540 <RI_SetRegisterMotor1+0xd8>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003600:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003604:	4973      	ldr	r1, [pc, #460]	@ (80037d4 <RI_SetRegisterMotor1+0x36c>)
 8003606:	4874      	ldr	r0, [pc, #464]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 8003608:	fb81 2103 	smull	r2, r1, r1, r3
 800360c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003610:	2200      	movs	r2, #0
 8003612:	b209      	sxth	r1, r1
 8003614:	f7fd ff26 	bl	8001464 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003618:	2000      	movs	r0, #0
          break;
 800361a:	e791      	b.n	8003540 <RI_SetRegisterMotor1+0xd8>
      switch (regID)
 800361c:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003620:	4298      	cmp	r0, r3
 8003622:	f000 8134 	beq.w	800388e <RI_SetRegisterMotor1+0x426>
 8003626:	f200 80ea 	bhi.w	80037fe <RI_SetRegisterMotor1+0x396>
 800362a:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 800362e:	4298      	cmp	r0, r3
 8003630:	f000 8137 	beq.w	80038a2 <RI_SetRegisterMotor1+0x43a>
 8003634:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003638:	4298      	cmp	r0, r3
 800363a:	f000 812d 	beq.w	8003898 <RI_SetRegisterMotor1+0x430>
 800363e:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003642:	4298      	cmp	r0, r3
 8003644:	f040 810a 	bne.w	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003648:	4860      	ldr	r0, [pc, #384]	@ (80037cc <RI_SetRegisterMotor1+0x364>)
 800364a:	4629      	mov	r1, r5
 800364c:	f004 f98a 	bl	8007964 <PID_SetKDDivisorPOW2>
          break;
 8003650:	e7bd      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
      switch (regID)
 8003652:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003656:	f000 812e 	beq.w	80038b6 <RI_SetRegisterMotor1+0x44e>
 800365a:	f200 80e0 	bhi.w	800381e <RI_SetRegisterMotor1+0x3b6>
 800365e:	28d0      	cmp	r0, #208	@ 0xd0
 8003660:	f000 815a 	beq.w	8003918 <RI_SetRegisterMotor1+0x4b0>
 8003664:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003668:	f000 8151 	beq.w	800390e <RI_SetRegisterMotor1+0x4a6>
 800366c:	2890      	cmp	r0, #144	@ 0x90
 800366e:	f040 80f5 	bne.w	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003672:	4857      	ldr	r0, [pc, #348]	@ (80037d0 <RI_SetRegisterMotor1+0x368>)
 8003674:	b229      	sxth	r1, r5
 8003676:	f004 f93d 	bl	80078f4 <PID_SetKP>
          break;
 800367a:	e7a8      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800367c:	f8dc 1002 	ldr.w	r1, [ip, #2]
 8003680:	4b54      	ldr	r3, [pc, #336]	@ (80037d4 <RI_SetRegisterMotor1+0x36c>)
 8003682:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003686:	fb83 0301 	smull	r0, r3, r3, r1
 800368a:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 800368e:	4852      	ldr	r0, [pc, #328]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 8003690:	b209      	sxth	r1, r1
 8003692:	f7fd fee7 	bl	8001464 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003696:	2000      	movs	r0, #0
 8003698:	e705      	b.n	80034a6 <RI_SetRegisterMotor1+0x3e>
          retVal = MCP_ERROR_RO_REG;
 800369a:	2004      	movs	r0, #4
 800369c:	e750      	b.n	8003540 <RI_SetRegisterMotor1+0xd8>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800369e:	484e      	ldr	r0, [pc, #312]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 80036a0:	f7fe f80a 	bl	80016b8 <MCI_GetTeref>
 80036a4:	2200      	movs	r2, #0
 80036a6:	4601      	mov	r1, r0
 80036a8:	484b      	ldr	r0, [pc, #300]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 80036aa:	f7fd fee5 	bl	8001478 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 80036ae:	e79d      	b.n	80035ec <RI_SetRegisterMotor1+0x184>
        switch (regID)
 80036b0:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80036b4:	d06d      	beq.n	8003792 <RI_SetRegisterMotor1+0x32a>
 80036b6:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 80036ba:	f47f af61 	bne.w	8003580 <RI_SetRegisterMotor1+0x118>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80036be:	4847      	ldr	r0, [pc, #284]	@ (80037dc <RI_SetRegisterMotor1+0x374>)
 80036c0:	f10c 0102 	add.w	r1, ip, #2
}
 80036c4:	b003      	add	sp, #12
 80036c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80036ca:	f004 b847 	b.w	800775c <MCPA_cfgLog>
        switch (regID)
 80036ce:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 80036d2:	f47f af55 	bne.w	8003580 <RI_SetRegisterMotor1+0x118>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 80036d6:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80036da:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 80036de:	483e      	ldr	r0, [pc, #248]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 80036e0:	f7fd feca 	bl	8001478 <MCI_ExecTorqueRamp>
            break;
 80036e4:	e7d7      	b.n	8003696 <RI_SetRegisterMotor1+0x22e>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80036e6:	074b      	lsls	r3, r1, #29
 80036e8:	f47f af78 	bne.w	80035dc <RI_SetRegisterMotor1+0x174>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 80036ec:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80036ee:	292f      	cmp	r1, #47	@ 0x2f
 80036f0:	f63f af74 	bhi.w	80035dc <RI_SetRegisterMotor1+0x174>
              for (i = 0; i <nbrOfPhase; i++)
 80036f4:	08c9      	lsrs	r1, r1, #3
 80036f6:	d0ce      	beq.n	8003696 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80036f8:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 80036fc:	4a35      	ldr	r2, [pc, #212]	@ (80037d4 <RI_SetRegisterMotor1+0x36c>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80036fe:	f8bc 5008 	ldrh.w	r5, [ip, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003702:	fb82 4003 	smull	r4, r0, r2, r3
 8003706:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800370a:	4b35      	ldr	r3, [pc, #212]	@ (80037e0 <RI_SetRegisterMotor1+0x378>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800370c:	f9bc 4006 	ldrsh.w	r4, [ip, #6]
 8003710:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8003712:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003714:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003716:	81d8      	strh	r0, [r3, #14]
 8003718:	d0bd      	beq.n	8003696 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800371a:	f9bc 400a 	ldrsh.w	r4, [ip, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800371e:	f9bc 500e 	ldrsh.w	r5, [ip, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003722:	fb82 e004 	smull	lr, r0, r2, r4
 8003726:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 800372a:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800372c:	f8bc 4010 	ldrh.w	r4, [ip, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003730:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003732:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003734:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 8003736:	d0ae      	beq.n	8003696 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003738:	f9bc 4012 	ldrsh.w	r4, [ip, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800373c:	f9bc 5016 	ldrsh.w	r5, [ip, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003740:	fb82 e004 	smull	lr, r0, r2, r4
 8003744:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003748:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800374a:	f8bc 4018 	ldrh.w	r4, [ip, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800374e:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003750:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003752:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 8003754:	d09f      	beq.n	8003696 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003756:	f9bc 401a 	ldrsh.w	r4, [ip, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800375a:	f9bc 501e 	ldrsh.w	r5, [ip, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800375e:	fb82 e004 	smull	lr, r0, r2, r4
 8003762:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003766:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003768:	f8bc 4020 	ldrh.w	r4, [ip, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 800376c:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800376e:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003770:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 8003772:	d190      	bne.n	8003696 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003774:	f9bc 1022 	ldrsh.w	r1, [ip, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003778:	f9bc 0026 	ldrsh.w	r0, [ip, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800377c:	fb82 4201 	smull	r4, r2, r2, r1
 8003780:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003784:	f8bc 4028 	ldrh.w	r4, [ip, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003788:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800378a:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800378e:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8003790:	e781      	b.n	8003696 <RI_SetRegisterMotor1+0x22e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003792:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003796:	4810      	ldr	r0, [pc, #64]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003798:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800379a:	f7fd fe77 	bl	800148c <MCI_SetCurrentReferences>
            break;
 800379e:	e77a      	b.n	8003696 <RI_SetRegisterMotor1+0x22e>
      switch (regID)
 80037a0:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 80037a4:	f000 80d1 	beq.w	800394a <RI_SetRegisterMotor1+0x4e2>
 80037a8:	d84e      	bhi.n	8003848 <RI_SetRegisterMotor1+0x3e0>
 80037aa:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80037ae:	f040 80de 	bne.w	800396e <RI_SetRegisterMotor1+0x506>
          currComp = MCI_GetIqdref(pMCIN);
 80037b2:	4809      	ldr	r0, [pc, #36]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 80037b4:	f7fd ff62 	bl	800167c <MCI_GetIqdref>
 80037b8:	4603      	mov	r3, r0
 80037ba:	9301      	str	r3, [sp, #4]
          currComp.d = (int16_t)regdata16;
 80037bc:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 80037c0:	4805      	ldr	r0, [pc, #20]	@ (80037d8 <RI_SetRegisterMotor1+0x370>)
 80037c2:	9901      	ldr	r1, [sp, #4]
 80037c4:	f7fd fe62 	bl	800148c <MCI_SetCurrentReferences>
          break;
 80037c8:	e701      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
 80037ca:	bf00      	nop
 80037cc:	200002e0 	.word	0x200002e0
 80037d0:	20000338 	.word	0x20000338
 80037d4:	2aaaaaab 	.word	0x2aaaaaab
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000418 	.word	0x20000418
 80037e0:	20000230 	.word	0x20000230
      switch (regID)
 80037e4:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 80037e8:	d060      	beq.n	80038ac <RI_SetRegisterMotor1+0x444>
 80037ea:	f200 80b0 	bhi.w	800394e <RI_SetRegisterMotor1+0x4e6>
 80037ee:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80037f2:	d133      	bne.n	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80037f4:	4885      	ldr	r0, [pc, #532]	@ (8003a0c <RI_SetRegisterMotor1+0x5a4>)
 80037f6:	b229      	sxth	r1, r5
 80037f8:	f004 f87e 	bl	80078f8 <PID_SetKI>
          break;
 80037fc:	e6e7      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
      switch (regID)
 80037fe:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003802:	4298      	cmp	r0, r3
 8003804:	f000 808d 	beq.w	8003922 <RI_SetRegisterMotor1+0x4ba>
 8003808:	f200 80da 	bhi.w	80039c0 <RI_SetRegisterMotor1+0x558>
 800380c:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003810:	4298      	cmp	r0, r3
 8003812:	d123      	bne.n	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003814:	487d      	ldr	r0, [pc, #500]	@ (8003a0c <RI_SetRegisterMotor1+0x5a4>)
 8003816:	4629      	mov	r1, r5
 8003818:	f004 f888 	bl	800792c <PID_SetKIDivisorPOW2>
          break;
 800381c:	e6d7      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
      switch (regID)
 800381e:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003822:	f000 8088 	beq.w	8003936 <RI_SetRegisterMotor1+0x4ce>
 8003826:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800382a:	d117      	bne.n	800385c <RI_SetRegisterMotor1+0x3f4>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 800382c:	4878      	ldr	r0, [pc, #480]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 800382e:	b229      	sxth	r1, r5
 8003830:	f004 f890 	bl	8007954 <PID_SetKD>
          break;
 8003834:	e6cb      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003836:	4877      	ldr	r0, [pc, #476]	@ (8003a14 <RI_SetRegisterMotor1+0x5ac>)
 8003838:	f7fd fefe 	bl	8001638 <MCI_GetMecSpeedRefUnit>
 800383c:	2200      	movs	r2, #0
 800383e:	4601      	mov	r1, r0
 8003840:	4874      	ldr	r0, [pc, #464]	@ (8003a14 <RI_SetRegisterMotor1+0x5ac>)
 8003842:	f7fd fe0f 	bl	8001464 <MCI_ExecSpeedRamp>
 8003846:	e6d1      	b.n	80035ec <RI_SetRegisterMotor1+0x184>
      switch (regID)
 8003848:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800384c:	f43f aebf 	beq.w	80035ce <RI_SetRegisterMotor1+0x166>
 8003850:	f240 809c 	bls.w	800398c <RI_SetRegisterMotor1+0x524>
 8003854:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003858:	f43f aeb9 	beq.w	80035ce <RI_SetRegisterMotor1+0x166>
          retVal = MCP_ERROR_UNKNOWN_REG;
 800385c:	2005      	movs	r0, #5
 800385e:	e6b7      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003860:	aa01      	add	r2, sp, #4
 8003862:	f10d 0102 	add.w	r1, sp, #2
 8003866:	486c      	ldr	r0, [pc, #432]	@ (8003a18 <RI_SetRegisterMotor1+0x5b0>)
 8003868:	f005 fcc0 	bl	80091ec <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 800386c:	486a      	ldr	r0, [pc, #424]	@ (8003a18 <RI_SetRegisterMotor1+0x5b0>)
 800386e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8003872:	b229      	sxth	r1, r5
 8003874:	f005 fcc2 	bl	80091fc <STO_PLL_SetObserverGains>
          break;
 8003878:	e6a9      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 800387a:	4868      	ldr	r0, [pc, #416]	@ (8003a1c <RI_SetRegisterMotor1+0x5b4>)
 800387c:	b229      	sxth	r1, r5
 800387e:	f004 f869 	bl	8007954 <PID_SetKD>
          break;
 8003882:	e6a4      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003884:	4866      	ldr	r0, [pc, #408]	@ (8003a20 <RI_SetRegisterMotor1+0x5b8>)
 8003886:	4629      	mov	r1, r5
 8003888:	f004 f844 	bl	8007914 <PID_SetKPDivisorPOW2>
          break;
 800388c:	e69f      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 800388e:	4860      	ldr	r0, [pc, #384]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 8003890:	4629      	mov	r1, r5
 8003892:	f004 f867 	bl	8007964 <PID_SetKDDivisorPOW2>
          break;
 8003896:	e69a      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003898:	485d      	ldr	r0, [pc, #372]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 800389a:	4629      	mov	r1, r5
 800389c:	f004 f846 	bl	800792c <PID_SetKIDivisorPOW2>
          break;
 80038a0:	e695      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80038a2:	485b      	ldr	r0, [pc, #364]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 80038a4:	4629      	mov	r1, r5
 80038a6:	f004 f835 	bl	8007914 <PID_SetKPDivisorPOW2>
          break;
 80038aa:	e690      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 80038ac:	4857      	ldr	r0, [pc, #348]	@ (8003a0c <RI_SetRegisterMotor1+0x5a4>)
 80038ae:	b229      	sxth	r1, r5
 80038b0:	f004 f820 	bl	80078f4 <PID_SetKP>
          break;
 80038b4:	e68b      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 80038b6:	4856      	ldr	r0, [pc, #344]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 80038b8:	b229      	sxth	r1, r5
 80038ba:	f004 f81b 	bl	80078f4 <PID_SetKP>
          break;
 80038be:	e686      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80038c0:	aa01      	add	r2, sp, #4
 80038c2:	f10d 0102 	add.w	r1, sp, #2
 80038c6:	4854      	ldr	r0, [pc, #336]	@ (8003a18 <RI_SetRegisterMotor1+0x5b0>)
 80038c8:	f005 fc90 	bl	80091ec <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 80038cc:	4852      	ldr	r0, [pc, #328]	@ (8003a18 <RI_SetRegisterMotor1+0x5b0>)
 80038ce:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80038d2:	b22a      	sxth	r2, r5
 80038d4:	f005 fc92 	bl	80091fc <STO_PLL_SetObserverGains>
          break;
 80038d8:	e679      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80038da:	4850      	ldr	r0, [pc, #320]	@ (8003a1c <RI_SetRegisterMotor1+0x5b4>)
 80038dc:	4629      	mov	r1, r5
 80038de:	f004 f825 	bl	800792c <PID_SetKIDivisorPOW2>
          break;
 80038e2:	e674      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
        switch (regID)
 80038e4:	28e8      	cmp	r0, #232	@ 0xe8
 80038e6:	f43f ae50 	beq.w	800358a <RI_SetRegisterMotor1+0x122>
 80038ea:	e649      	b.n	8003580 <RI_SetRegisterMotor1+0x118>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 80038ec:	484b      	ldr	r0, [pc, #300]	@ (8003a1c <RI_SetRegisterMotor1+0x5b4>)
 80038ee:	b229      	sxth	r1, r5
 80038f0:	f004 f800 	bl	80078f4 <PID_SetKP>
          break;
 80038f4:	e66b      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          currComp = MCI_GetIqdref(pMCIN);
 80038f6:	4847      	ldr	r0, [pc, #284]	@ (8003a14 <RI_SetRegisterMotor1+0x5ac>)
 80038f8:	f7fd fec0 	bl	800167c <MCI_GetIqdref>
 80038fc:	4603      	mov	r3, r0
 80038fe:	9301      	str	r3, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8003900:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003904:	4843      	ldr	r0, [pc, #268]	@ (8003a14 <RI_SetRegisterMotor1+0x5ac>)
 8003906:	9901      	ldr	r1, [sp, #4]
 8003908:	f7fd fdc0 	bl	800148c <MCI_SetCurrentReferences>
          break;
 800390c:	e65f      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800390e:	4844      	ldr	r0, [pc, #272]	@ (8003a20 <RI_SetRegisterMotor1+0x5b8>)
 8003910:	b229      	sxth	r1, r5
 8003912:	f004 f81f 	bl	8007954 <PID_SetKD>
          break;
 8003916:	e65a      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003918:	4841      	ldr	r0, [pc, #260]	@ (8003a20 <RI_SetRegisterMotor1+0x5b8>)
 800391a:	b229      	sxth	r1, r5
 800391c:	f003 ffec 	bl	80078f8 <PID_SetKI>
          break;
 8003920:	e655      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003922:	483a      	ldr	r0, [pc, #232]	@ (8003a0c <RI_SetRegisterMotor1+0x5a4>)
 8003924:	4629      	mov	r1, r5
 8003926:	f003 fff5 	bl	8007914 <PID_SetKPDivisorPOW2>
          break;
 800392a:	e650      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800392c:	483b      	ldr	r0, [pc, #236]	@ (8003a1c <RI_SetRegisterMotor1+0x5b4>)
 800392e:	4629      	mov	r1, r5
 8003930:	f003 fff0 	bl	8007914 <PID_SetKPDivisorPOW2>
          break;
 8003934:	e64b      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8003936:	4836      	ldr	r0, [pc, #216]	@ (8003a10 <RI_SetRegisterMotor1+0x5a8>)
 8003938:	b229      	sxth	r1, r5
 800393a:	f003 ffdd 	bl	80078f8 <PID_SetKI>
          break;
 800393e:	e646      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003940:	4837      	ldr	r0, [pc, #220]	@ (8003a20 <RI_SetRegisterMotor1+0x5b8>)
 8003942:	4629      	mov	r1, r5
 8003944:	f004 f80e 	bl	8007964 <PID_SetKDDivisorPOW2>
          break;
 8003948:	e641      	b.n	80035ce <RI_SetRegisterMotor1+0x166>
      switch (regID)
 800394a:	2004      	movs	r0, #4
 800394c:	e640      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 800394e:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003952:	d0fa      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 8003954:	d827      	bhi.n	80039a6 <RI_SetRegisterMotor1+0x53e>
 8003956:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 800395a:	d0f6      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 800395c:	d84a      	bhi.n	80039f4 <RI_SetRegisterMotor1+0x58c>
 800395e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003962:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003966:	bf14      	ite	ne
 8003968:	2005      	movne	r0, #5
 800396a:	2004      	moveq	r0, #4
 800396c:	e630      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 800396e:	f4ff af75 	bcc.w	800385c <RI_SetRegisterMotor1+0x3f4>
 8003972:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003976:	d0e8      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 8003978:	d82d      	bhi.n	80039d6 <RI_SetRegisterMotor1+0x56e>
 800397a:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800397e:	d0e4      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 8003980:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003984:	bf14      	ite	ne
 8003986:	2005      	movne	r0, #5
 8003988:	2004      	moveq	r0, #4
 800398a:	e621      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 800398c:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003990:	d0db      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 8003992:	d835      	bhi.n	8003a00 <RI_SetRegisterMotor1+0x598>
 8003994:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003998:	d0d7      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 800399a:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800399e:	bf14      	ite	ne
 80039a0:	2005      	movne	r0, #5
 80039a2:	2004      	moveq	r0, #4
 80039a4:	e614      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 80039a6:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80039aa:	d0ce      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 80039ac:	d81c      	bhi.n	80039e8 <RI_SetRegisterMotor1+0x580>
 80039ae:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80039b2:	d0ca      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 80039b4:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80039b8:	bf14      	ite	ne
 80039ba:	2005      	movne	r0, #5
 80039bc:	2004      	moveq	r0, #4
 80039be:	e607      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 80039c0:	f641 2390 	movw	r3, #6800	@ 0x1a90
 80039c4:	4298      	cmp	r0, r3
 80039c6:	d0c0      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 80039c8:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80039cc:	4298      	cmp	r0, r3
 80039ce:	bf14      	ite	ne
 80039d0:	2005      	movne	r0, #5
 80039d2:	2004      	moveq	r0, #4
 80039d4:	e5fc      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 80039d6:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 80039da:	d0b6      	beq.n	800394a <RI_SetRegisterMotor1+0x4e2>
 80039dc:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80039e0:	bf14      	ite	ne
 80039e2:	2005      	movne	r0, #5
 80039e4:	2004      	moveq	r0, #4
 80039e6:	e5f3      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 80039e8:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80039ec:	bf14      	ite	ne
 80039ee:	2005      	movne	r0, #5
 80039f0:	2004      	moveq	r0, #4
 80039f2:	e5ed      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 80039f4:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80039f8:	bf14      	ite	ne
 80039fa:	2005      	movne	r0, #5
 80039fc:	2004      	moveq	r0, #4
 80039fe:	e5e7      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 8003a00:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8003a04:	bf14      	ite	ne
 8003a06:	2005      	movne	r0, #5
 8003a08:	2004      	moveq	r0, #4
 8003a0a:	e5e1      	b.n	80035d0 <RI_SetRegisterMotor1+0x168>
 8003a0c:	2000009c 	.word	0x2000009c
 8003a10:	2000030c 	.word	0x2000030c
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000068 	.word	0x20000068
 8003a1c:	200002e0 	.word	0x200002e0
 8003a20:	20000338 	.word	0x20000338

08003a24 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003a24:	b510      	push	{r4, lr}
    switch (typeID)
 8003a26:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003a2a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8003a2e:	f1bc 0f20 	cmp.w	ip, #32
 8003a32:	d812      	bhi.n	8003a5a <RI_GetRegisterGlobal+0x36>
 8003a34:	e8df f00c 	tbb	[pc, ip]
 8003a38:	1111111b 	.word	0x1111111b
 8003a3c:	11111111 	.word	0x11111111
 8003a40:	11111127 	.word	0x11111127
 8003a44:	11111111 	.word	0x11111111
 8003a48:	11111122 	.word	0x11111122
 8003a4c:	11111111 	.word	0x11111111
 8003a50:	11111135 	.word	0x11111135
 8003a54:	11111111 	.word	0x11111111
 8003a58:	13          	.byte	0x13
 8003a59:	00          	.byte	0x00
 8003a5a:	2007      	movs	r0, #7
}
 8003a5c:	bd10      	pop	{r4, pc}
        switch (regID)
 8003a5e:	2828      	cmp	r0, #40	@ 0x28
 8003a60:	d029      	beq.n	8003ab6 <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 8003a62:	8812      	ldrh	r2, [r2, #0]
 8003a64:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003a66:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	801a      	strh	r2, [r3, #0]
}
 8003a6c:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8003a6e:	f1be 0f00 	cmp.w	lr, #0
 8003a72:	dd1e      	ble.n	8003ab2 <RI_GetRegisterGlobal+0x8e>
 8003a74:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8003a76:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003a78:	2005      	movs	r0, #5
}
 8003a7a:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8003a7c:	f1be 0f03 	cmp.w	lr, #3
 8003a80:	dd15      	ble.n	8003aae <RI_GetRegisterGlobal+0x8a>
 8003a82:	2204      	movs	r2, #4
 8003a84:	e7f7      	b.n	8003a76 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8003a86:	f1be 0f01 	cmp.w	lr, #1
 8003a8a:	dd10      	ble.n	8003aae <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 8003a8c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003a90:	d05a      	beq.n	8003b48 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 8003a92:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003a96:	bf14      	ite	ne
 8003a98:	2005      	movne	r0, #5
 8003a9a:	2000      	moveq	r0, #0
          *size = 2;
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	801a      	strh	r2, [r3, #0]
}
 8003aa0:	bd10      	pop	{r4, pc}
        switch (regID)
 8003aa2:	2820      	cmp	r0, #32
 8003aa4:	d02c      	beq.n	8003b00 <RI_GetRegisterGlobal+0xdc>
 8003aa6:	2860      	cmp	r0, #96	@ 0x60
 8003aa8:	d00f      	beq.n	8003aca <RI_GetRegisterGlobal+0xa6>
 8003aaa:	2200      	movs	r2, #0
 8003aac:	e7e3      	b.n	8003a76 <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003aae:	2008      	movs	r0, #8
}
 8003ab0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ab2:	4608      	mov	r0, r1
}
 8003ab4:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ab6:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003aba:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003abc:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003ac0:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ac2:	d835      	bhi.n	8003b30 <RI_GetRegisterGlobal+0x10c>
 8003ac4:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ac6:	2008      	movs	r0, #8
 8003ac8:	e7cf      	b.n	8003a6a <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003aca:	4c20      	ldr	r4, [pc, #128]	@ (8003b4c <RI_GetRegisterGlobal+0x128>)
 8003acc:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003ad4:	b180      	cbz	r0, 8003af8 <RI_GetRegisterGlobal+0xd4>
 8003ad6:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003ada:	46a4      	mov	ip, r4
 8003adc:	e008      	b.n	8003af0 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 8003ade:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003ae2:	8819      	ldrh	r1, [r3, #0]
 8003ae4:	3101      	adds	r1, #1
 8003ae6:	b289      	uxth	r1, r1
 8003ae8:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003aea:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003aee:	b118      	cbz	r0, 8003af8 <RI_GetRegisterGlobal+0xd4>
 8003af0:	4571      	cmp	r1, lr
 8003af2:	d3f4      	bcc.n	8003ade <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003af4:	2006      	movs	r0, #6
}
 8003af6:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003afc:	2000      	movs	r0, #0
}
 8003afe:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003b00:	4c13      	ldr	r4, [pc, #76]	@ (8003b50 <RI_GetRegisterGlobal+0x12c>)
 8003b02:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003b06:	2101      	movs	r1, #1
 8003b08:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003b0a:	2800      	cmp	r0, #0
 8003b0c:	d0f4      	beq.n	8003af8 <RI_GetRegisterGlobal+0xd4>
 8003b0e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003b12:	46a4      	mov	ip, r4
 8003b14:	e009      	b.n	8003b2a <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8003b16:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	3101      	adds	r1, #1
 8003b1e:	b289      	uxth	r1, r1
 8003b20:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003b22:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d0e6      	beq.n	8003af8 <RI_GetRegisterGlobal+0xd4>
 8003b2a:	458e      	cmp	lr, r1
 8003b2c:	d8f3      	bhi.n	8003b16 <RI_GetRegisterGlobal+0xf2>
 8003b2e:	e7e1      	b.n	8003af4 <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003b30:	4908      	ldr	r1, [pc, #32]	@ (8003b54 <RI_GetRegisterGlobal+0x130>)
 8003b32:	6848      	ldr	r0, [r1, #4]
 8003b34:	680c      	ldr	r4, [r1, #0]
 8003b36:	8909      	ldrh	r1, [r1, #8]
 8003b38:	f8c2 0006 	str.w	r0, [r2, #6]
 8003b3c:	f8c2 4002 	str.w	r4, [r2, #2]
 8003b40:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8003b42:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003b44:	220c      	movs	r2, #12
 8003b46:	e790      	b.n	8003a6a <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8003b48:	2000      	movs	r0, #0
 8003b4a:	e7a7      	b.n	8003a9c <RI_GetRegisterGlobal+0x78>
 8003b4c:	0800967c 	.word	0x0800967c
 8003b50:	08009658 	.word	0x08009658
 8003b54:	0800964c 	.word	0x0800964c

08003b58 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003b58:	b530      	push	{r4, r5, lr}
 8003b5a:	b095      	sub	sp, #84	@ 0x54
 8003b5c:	461d      	mov	r5, r3
    switch (typeID)
 8003b5e:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8003b62:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 8003b66:	4614      	mov	r4, r2
    switch (typeID)
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d812      	bhi.n	8003b92 <RI_GetRegisterMotor1+0x3a>
 8003b6c:	e8df f003 	tbb	[pc, r3]
 8003b70:	11111131 	.word	0x11111131
 8003b74:	11111111 	.word	0x11111111
 8003b78:	1111116a 	.word	0x1111116a
 8003b7c:	11111111 	.word	0x11111111
 8003b80:	11111147 	.word	0x11111147
 8003b84:	11111111 	.word	0x11111111
 8003b88:	11111161 	.word	0x11111161
 8003b8c:	11111111 	.word	0x11111111
 8003b90:	14          	.byte	0x14
 8003b91:	00          	.byte	0x00
 8003b92:	2007      	movs	r0, #7
  }
 8003b94:	b015      	add	sp, #84	@ 0x54
 8003b96:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003b98:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003b9c:	f000 81d2 	beq.w	8003f44 <RI_GetRegisterMotor1+0x3ec>
 8003ba0:	d87c      	bhi.n	8003c9c <RI_GetRegisterMotor1+0x144>
 8003ba2:	28e8      	cmp	r0, #232	@ 0xe8
        rawData++;
 8003ba4:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8003ba8:	f000 81e8 	beq.w	8003f7c <RI_GetRegisterMotor1+0x424>
 8003bac:	f200 8121 	bhi.w	8003df2 <RI_GetRegisterMotor1+0x29a>
 8003bb0:	2868      	cmp	r0, #104	@ 0x68
 8003bb2:	f000 81d8 	beq.w	8003f66 <RI_GetRegisterMotor1+0x40e>
 8003bb6:	28a8      	cmp	r0, #168	@ 0xa8
 8003bb8:	f040 81ac 	bne.w	8003f14 <RI_GetRegisterMotor1+0x3bc>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003bbc:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003bc0:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003bc2:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003bc6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003bc8:	f200 825a 	bhi.w	8004080 <RI_GetRegisterMotor1+0x528>
 8003bcc:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003bce:	2008      	movs	r0, #8
 8003bd0:	e080      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
        if (freeSpace > 0)
 8003bd2:	f1bc 0f00 	cmp.w	ip, #0
 8003bd6:	f340 8174 	ble.w	8003ec2 <RI_GetRegisterMotor1+0x36a>
          switch (regID)
 8003bda:	2888      	cmp	r0, #136	@ 0x88
 8003bdc:	f000 8196 	beq.w	8003f0c <RI_GetRegisterMotor1+0x3b4>
 8003be0:	28c8      	cmp	r0, #200	@ 0xc8
 8003be2:	f000 818f 	beq.w	8003f04 <RI_GetRegisterMotor1+0x3ac>
 8003be6:	2848      	cmp	r0, #72	@ 0x48
 8003be8:	f040 80cd 	bne.w	8003d86 <RI_GetRegisterMotor1+0x22e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003bec:	48b6      	ldr	r0, [pc, #728]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003bee:	f7fd fc9b 	bl	8001528 <MCI_GetSTMState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003bf2:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003bf4:	2000      	movs	r0, #0
          *size = 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	802b      	strh	r3, [r5, #0]
  }
 8003bfa:	b015      	add	sp, #84	@ 0x54
 8003bfc:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8003bfe:	f1bc 0f03 	cmp.w	ip, #3
 8003c02:	dd48      	ble.n	8003c96 <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 8003c04:	28d8      	cmp	r0, #216	@ 0xd8
 8003c06:	f000 81c8 	beq.w	8003f9a <RI_GetRegisterMotor1+0x442>
 8003c0a:	f200 816b 	bhi.w	8003ee4 <RI_GetRegisterMotor1+0x38c>
 8003c0e:	2858      	cmp	r0, #88	@ 0x58
 8003c10:	f000 814f 	beq.w	8003eb2 <RI_GetRegisterMotor1+0x35a>
 8003c14:	2898      	cmp	r0, #152	@ 0x98
 8003c16:	f000 81c7 	beq.w	8003fa8 <RI_GetRegisterMotor1+0x450>
 8003c1a:	2818      	cmp	r0, #24
 8003c1c:	f040 81c2 	bne.w	8003fa4 <RI_GetRegisterMotor1+0x44c>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003c20:	48a9      	ldr	r0, [pc, #676]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003c22:	f7fd fccb 	bl	80015bc <MCI_GetFaultState>
 8003c26:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003c28:	2000      	movs	r0, #0
          *size = 4;
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	802b      	strh	r3, [r5, #0]
  }
 8003c2e:	b015      	add	sp, #84	@ 0x54
 8003c30:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003c32:	28a0      	cmp	r0, #160	@ 0xa0
 8003c34:	f000 808f 	beq.w	8003d56 <RI_GetRegisterMotor1+0x1fe>
 8003c38:	28e0      	cmp	r0, #224	@ 0xe0
 8003c3a:	d06f      	beq.n	8003d1c <RI_GetRegisterMotor1+0x1c4>
            *size= 0 ; /* */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003c40:	2005      	movs	r0, #5
            break;
 8003c42:	e7a7      	b.n	8003b94 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8003c44:	f1bc 0f01 	cmp.w	ip, #1
 8003c48:	dd25      	ble.n	8003c96 <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 8003c4a:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8003c4e:	f000 833e 	beq.w	80042ce <RI_GetRegisterMotor1+0x776>
 8003c52:	d842      	bhi.n	8003cda <RI_GetRegisterMotor1+0x182>
 8003c54:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003c58:	f000 8334 	beq.w	80042c4 <RI_GetRegisterMotor1+0x76c>
 8003c5c:	f200 80b0 	bhi.w	8003dc0 <RI_GetRegisterMotor1+0x268>
 8003c60:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003c64:	f000 8301 	beq.w	800426a <RI_GetRegisterMotor1+0x712>
 8003c68:	f200 81bc 	bhi.w	8003fe4 <RI_GetRegisterMotor1+0x48c>
 8003c6c:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003c70:	f000 82ab 	beq.w	80041ca <RI_GetRegisterMotor1+0x672>
 8003c74:	f200 8258 	bhi.w	8004128 <RI_GetRegisterMotor1+0x5d0>
 8003c78:	2890      	cmp	r0, #144	@ 0x90
 8003c7a:	f000 82d0 	beq.w	800421e <RI_GetRegisterMotor1+0x6c6>
 8003c7e:	28d0      	cmp	r0, #208	@ 0xd0
 8003c80:	f040 82f1 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003c84:	4891      	ldr	r0, [pc, #580]	@ (8003ecc <RI_GetRegisterMotor1+0x374>)
 8003c86:	f003 fe3d 	bl	8007904 <PID_GetKI>
 8003c8a:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003c8c:	2000      	movs	r0, #0
          *size = 2;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	802b      	strh	r3, [r5, #0]
  }
 8003c92:	b015      	add	sp, #84	@ 0x54
 8003c94:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003c96:	2008      	movs	r0, #8
  }
 8003c98:	b015      	add	sp, #84	@ 0x54
 8003c9a:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003c9c:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003ca0:	f000 80bf 	beq.w	8003e22 <RI_GetRegisterMotor1+0x2ca>
 8003ca4:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003ca8:	f000 8139 	beq.w	8003f1e <RI_GetRegisterMotor1+0x3c6>
 8003cac:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003cb0:	f040 8130 	bne.w	8003f14 <RI_GetRegisterMotor1+0x3bc>
            *rawSize = 4;
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003cb8:	4883      	ldr	r0, [pc, #524]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003cba:	f7fd fcad 	bl	8001618 <MCI_GetLastRampFinalTorque>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003cc2:	4881      	ldr	r0, [pc, #516]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003cc4:	f7fd fcac 	bl	8001620 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8003cc8:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003cca:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 8003ccc:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8003cce:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003cd0:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	802b      	strh	r3, [r5, #0]
  }
 8003cd6:	b015      	add	sp, #84	@ 0x54
 8003cd8:	bd30      	pop	{r4, r5, pc}
          switch (regID)
 8003cda:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003cde:	d0d5      	beq.n	8003c8c <RI_GetRegisterMotor1+0x134>
 8003ce0:	d953      	bls.n	8003d8a <RI_GetRegisterMotor1+0x232>
 8003ce2:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	f000 82c4 	beq.w	8004274 <RI_GetRegisterMotor1+0x71c>
 8003cec:	f200 8164 	bhi.w	8003fb8 <RI_GetRegisterMotor1+0x460>
 8003cf0:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003cf4:	4298      	cmp	r0, r3
 8003cf6:	f000 8288 	beq.w	800420a <RI_GetRegisterMotor1+0x6b2>
 8003cfa:	f200 81f9 	bhi.w	80040f0 <RI_GetRegisterMotor1+0x598>
 8003cfe:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003d02:	4298      	cmp	r0, r3
 8003d04:	f000 82bb 	beq.w	800427e <RI_GetRegisterMotor1+0x726>
 8003d08:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003d0c:	4298      	cmp	r0, r3
 8003d0e:	f040 82aa 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8003d12:	486e      	ldr	r0, [pc, #440]	@ (8003ecc <RI_GetRegisterMotor1+0x374>)
 8003d14:	f003 fe04 	bl	8007920 <PID_GetKIDivisorPOW2>
 8003d18:	8020      	strh	r0, [r4, #0]
              break;
 8003d1a:	e7b7      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed0 <RI_GetRegisterMotor1+0x378>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003d20:	2301      	movs	r3, #1
 8003d22:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003d24:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d28:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8003d2c:	b17a      	cbz	r2, 8003d4e <RI_GetRegisterMotor1+0x1f6>
 8003d2e:	fa1f fc8c 	uxth.w	ip, ip
 8003d32:	e008      	b.n	8003d46 <RI_GetRegisterMotor1+0x1ee>
    *tempdestString = *tempsrcString;
 8003d34:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003d38:	882b      	ldrh	r3, [r5, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d40:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003d44:	b11a      	cbz	r2, 8003d4e <RI_GetRegisterMotor1+0x1f6>
 8003d46:	459c      	cmp	ip, r3
 8003d48:	d8f4      	bhi.n	8003d34 <RI_GetRegisterMotor1+0x1dc>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003d4a:	2006      	movs	r0, #6
 8003d4c:	e722      	b.n	8003b94 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003d52:	2000      	movs	r0, #0
 8003d54:	e71e      	b.n	8003b94 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003d56:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed4 <RI_GetRegisterMotor1+0x37c>)
  *size= 1U ; /* /0 is the min String size */
 8003d58:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003d5a:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003d5c:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d5e:	f991 2000 	ldrsb.w	r2, [r1]
 8003d62:	2a00      	cmp	r2, #0
 8003d64:	d0f3      	beq.n	8003d4e <RI_GetRegisterMotor1+0x1f6>
 8003d66:	fa1f fc8c 	uxth.w	ip, ip
 8003d6a:	e009      	b.n	8003d80 <RI_GetRegisterMotor1+0x228>
    *tempdestString = *tempsrcString;
 8003d6c:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003d70:	882b      	ldrh	r3, [r5, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d78:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003d7c:	2a00      	cmp	r2, #0
 8003d7e:	d0e6      	beq.n	8003d4e <RI_GetRegisterMotor1+0x1f6>
 8003d80:	459c      	cmp	ip, r3
 8003d82:	d8f3      	bhi.n	8003d6c <RI_GetRegisterMotor1+0x214>
 8003d84:	e7e1      	b.n	8003d4a <RI_GetRegisterMotor1+0x1f2>
          switch (regID)
 8003d86:	2005      	movs	r0, #5
 8003d88:	e735      	b.n	8003bf6 <RI_GetRegisterMotor1+0x9e>
          switch (regID)
 8003d8a:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8003d8e:	f000 827b 	beq.w	8004288 <RI_GetRegisterMotor1+0x730>
 8003d92:	f200 813a 	bhi.w	800400a <RI_GetRegisterMotor1+0x4b2>
 8003d96:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003d9a:	f000 824c 	beq.w	8004236 <RI_GetRegisterMotor1+0x6de>
 8003d9e:	f200 81b6 	bhi.w	800410e <RI_GetRegisterMotor1+0x5b6>
 8003da2:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003da6:	f000 8283 	beq.w	80042b0 <RI_GetRegisterMotor1+0x758>
 8003daa:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003dae:	f040 825a 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003db2:	4845      	ldr	r0, [pc, #276]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003db4:	f7fd fc6c 	bl	8001690 <MCI_GetVqd>
 8003db8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003dbc:	8023      	strh	r3, [r4, #0]
              break;
 8003dbe:	e765      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003dc0:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8003dc4:	f000 828a 	beq.w	80042dc <RI_GetRegisterMotor1+0x784>
 8003dc8:	f200 8134 	bhi.w	8004034 <RI_GetRegisterMotor1+0x4dc>
 8003dcc:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8003dd0:	f000 823b 	beq.w	800424a <RI_GetRegisterMotor1+0x6f2>
 8003dd4:	f200 81b5 	bhi.w	8004142 <RI_GetRegisterMotor1+0x5ea>
 8003dd8:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003ddc:	f000 826d 	beq.w	80042ba <RI_GetRegisterMotor1+0x762>
 8003de0:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003de4:	f040 823f 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003de8:	483b      	ldr	r0, [pc, #236]	@ (8003ed8 <RI_GetRegisterMotor1+0x380>)
 8003dea:	f003 fbc5 	bl	8007578 <VBS_GetAvBusVoltage_V>
 8003dee:	8020      	strh	r0, [r4, #0]
              break;
 8003df0:	e74c      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
        switch (regID)
 8003df2:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8003df6:	f040 808d 	bne.w	8003f14 <RI_GetRegisterMotor1+0x3bc>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003dfa:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8003dfe:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003e00:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003e04:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003e06:	f240 812b 	bls.w	8004060 <RI_GetRegisterMotor1+0x508>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003e0a:	4a34      	ldr	r2, [pc, #208]	@ (8003edc <RI_GetRegisterMotor1+0x384>)
 8003e0c:	6850      	ldr	r0, [r2, #4]
 8003e0e:	6814      	ldr	r4, [r2, #0]
 8003e10:	6891      	ldr	r1, [r2, #8]
 8003e12:	68d2      	ldr	r2, [r2, #12]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	6058      	str	r0, [r3, #4]
 8003e18:	601c      	str	r4, [r3, #0]
 8003e1a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003e1c:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003e1e:	230e      	movs	r3, #14
 8003e20:	e758      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003e22:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003e26:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003e28:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003e2c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003e2e:	f240 8114 	bls.w	800405a <RI_GetRegisterMotor1+0x502>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003e32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <RI_GetRegisterMotor1+0x388>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e34:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003e38:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003e3c:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 8003e3e:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003e44:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e46:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003e48:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 8003e4c:	f8c4 2002 	str.w	r2, [r4, #2]
 8003e50:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003e54:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8003e56:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003e5c:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e5e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003e60:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 8003e64:	f8c4 200a 	str.w	r2, [r4, #10]
 8003e68:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003e6c:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 8003e6e:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003e74:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e76:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003e78:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 8003e7c:	f8c4 2012 	str.w	r2, [r4, #18]
 8003e80:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003e84:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8003e86:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003e8c:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003e8e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003e90:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 8003e94:	f8c4 201a 	str.w	r2, [r4, #26]
 8003e98:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003e9c:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8003e9e:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003ea0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003ea4:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003ea6:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003ea8:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8003eac:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8003eae:	2000      	movs	r0, #0
 8003eb0:	e710      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003eb2:	4805      	ldr	r0, [pc, #20]	@ (8003ec8 <RI_GetRegisterMotor1+0x370>)
 8003eb4:	f7fd fbbc 	bl	8001630 <MCI_GetAvrgMecSpeedUnit>
 8003eb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003ebc:	0040      	lsls	r0, r0, #1
 8003ebe:	6020      	str	r0, [r4, #0]
              break;
 8003ec0:	e6b2      	b.n	8003c28 <RI_GetRegisterMotor1+0xd0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ec2:	4608      	mov	r0, r1
 8003ec4:	e666      	b.n	8003b94 <RI_GetRegisterMotor1+0x3c>
 8003ec6:	bf00      	nop
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	20000338 	.word	0x20000338
 8003ed0:	200003fc 	.word	0x200003fc
 8003ed4:	20000404 	.word	0x20000404
 8003ed8:	20000374 	.word	0x20000374
 8003edc:	20000408 	.word	0x20000408
 8003ee0:	20000230 	.word	0x20000230
          switch (regID)
 8003ee4:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003ee8:	d052      	beq.n	8003f90 <RI_GetRegisterMotor1+0x438>
 8003eea:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003eee:	4298      	cmp	r0, r3
 8003ef0:	d158      	bne.n	8003fa4 <RI_GetRegisterMotor1+0x44c>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003ef2:	4bb8      	ldr	r3, [pc, #736]	@ (80041d4 <RI_GetRegisterMotor1+0x67c>)
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	f003 fd97 	bl	8007a28 <PQD_GetAvrgElMotorPowerW>
 8003efa:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003efe:	9b01      	ldr	r3, [sp, #4]
 8003f00:	6023      	str	r3, [r4, #0]
              break;
 8003f02:	e691      	b.n	8003c28 <RI_GetRegisterMotor1+0xd0>
  return ((uint8_t)pHandle->bPhaseNbr);
 8003f04:	4bb4      	ldr	r3, [pc, #720]	@ (80041d8 <RI_GetRegisterMotor1+0x680>)
 8003f06:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 8003f0a:	e672      	b.n	8003bf2 <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003f0c:	48b3      	ldr	r0, [pc, #716]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8003f0e:	f7fd fb5b 	bl	80015c8 <MCI_GetControlMode>
              break;
 8003f12:	e66e      	b.n	8003bf2 <RI_GetRegisterMotor1+0x9a>
        *size = (*rawSize) + 2U;
 8003f14:	8823      	ldrh	r3, [r4, #0]
 8003f16:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003f18:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	e6da      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
            *rawSize = 4;
 8003f1e:	2304      	movs	r3, #4
 8003f20:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003f22:	48ae      	ldr	r0, [pc, #696]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8003f24:	f7fd fbaa 	bl	800167c <MCI_GetIqdref>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f2c:	48ab      	ldr	r0, [pc, #684]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003f2e:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f30:	f7fd fba4 	bl	800167c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8003f34:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f36:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8003f3a:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003f3c:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8003f3e:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003f40:	2000      	movs	r0, #0
            break;
 8003f42:	e6c7      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003f44:	48a5      	ldr	r0, [pc, #660]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8003f46:	f7fd fb63 	bl	8001610 <MCI_GetLastRampFinalSpeed>
 8003f4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003f4e:	0043      	lsls	r3, r0, #1
 8003f50:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003f54:	48a1      	ldr	r0, [pc, #644]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8003f56:	f7fd fb63 	bl	8001620 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003f5a:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003f5c:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003f5e:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003f60:	2000      	movs	r0, #0
            break;
 8003f62:	2308      	movs	r3, #8
 8003f64:	e6b6      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f66:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003f6a:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f6c:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003f70:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f72:	f200 8092 	bhi.w	800409a <RI_GetRegisterMotor1+0x542>
 8003f76:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003f78:	2008      	movs	r0, #8
 8003f7a:	e6ab      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f7c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003f80:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f82:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003f86:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003f88:	d86d      	bhi.n	8004066 <RI_GetRegisterMotor1+0x50e>
 8003f8a:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003f8c:	2008      	movs	r0, #8
 8003f8e:	e6a1      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8003f90:	4b93      	ldr	r3, [pc, #588]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8003f92:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8003f96:	6023      	str	r3, [r4, #0]
              break;
 8003f98:	e646      	b.n	8003c28 <RI_GetRegisterMotor1+0xd0>
  return (pHandle->Est_Bemf_Level);
 8003f9a:	4b91      	ldr	r3, [pc, #580]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8003f9c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8003fa0:	6023      	str	r3, [r4, #0]
              break;
 8003fa2:	e641      	b.n	8003c28 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 8003fa4:	2005      	movs	r0, #5
 8003fa6:	e640      	b.n	8003c2a <RI_GetRegisterMotor1+0xd2>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003fa8:	488c      	ldr	r0, [pc, #560]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8003faa:	f7fd fb45 	bl	8001638 <MCI_GetMecSpeedRefUnit>
 8003fae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003fb2:	0040      	lsls	r0, r0, #1
 8003fb4:	6020      	str	r0, [r4, #0]
              break;
 8003fb6:	e637      	b.n	8003c28 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 8003fb8:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003fbc:	4298      	cmp	r0, r3
 8003fbe:	f000 80ff 	beq.w	80041c0 <RI_GetRegisterMotor1+0x668>
 8003fc2:	f200 8086 	bhi.w	80040d2 <RI_GetRegisterMotor1+0x57a>
 8003fc6:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003fca:	4298      	cmp	r0, r3
 8003fcc:	f000 8118 	beq.w	8004200 <RI_GetRegisterMotor1+0x6a8>
 8003fd0:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003fd4:	4298      	cmp	r0, r3
 8003fd6:	f040 8146 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8003fda:	4882      	ldr	r0, [pc, #520]	@ (80041e4 <RI_GetRegisterMotor1+0x68c>)
 8003fdc:	f003 fca0 	bl	8007920 <PID_GetKIDivisorPOW2>
 8003fe0:	8020      	strh	r0, [r4, #0]
              break;
 8003fe2:	e653      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003fe4:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003fe8:	f000 8158 	beq.w	800429c <RI_GetRegisterMotor1+0x744>
 8003fec:	f200 80b8 	bhi.w	8004160 <RI_GetRegisterMotor1+0x608>
 8003ff0:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003ff4:	f000 814d 	beq.w	8004292 <RI_GetRegisterMotor1+0x73a>
 8003ff8:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003ffc:	f040 8133 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8004000:	4879      	ldr	r0, [pc, #484]	@ (80041e8 <RI_GetRegisterMotor1+0x690>)
 8004002:	f003 fc7f 	bl	8007904 <PID_GetKI>
 8004006:	8020      	strh	r0, [r4, #0]
              break;
 8004008:	e640      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 800400a:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 800400e:	f000 816f 	beq.w	80042f0 <RI_GetRegisterMotor1+0x798>
 8004012:	f200 80b5 	bhi.w	8004180 <RI_GetRegisterMotor1+0x628>
 8004016:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 800401a:	f000 8164 	beq.w	80042e6 <RI_GetRegisterMotor1+0x78e>
 800401e:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8004022:	f040 8120 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8004026:	486e      	ldr	r0, [pc, #440]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8004028:	f005 f8ce 	bl	80091c8 <STO_PLL_GetEstimatedCurrent>
 800402c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004030:	8023      	strh	r3, [r4, #0]
              break;
 8004032:	e62b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004034:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8004038:	f000 80b4 	beq.w	80041a4 <RI_GetRegisterMotor1+0x64c>
 800403c:	f200 80aa 	bhi.w	8004194 <RI_GetRegisterMotor1+0x63c>
 8004040:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8004044:	f000 80b5 	beq.w	80041b2 <RI_GetRegisterMotor1+0x65a>
 8004048:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 800404c:	f040 810b 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8004050:	4862      	ldr	r0, [pc, #392]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8004052:	f7fd fb09 	bl	8001668 <MCI_GetIqd>
 8004056:	8020      	strh	r0, [r4, #0]
              break;
 8004058:	e618      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
 800405a:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800405c:	2008      	movs	r0, #8
 800405e:	e639      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
 8004060:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004062:	2008      	movs	r0, #8
 8004064:	e636      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8004066:	4a61      	ldr	r2, [pc, #388]	@ (80041ec <RI_GetRegisterMotor1+0x694>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	6810      	ldr	r0, [r2, #0]
 800406c:	6851      	ldr	r1, [r2, #4]
 800406e:	6894      	ldr	r4, [r2, #8]
 8004070:	609c      	str	r4, [r3, #8]
 8004072:	6018      	str	r0, [r3, #0]
 8004074:	6059      	str	r1, [r3, #4]
 8004076:	8992      	ldrh	r2, [r2, #12]
 8004078:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 800407a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800407c:	2310      	movs	r3, #16
 800407e:	e629      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8004080:	4a5b      	ldr	r2, [pc, #364]	@ (80041f0 <RI_GetRegisterMotor1+0x698>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	6850      	ldr	r0, [r2, #4]
 8004086:	6814      	ldr	r4, [r2, #0]
 8004088:	6891      	ldr	r1, [r2, #8]
 800408a:	68d2      	ldr	r2, [r2, #12]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	6058      	str	r0, [r3, #4]
 8004090:	601c      	str	r4, [r3, #0]
 8004092:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8004094:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8004096:	2312      	movs	r3, #18
 8004098:	e61c      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800409a:	4a56      	ldr	r2, [pc, #344]	@ (80041f4 <RI_GetRegisterMotor1+0x69c>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 80040a2:	6814      	ldr	r4, [r2, #0]
 80040a4:	6850      	ldr	r0, [r2, #4]
 80040a6:	6891      	ldr	r1, [r2, #8]
 80040a8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80040ac:	f8c3 c00c 	str.w	ip, [r3, #12]
 80040b0:	3210      	adds	r2, #16
 80040b2:	4572      	cmp	r2, lr
 80040b4:	601c      	str	r4, [r3, #0]
 80040b6:	6058      	str	r0, [r3, #4]
 80040b8:	6099      	str	r1, [r3, #8]
 80040ba:	f103 0310 	add.w	r3, r3, #16
 80040be:	d1f0      	bne.n	80040a2 <RI_GetRegisterMotor1+0x54a>
 80040c0:	6810      	ldr	r0, [r2, #0]
 80040c2:	6851      	ldr	r1, [r2, #4]
 80040c4:	6892      	ldr	r2, [r2, #8]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	6018      	str	r0, [r3, #0]
 80040ca:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 80040cc:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80040ce:	233e      	movs	r3, #62	@ 0x3e
 80040d0:	e600      	b.n	8003cd4 <RI_GetRegisterMotor1+0x17c>
          switch (regID)
 80040d2:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 80040d6:	4298      	cmp	r0, r3
 80040d8:	f000 809c 	beq.w	8004214 <RI_GetRegisterMotor1+0x6bc>
 80040dc:	f641 1310 	movw	r3, #6416	@ 0x1910
 80040e0:	4298      	cmp	r0, r3
 80040e2:	f040 80c0 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80040e6:	4844      	ldr	r0, [pc, #272]	@ (80041f8 <RI_GetRegisterMotor1+0x6a0>)
 80040e8:	f003 fc12 	bl	8007910 <PID_GetKPDivisorPOW2>
 80040ec:	8020      	strh	r0, [r4, #0]
              break;
 80040ee:	e5cd      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80040f0:	f241 5310 	movw	r3, #5392	@ 0x1510
 80040f4:	4298      	cmp	r0, r3
 80040f6:	f000 80a3 	beq.w	8004240 <RI_GetRegisterMotor1+0x6e8>
 80040fa:	f241 5350 	movw	r3, #5456	@ 0x1550
 80040fe:	4298      	cmp	r0, r3
 8004100:	f040 80b1 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8004104:	4838      	ldr	r0, [pc, #224]	@ (80041e8 <RI_GetRegisterMotor1+0x690>)
 8004106:	f003 fc0b 	bl	8007920 <PID_GetKIDivisorPOW2>
 800410a:	8020      	strh	r0, [r4, #0]
              break;
 800410c:	e5be      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 800410e:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8004112:	f000 8089 	beq.w	8004228 <RI_GetRegisterMotor1+0x6d0>
 8004116:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 800411a:	f040 80a4 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
 800411e:	4b30      	ldr	r3, [pc, #192]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8004120:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8004124:	8023      	strh	r3, [r4, #0]
              break;
 8004126:	e5b1      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004128:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 800412c:	f000 8092 	beq.w	8004254 <RI_GetRegisterMotor1+0x6fc>
 8004130:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8004134:	f040 8097 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8004138:	482a      	ldr	r0, [pc, #168]	@ (80041e4 <RI_GetRegisterMotor1+0x68c>)
 800413a:	f003 fbe3 	bl	8007904 <PID_GetKI>
 800413e:	8020      	strh	r0, [r4, #0]
              break;
 8004140:	e5a4      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004142:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8004146:	f000 80ae 	beq.w	80042a6 <RI_GetRegisterMotor1+0x74e>
 800414a:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 800414e:	f040 808a 	bne.w	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8004152:	4822      	ldr	r0, [pc, #136]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 8004154:	f7fd fa74 	bl	8001640 <MCI_GetIab>
 8004158:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800415c:	8023      	strh	r3, [r4, #0]
              break;
 800415e:	e595      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004160:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8004164:	f000 80c9 	beq.w	80042fa <RI_GetRegisterMotor1+0x7a2>
 8004168:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 800416c:	d17b      	bne.n	8004266 <RI_GetRegisterMotor1+0x70e>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 800416e:	481c      	ldr	r0, [pc, #112]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8004170:	aa13      	add	r2, sp, #76	@ 0x4c
 8004172:	a912      	add	r1, sp, #72	@ 0x48
 8004174:	f005 f83a 	bl	80091ec <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8004178:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800417c:	8023      	strh	r3, [r4, #0]
              break;
 800417e:	e585      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004180:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8004184:	d16b      	bne.n	800425e <RI_GetRegisterMotor1+0x706>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8004186:	4816      	ldr	r0, [pc, #88]	@ (80041e0 <RI_GetRegisterMotor1+0x688>)
 8004188:	f005 f81a 	bl	80091c0 <STO_PLL_GetEstimatedBemf>
 800418c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004190:	8023      	strh	r3, [r4, #0]
              break;
 8004192:	e57b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004194:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8004198:	d165      	bne.n	8004266 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800419a:	4810      	ldr	r0, [pc, #64]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 800419c:	f7fd fa6e 	bl	800167c <MCI_GetIqdref>
 80041a0:	8020      	strh	r0, [r4, #0]
              break;
 80041a2:	e573      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 80041a4:	480d      	ldr	r0, [pc, #52]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 80041a6:	f7fd fa5f 	bl	8001668 <MCI_GetIqd>
 80041aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80041ae:	8023      	strh	r3, [r4, #0]
              break;
 80041b0:	e56c      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80041b2:	480a      	ldr	r0, [pc, #40]	@ (80041dc <RI_GetRegisterMotor1+0x684>)
 80041b4:	f7fd fa4e 	bl	8001654 <MCI_GetIalphabeta>
 80041b8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80041bc:	8023      	strh	r3, [r4, #0]
              break;
 80041be:	e565      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80041c0:	4808      	ldr	r0, [pc, #32]	@ (80041e4 <RI_GetRegisterMotor1+0x68c>)
 80041c2:	f003 fbcd 	bl	8007960 <PID_GetKDDivisorPOW2>
 80041c6:	8020      	strh	r0, [r4, #0]
              break;
 80041c8:	e560      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80041ca:	480c      	ldr	r0, [pc, #48]	@ (80041fc <RI_GetRegisterMotor1+0x6a4>)
 80041cc:	f003 fbc4 	bl	8007958 <PID_GetKD>
 80041d0:	8020      	strh	r0, [r4, #0]
              break;
 80041d2:	e55b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
 80041d4:	20000028 	.word	0x20000028
 80041d8:	20000230 	.word	0x20000230
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000068 	.word	0x20000068
 80041e4:	2000030c 	.word	0x2000030c
 80041e8:	200002e0 	.word	0x200002e0
 80041ec:	20000400 	.word	0x20000400
 80041f0:	200003f8 	.word	0x200003f8
 80041f4:	200003fc 	.word	0x200003fc
 80041f8:	2000009c 	.word	0x2000009c
 80041fc:	20000338 	.word	0x20000338
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8004200:	4842      	ldr	r0, [pc, #264]	@ (800430c <RI_GetRegisterMotor1+0x7b4>)
 8004202:	f003 fb85 	bl	8007910 <PID_GetKPDivisorPOW2>
 8004206:	8020      	strh	r0, [r4, #0]
              break;
 8004208:	e540      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 800420a:	4841      	ldr	r0, [pc, #260]	@ (8004310 <RI_GetRegisterMotor1+0x7b8>)
 800420c:	f003 fba8 	bl	8007960 <PID_GetKDDivisorPOW2>
 8004210:	8020      	strh	r0, [r4, #0]
              break;
 8004212:	e53b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8004214:	483f      	ldr	r0, [pc, #252]	@ (8004314 <RI_GetRegisterMotor1+0x7bc>)
 8004216:	f003 fb83 	bl	8007920 <PID_GetKIDivisorPOW2>
 800421a:	8020      	strh	r0, [r4, #0]
              break;
 800421c:	e536      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 800421e:	483c      	ldr	r0, [pc, #240]	@ (8004310 <RI_GetRegisterMotor1+0x7b8>)
 8004220:	f003 fb6c 	bl	80078fc <PID_GetKP>
 8004224:	8020      	strh	r0, [r4, #0]
              break;
 8004226:	e531      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004228:	483b      	ldr	r0, [pc, #236]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 800422a:	f7fd fa3b 	bl	80016a4 <MCI_GetValphabeta>
 800422e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004232:	8023      	strh	r3, [r4, #0]
              break;
 8004234:	e52a      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004236:	4838      	ldr	r0, [pc, #224]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 8004238:	f7fd fa34 	bl	80016a4 <MCI_GetValphabeta>
 800423c:	8020      	strh	r0, [r4, #0]
              break;
 800423e:	e525      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8004240:	4836      	ldr	r0, [pc, #216]	@ (800431c <RI_GetRegisterMotor1+0x7c4>)
 8004242:	f003 fb65 	bl	8007910 <PID_GetKPDivisorPOW2>
 8004246:	8020      	strh	r0, [r4, #0]
              break;
 8004248:	e520      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 800424a:	4835      	ldr	r0, [pc, #212]	@ (8004320 <RI_GetRegisterMotor1+0x7c8>)
 800424c:	f003 fb38 	bl	80078c0 <NTC_GetAvTemp_C>
 8004250:	8020      	strh	r0, [r4, #0]
              break;
 8004252:	e51b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8004254:	482d      	ldr	r0, [pc, #180]	@ (800430c <RI_GetRegisterMotor1+0x7b4>)
 8004256:	f003 fb51 	bl	80078fc <PID_GetKP>
 800425a:	8020      	strh	r0, [r4, #0]
              break;
 800425c:	e516      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
          switch (regID)
 800425e:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004262:	f43f ad13 	beq.w	8003c8c <RI_GetRegisterMotor1+0x134>
 8004266:	2005      	movs	r0, #5
 8004268:	e511      	b.n	8003c8e <RI_GetRegisterMotor1+0x136>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 800426a:	4828      	ldr	r0, [pc, #160]	@ (800430c <RI_GetRegisterMotor1+0x7b4>)
 800426c:	f003 fb74 	bl	8007958 <PID_GetKD>
 8004270:	8020      	strh	r0, [r4, #0]
              break;
 8004272:	e50b      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8004274:	4829      	ldr	r0, [pc, #164]	@ (800431c <RI_GetRegisterMotor1+0x7c4>)
 8004276:	f003 fb73 	bl	8007960 <PID_GetKDDivisorPOW2>
 800427a:	8020      	strh	r0, [r4, #0]
              break;
 800427c:	e506      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 800427e:	4824      	ldr	r0, [pc, #144]	@ (8004310 <RI_GetRegisterMotor1+0x7b8>)
 8004280:	f003 fb46 	bl	8007910 <PID_GetKPDivisorPOW2>
 8004284:	8020      	strh	r0, [r4, #0]
              break;
 8004286:	e501      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8004288:	4826      	ldr	r0, [pc, #152]	@ (8004324 <RI_GetRegisterMotor1+0x7cc>)
 800428a:	f004 fd05 	bl	8008c98 <SPD_GetS16Speed>
 800428e:	8020      	strh	r0, [r4, #0]
              break;
 8004290:	e4fc      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8004292:	4822      	ldr	r0, [pc, #136]	@ (800431c <RI_GetRegisterMotor1+0x7c4>)
 8004294:	f003 fb32 	bl	80078fc <PID_GetKP>
 8004298:	8020      	strh	r0, [r4, #0]
              break;
 800429a:	e4f7      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 800429c:	481f      	ldr	r0, [pc, #124]	@ (800431c <RI_GetRegisterMotor1+0x7c4>)
 800429e:	f003 fb5b 	bl	8007958 <PID_GetKD>
 80042a2:	8020      	strh	r0, [r4, #0]
              break;
 80042a4:	e4f2      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80042a6:	481c      	ldr	r0, [pc, #112]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 80042a8:	f7fd f9ca 	bl	8001640 <MCI_GetIab>
 80042ac:	8020      	strh	r0, [r4, #0]
              break;
 80042ae:	e4ed      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80042b0:	4819      	ldr	r0, [pc, #100]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 80042b2:	f7fd f9ed 	bl	8001690 <MCI_GetVqd>
 80042b6:	8020      	strh	r0, [r4, #0]
              break;
 80042b8:	e4e8      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 80042ba:	4816      	ldr	r0, [pc, #88]	@ (8004314 <RI_GetRegisterMotor1+0x7bc>)
 80042bc:	f003 fb1e 	bl	80078fc <PID_GetKP>
 80042c0:	8020      	strh	r0, [r4, #0]
              break;
 80042c2:	e4e3      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 80042c4:	4813      	ldr	r0, [pc, #76]	@ (8004314 <RI_GetRegisterMotor1+0x7bc>)
 80042c6:	f003 fb1d 	bl	8007904 <PID_GetKI>
 80042ca:	8020      	strh	r0, [r4, #0]
              break;
 80042cc:	e4de      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80042ce:	4812      	ldr	r0, [pc, #72]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 80042d0:	f7fd f9d4 	bl	800167c <MCI_GetIqdref>
 80042d4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80042d8:	8023      	strh	r3, [r4, #0]
              break;
 80042da:	e4d7      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80042dc:	480e      	ldr	r0, [pc, #56]	@ (8004318 <RI_GetRegisterMotor1+0x7c0>)
 80042de:	f7fd f9b9 	bl	8001654 <MCI_GetIalphabeta>
 80042e2:	8020      	strh	r0, [r4, #0]
              break;
 80042e4:	e4d2      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 80042e6:	480f      	ldr	r0, [pc, #60]	@ (8004324 <RI_GetRegisterMotor1+0x7cc>)
 80042e8:	f004 ff6e 	bl	80091c8 <STO_PLL_GetEstimatedCurrent>
 80042ec:	8020      	strh	r0, [r4, #0]
              break;
 80042ee:	e4cd      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 80042f0:	480c      	ldr	r0, [pc, #48]	@ (8004324 <RI_GetRegisterMotor1+0x7cc>)
 80042f2:	f004 ff65 	bl	80091c0 <STO_PLL_GetEstimatedBemf>
 80042f6:	8020      	strh	r0, [r4, #0]
              break;
 80042f8:	e4c8      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80042fa:	480a      	ldr	r0, [pc, #40]	@ (8004324 <RI_GetRegisterMotor1+0x7cc>)
 80042fc:	aa13      	add	r2, sp, #76	@ 0x4c
 80042fe:	a912      	add	r1, sp, #72	@ 0x48
 8004300:	f004 ff74 	bl	80091ec <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8004304:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004308:	8023      	strh	r3, [r4, #0]
              break;
 800430a:	e4bf      	b.n	8003c8c <RI_GetRegisterMotor1+0x134>
 800430c:	2000030c 	.word	0x2000030c
 8004310:	20000338 	.word	0x20000338
 8004314:	2000009c 	.word	0x2000009c
 8004318:	20000000 	.word	0x20000000
 800431c:	200002e0 	.word	0x200002e0
 8004320:	20000398 	.word	0x20000398
 8004324:	20000068 	.word	0x20000068

08004328 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8004328:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 800432a:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 800432c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004334:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	e841 3400 	strex	r4, r3, [r1]
 800433c:	2c00      	cmp	r4, #0
 800433e:	d1f7      	bne.n	8004330 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004340:	68c1      	ldr	r1, [r0, #12]
 8004342:	4d19      	ldr	r5, [pc, #100]	@ (80043a8 <UASPEP_INIT+0x80>)
 8004344:	6843      	ldr	r3, [r0, #4]
 8004346:	5c6c      	ldrb	r4, [r5, r1]
 8004348:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 800434a:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 800434e:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004350:	2340      	movs	r3, #64	@ 0x40
 8004352:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8004354:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800435c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	e841 3400 	strex	r4, r3, [r1]
 8004364:	2c00      	cmp	r4, #0
 8004366:	d1f7      	bne.n	8004358 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004368:	2340      	movs	r3, #64	@ 0x40
 800436a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	e842 3100 	strex	r1, r3, [r2]
 8004378:	2900      	cmp	r1, #0
 800437a:	d1f7      	bne.n	800436c <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 800437c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	e841 3400 	strex	r4, r3, [r1]
 800438c:	2c00      	cmp	r4, #0
 800438e:	d1f7      	bne.n	8004380 <UASPEP_INIT+0x58>
 8004390:	6901      	ldr	r1, [r0, #16]
 8004392:	6883      	ldr	r3, [r0, #8]
 8004394:	5c69      	ldrb	r1, [r5, r1]
 8004396:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8004398:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800439c:	2140      	movs	r1, #64	@ 0x40
 800439e:	6098      	str	r0, [r3, #8]
}
 80043a0:	bc30      	pop	{r4, r5}
 80043a2:	6211      	str	r1, [r2, #32]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	08009798 	.word	0x08009798

080043ac <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80043ac:	6903      	ldr	r3, [r0, #16]
 80043ae:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 80043b0:	b410      	push	{r4}
 80043b2:	4c0b      	ldr	r4, [pc, #44]	@ (80043e0 <UASPEP_CFG_TRANSMISSION+0x34>)
 80043b4:	5ce3      	ldrb	r3, [r4, r3]
 80043b6:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80043b8:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80043ba:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80043be:	d40c      	bmi.n	80043da <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80043c0:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80043c4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80043c8:	f36f 010f 	bfc	r1, #0, #16
 80043cc:	430a      	orrs	r2, r1
 80043ce:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80043d2:	58c2      	ldr	r2, [r0, r3]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 80043da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	08009798 	.word	0x08009798

080043e4 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 80043e4:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80043e6:	68c3      	ldr	r3, [r0, #12]
 80043e8:	4c0c      	ldr	r4, [pc, #48]	@ (800441c <UASPEP_CFG_RECEPTION+0x38>)
 80043ea:	6840      	ldr	r0, [r0, #4]
 80043ec:	5ce3      	ldrb	r3, [r4, r3]
 80043ee:	58c4      	ldr	r4, [r0, r3]
 80043f0:	eb00 0c03 	add.w	ip, r0, r3
 80043f4:	f024 0401 	bic.w	r4, r4, #1
 80043f8:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80043fa:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80043fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8004402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004406:	f36f 010f 	bfc	r1, #0, #16
 800440a:	4311      	orrs	r1, r2
 800440c:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004410:	58c2      	ldr	r2, [r0, r3]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	50c2      	str	r2, [r0, r3]
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	08009798 	.word	0x08009798

08004420 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004420:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004422:	2310      	movs	r3, #16
 8004424:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800442a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	e842 3100 	strex	r1, r3, [r2]
 8004432:	2900      	cmp	r1, #0
 8004434:	d1f7      	bne.n	8004426 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8004436:	4770      	bx	lr

08004438 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004438:	4a03      	ldr	r2, [pc, #12]	@ (8004448 <SystemInit+0x10>)
 800443a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800443e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004442:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004446:	4770      	bx	lr
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800444c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800444e:	4b0f      	ldr	r3, [pc, #60]	@ (800448c <HAL_InitTick+0x40>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b90b      	cbnz	r3, 8004458 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8004454:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8004456:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004458:	490d      	ldr	r1, [pc, #52]	@ (8004490 <HAL_InitTick+0x44>)
 800445a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800445e:	4605      	mov	r5, r0
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	fbb0 f0f3 	udiv	r0, r0, r3
 800446a:	f001 f82d 	bl	80054c8 <HAL_SYSTICK_Config>
 800446e:	4604      	mov	r4, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	d1ef      	bne.n	8004454 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004474:	2d0f      	cmp	r5, #15
 8004476:	d8ed      	bhi.n	8004454 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004478:	4602      	mov	r2, r0
 800447a:	4629      	mov	r1, r5
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	f000 ffc6 	bl	8005410 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <HAL_InitTick+0x48>)
 8004486:	4620      	mov	r0, r4
 8004488:	601d      	str	r5, [r3, #0]
}
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	200004e4 	.word	0x200004e4
 8004490:	200004e0 	.word	0x200004e0
 8004494:	200004e8 	.word	0x200004e8

08004498 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004498:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <HAL_Init+0x2c>)
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 80044a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a6:	f000 ffa1 	bl	80053ec <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044aa:	2004      	movs	r0, #4
 80044ac:	f7ff ffce 	bl	800444c <HAL_InitTick>
 80044b0:	b110      	cbz	r0, 80044b8 <HAL_Init+0x20>
    status = HAL_ERROR;
 80044b2:	2401      	movs	r4, #1
}
 80044b4:	4620      	mov	r0, r4
 80044b6:	bd10      	pop	{r4, pc}
 80044b8:	4604      	mov	r4, r0
    HAL_MspInit();
 80044ba:	f7fe fc51 	bl	8002d60 <HAL_MspInit>
}
 80044be:	4620      	mov	r0, r4
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	40022000 	.word	0x40022000

080044c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044c8:	4a03      	ldr	r2, [pc, #12]	@ (80044d8 <HAL_IncTick+0x10>)
 80044ca:	4904      	ldr	r1, [pc, #16]	@ (80044dc <HAL_IncTick+0x14>)
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	6809      	ldr	r1, [r1, #0]
 80044d0:	440b      	add	r3, r1
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20001bbc 	.word	0x20001bbc
 80044dc:	200004e4 	.word	0x200004e4

080044e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044e0:	4b01      	ldr	r3, [pc, #4]	@ (80044e8 <HAL_GetTick+0x8>)
 80044e2:	6818      	ldr	r0, [r3, #0]
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20001bbc 	.word	0x20001bbc

080044ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044ec:	b530      	push	{r4, r5, lr}
 80044ee:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80044f4:	2800      	cmp	r0, #0
 80044f6:	f000 80aa 	beq.w	800464e <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044fa:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 80044fc:	4604      	mov	r4, r0
 80044fe:	2d00      	cmp	r5, #0
 8004500:	f000 80aa 	beq.w	8004658 <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004504:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004506:	6893      	ldr	r3, [r2, #8]
 8004508:	009d      	lsls	r5, r3, #2
 800450a:	d505      	bpl.n	8004518 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800450c:	6893      	ldr	r3, [r2, #8]
 800450e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004512:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004516:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004518:	6893      	ldr	r3, [r2, #8]
 800451a:	00d8      	lsls	r0, r3, #3
 800451c:	d419      	bmi.n	8004552 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800451e:	4b68      	ldr	r3, [pc, #416]	@ (80046c0 <HAL_ADC_Init+0x1d4>)
 8004520:	4868      	ldr	r0, [pc, #416]	@ (80046c4 <HAL_ADC_Init+0x1d8>)
 8004522:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004524:	6891      	ldr	r1, [r2, #8]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	fba0 0303 	umull	r0, r3, r0, r3
 800452c:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800453e:	6091      	str	r1, [r2, #8]
 8004540:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004542:	9b01      	ldr	r3, [sp, #4]
 8004544:	b12b      	cbz	r3, 8004552 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8004546:	9b01      	ldr	r3, [sp, #4]
 8004548:	3b01      	subs	r3, #1
 800454a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800454c:	9b01      	ldr	r3, [sp, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f9      	bne.n	8004546 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004552:	6893      	ldr	r3, [r2, #8]
 8004554:	00d9      	lsls	r1, r3, #3
 8004556:	d47d      	bmi.n	8004654 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004558:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800455a:	f043 0310 	orr.w	r3, r3, #16
 800455e:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004560:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004562:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004564:	4303      	orrs	r3, r0
 8004566:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004568:	6893      	ldr	r3, [r2, #8]
 800456a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800456e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004570:	d169      	bne.n	8004646 <HAL_ADC_Init+0x15a>
 8004572:	06db      	lsls	r3, r3, #27
 8004574:	d467      	bmi.n	8004646 <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004576:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004578:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004582:	6893      	ldr	r3, [r2, #8]
 8004584:	07dd      	lsls	r5, r3, #31
 8004586:	d409      	bmi.n	800459c <HAL_ADC_Init+0xb0>
 8004588:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f013 0f01 	tst.w	r3, #1
 8004592:	4b4d      	ldr	r3, [pc, #308]	@ (80046c8 <HAL_ADC_Init+0x1dc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	d101      	bne.n	800459c <HAL_ADC_Init+0xb0>
 8004598:	07d9      	lsls	r1, r3, #31
 800459a:	d57a      	bpl.n	8004692 <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 800459c:	68e5      	ldr	r5, [r4, #12]
 800459e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a0:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 80045a4:	432b      	orrs	r3, r5
 80045a6:	68a5      	ldr	r5, [r4, #8]
 80045a8:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045aa:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045ac:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80045ae:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b6:	d055      	beq.n	8004664 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80045ba:	b121      	cbz	r1, 80045c6 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 80045bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045be:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80045c2:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045c4:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80045c6:	68d5      	ldr	r5, [r2, #12]
 80045c8:	4940      	ldr	r1, [pc, #256]	@ (80046cc <HAL_ADC_Init+0x1e0>)
 80045ca:	4029      	ands	r1, r5
 80045cc:	4319      	orrs	r1, r3
 80045ce:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80045d0:	6913      	ldr	r3, [r2, #16]
 80045d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045d4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80045d8:	430b      	orrs	r3, r1
 80045da:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045dc:	6893      	ldr	r3, [r2, #8]
 80045de:	071b      	lsls	r3, r3, #28
 80045e0:	d422      	bmi.n	8004628 <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045e2:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045e4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045e8:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045ea:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045ee:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045f0:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80045f4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045f8:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 80045fa:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80045fc:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045fe:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8004600:	2900      	cmp	r1, #0
 8004602:	d03c      	beq.n	800467e <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800460a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 800460e:	f36f 030d 	bfc	r3, #0, #14
 8004612:	430b      	orrs	r3, r1
 8004614:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004618:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800461c:	2b01      	cmp	r3, #1
 800461e:	d040      	beq.n	80046a2 <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004620:	6913      	ldr	r3, [r2, #16]
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004628:	6963      	ldr	r3, [r4, #20]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d01f      	beq.n	800466e <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800462e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004630:	f023 030f 	bic.w	r3, r3, #15
 8004634:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004636:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004638:	f023 0303 	bic.w	r3, r3, #3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004642:	b003      	add	sp, #12
 8004644:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004646:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004648:	f043 0310 	orr.w	r3, r3, #16
 800464c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800464e:	2001      	movs	r0, #1
}
 8004650:	b003      	add	sp, #12
 8004652:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004654:	2000      	movs	r0, #0
 8004656:	e787      	b.n	8004568 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8004658:	f7fe fba2 	bl	8002da0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 800465e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8004662:	e74f      	b.n	8004504 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004664:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004666:	3901      	subs	r1, #1
 8004668:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800466c:	e7a4      	b.n	80045b8 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800466e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004670:	6a23      	ldr	r3, [r4, #32]
 8004672:	f021 010f 	bic.w	r1, r1, #15
 8004676:	3b01      	subs	r3, #1
 8004678:	430b      	orrs	r3, r1
 800467a:	6313      	str	r3, [r2, #48]	@ 0x30
 800467c:	e7db      	b.n	8004636 <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800467e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004682:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004684:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004688:	f36f 030d 	bfc	r3, #0, #14
 800468c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004690:	e7c2      	b.n	8004618 <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004692:	490f      	ldr	r1, [pc, #60]	@ (80046d0 <HAL_ADC_Init+0x1e4>)
 8004694:	6865      	ldr	r5, [r4, #4]
 8004696:	688b      	ldr	r3, [r1, #8]
 8004698:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 800469c:	432b      	orrs	r3, r5
 800469e:	608b      	str	r3, [r1, #8]
}
 80046a0:	e77c      	b.n	800459c <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 80046a2:	6911      	ldr	r1, [r2, #16]
 80046a4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80046a6:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80046a8:	f36f 018a 	bfc	r1, #2, #9
 80046ac:	432b      	orrs	r3, r5
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80046b2:	430b      	orrs	r3, r1
 80046b4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80046b6:	430b      	orrs	r3, r1
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6113      	str	r3, [r2, #16]
 80046be:	e7b3      	b.n	8004628 <HAL_ADC_Init+0x13c>
 80046c0:	200004e0 	.word	0x200004e0
 80046c4:	053e2d63 	.word	0x053e2d63
 80046c8:	50000100 	.word	0x50000100
 80046cc:	fff04007 	.word	0xfff04007
 80046d0:	50000300 	.word	0x50000300

080046d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046d8:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 80046dc:	b082      	sub	sp, #8
 80046de:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80046e0:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80046e8:	f000 812d 	beq.w	8004946 <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ec:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80046ee:	2001      	movs	r0, #1
 80046f0:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046f4:	6894      	ldr	r4, [r2, #8]
 80046f6:	0764      	lsls	r4, r4, #29
 80046f8:	d455      	bmi.n	80047a6 <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80046fa:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80046fc:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8004700:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004704:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8004708:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800470a:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 800470e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004712:	f854 500e 	ldr.w	r5, [r4, lr]
 8004716:	261f      	movs	r6, #31
 8004718:	fa00 f00c 	lsl.w	r0, r0, ip
 800471c:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004720:	ea25 0c0c 	bic.w	ip, r5, ip
 8004724:	ea40 000c 	orr.w	r0, r0, ip
 8004728:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800472c:	6890      	ldr	r0, [r2, #8]
 800472e:	0747      	lsls	r7, r0, #29
 8004730:	d543      	bpl.n	80047ba <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004732:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004734:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004736:	6894      	ldr	r4, [r2, #8]
 8004738:	07e5      	lsls	r5, r4, #31
 800473a:	d412      	bmi.n	8004762 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800473c:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800473e:	4cb0      	ldr	r4, [pc, #704]	@ (8004a00 <HAL_ADC_ConfigChannel+0x32c>)
 8004740:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8004744:	f006 0718 	and.w	r7, r6, #24
 8004748:	40fc      	lsrs	r4, r7
 800474a:	f3c0 0712 	ubfx	r7, r0, #0, #19
 800474e:	4004      	ands	r4, r0
 8004750:	ea25 0507 	bic.w	r5, r5, r7
 8004754:	432c      	orrs	r4, r5
 8004756:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800475a:	4caa      	ldr	r4, [pc, #680]	@ (8004a04 <HAL_ADC_ConfigChannel+0x330>)
 800475c:	42a6      	cmp	r6, r4
 800475e:	f000 80a2 	beq.w	80048a6 <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004762:	49a9      	ldr	r1, [pc, #676]	@ (8004a08 <HAL_ADC_ConfigChannel+0x334>)
 8004764:	4208      	tst	r0, r1
 8004766:	d01c      	beq.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004768:	4ca8      	ldr	r4, [pc, #672]	@ (8004a0c <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800476a:	4da9      	ldr	r5, [pc, #676]	@ (8004a10 <HAL_ADC_ConfigChannel+0x33c>)
 800476c:	68a1      	ldr	r1, [r4, #8]
 800476e:	42a8      	cmp	r0, r5
 8004770:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004774:	d074      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x18c>
 8004776:	4da7      	ldr	r5, [pc, #668]	@ (8004a14 <HAL_ADC_ConfigChannel+0x340>)
 8004778:	42a8      	cmp	r0, r5
 800477a:	d071      	beq.n	8004860 <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800477c:	4da6      	ldr	r5, [pc, #664]	@ (8004a18 <HAL_ADC_ConfigChannel+0x344>)
 800477e:	42a8      	cmp	r0, r5
 8004780:	f000 80e5 	beq.w	800494e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004784:	4da5      	ldr	r5, [pc, #660]	@ (8004a1c <HAL_ADC_ConfigChannel+0x348>)
 8004786:	42a8      	cmp	r0, r5
 8004788:	d10b      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800478a:	0249      	lsls	r1, r1, #9
 800478c:	d409      	bmi.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800478e:	49a4      	ldr	r1, [pc, #656]	@ (8004a20 <HAL_ADC_ConfigChannel+0x34c>)
 8004790:	428a      	cmp	r2, r1
 8004792:	d006      	beq.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004794:	68a2      	ldr	r2, [r4, #8]
 8004796:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800479a:	4332      	orrs	r2, r6
 800479c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80047a0:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a2:	2000      	movs	r0, #0
 80047a4:	e003      	b.n	80047ae <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047a8:	f042 0220 	orr.w	r2, r2, #32
 80047ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80047b4:	b002      	add	sp, #8
 80047b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047ba:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047bc:	6808      	ldr	r0, [r1, #0]
 80047be:	0726      	lsls	r6, r4, #28
 80047c0:	d4b9      	bmi.n	8004736 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047c2:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 80047c4:	f3c0 5604 	ubfx	r6, r0, #20, #5
 80047c8:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047ca:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 80047cc:	40b4      	lsls	r4, r6
 80047ce:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047d2:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 80047d6:	ea6f 0404 	mvn.w	r4, r4
 80047da:	f000 8107 	beq.w	80049ec <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047de:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80047e2:	40b5      	lsls	r5, r6
 80047e4:	583e      	ldr	r6, [r7, r0]
 80047e6:	4034      	ands	r4, r6
 80047e8:	432c      	orrs	r4, r5
 80047ea:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80047ec:	6950      	ldr	r0, [r2, #20]
 80047ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80047f2:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047f4:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047f8:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047fa:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047fc:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047fe:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004800:	f000 80c8 	beq.w	8004994 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004804:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8004808:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 800480a:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 800480e:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004812:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8004816:	4d83      	ldr	r5, [pc, #524]	@ (8004a24 <HAL_ADC_ConfigChannel+0x350>)
 8004818:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 800481c:	ea0c 0505 	and.w	r5, ip, r5
 8004820:	433d      	orrs	r5, r7
 8004822:	4328      	orrs	r0, r5
 8004824:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004828:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800482c:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800482e:	698e      	ldr	r6, [r1, #24]
 8004830:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8004834:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8004838:	4330      	orrs	r0, r6
 800483a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483e:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004840:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004842:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004846:	f1a5 0501 	sub.w	r5, r5, #1
 800484a:	fab5 f585 	clz	r5, r5
 800484e:	096d      	lsrs	r5, r5, #5
 8004850:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004854:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004858:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800485c:	6808      	ldr	r0, [r1, #0]
}
 800485e:	e76a      	b.n	8004736 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004860:	020c      	lsls	r4, r1, #8
 8004862:	d49e      	bmi.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004864:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004868:	d19b      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800486a:	4968      	ldr	r1, [pc, #416]	@ (8004a0c <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800486c:	486e      	ldr	r0, [pc, #440]	@ (8004a28 <HAL_ADC_ConfigChannel+0x354>)
 800486e:	688a      	ldr	r2, [r1, #8]
 8004870:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004874:	4332      	orrs	r2, r6
 8004876:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800487a:	608a      	str	r2, [r1, #8]
 800487c:	6802      	ldr	r2, [r0, #0]
 800487e:	496b      	ldr	r1, [pc, #428]	@ (8004a2c <HAL_ADC_ConfigChannel+0x358>)
 8004880:	0992      	lsrs	r2, r2, #6
 8004882:	fba1 1202 	umull	r1, r2, r1, r2
 8004886:	0992      	lsrs	r2, r2, #6
 8004888:	3201      	adds	r2, #1
 800488a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004892:	9a01      	ldr	r2, [sp, #4]
 8004894:	2a00      	cmp	r2, #0
 8004896:	d084      	beq.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	3a01      	subs	r2, #1
 800489c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800489e:	9a01      	ldr	r2, [sp, #4]
 80048a0:	2a00      	cmp	r2, #0
 80048a2:	d1f9      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x1c4>
 80048a4:	e77d      	b.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048a6:	2f00      	cmp	r7, #0
 80048a8:	d060      	beq.n	800496c <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048aa:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80048ae:	2c00      	cmp	r4, #0
 80048b0:	f000 80be 	beq.w	8004a30 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80048b4:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b8:	3401      	adds	r4, #1
 80048ba:	f004 041f 	and.w	r4, r4, #31
 80048be:	2c09      	cmp	r4, #9
 80048c0:	f240 80b6 	bls.w	8004a30 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80048c8:	2c00      	cmp	r4, #0
 80048ca:	f000 8157 	beq.w	8004b7c <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 80048ce:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80048d2:	3401      	adds	r4, #1
 80048d4:	06a4      	lsls	r4, r4, #26
 80048d6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048da:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80048de:	2d00      	cmp	r5, #0
 80048e0:	f000 8156 	beq.w	8004b90 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 80048e4:	fab5 f585 	clz	r5, r5
 80048e8:	3501      	adds	r5, #1
 80048ea:	f005 051f 	and.w	r5, r5, #31
 80048ee:	2601      	movs	r6, #1
 80048f0:	fa06 f505 	lsl.w	r5, r6, r5
 80048f4:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f000 8146 	beq.w	8004b8c <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8004900:	fab0 f080 	clz	r0, r0
 8004904:	1c45      	adds	r5, r0, #1
 8004906:	f005 051f 	and.w	r5, r5, #31
 800490a:	2003      	movs	r0, #3
 800490c:	f06f 061d 	mvn.w	r6, #29
 8004910:	fb10 6005 	smlabb	r0, r0, r5, r6
 8004914:	0500      	lsls	r0, r0, #20
 8004916:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800491a:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800491c:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 800491e:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004920:	f005 0504 	and.w	r5, r5, #4
 8004924:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004928:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800492c:	fa04 f700 	lsl.w	r7, r4, r0
 8004930:	f04f 0c07 	mov.w	ip, #7
 8004934:	5974      	ldr	r4, [r6, r5]
 8004936:	fa0c f000 	lsl.w	r0, ip, r0
 800493a:	ea24 0000 	bic.w	r0, r4, r0
 800493e:	4338      	orrs	r0, r7
 8004940:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004942:	6808      	ldr	r0, [r1, #0]
}
 8004944:	e70d      	b.n	8004762 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8004946:	2002      	movs	r0, #2
}
 8004948:	b002      	add	sp, #8
 800494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800494e:	01c8      	lsls	r0, r1, #7
 8004950:	f53f af27 	bmi.w	80047a2 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004954:	4932      	ldr	r1, [pc, #200]	@ (8004a20 <HAL_ADC_ConfigChannel+0x34c>)
 8004956:	428a      	cmp	r2, r1
 8004958:	f43f af23 	beq.w	80047a2 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800495c:	68a2      	ldr	r2, [r4, #8]
 800495e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004962:	4332      	orrs	r2, r6
 8004964:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004968:	60a2      	str	r2, [r4, #8]
}
 800496a:	e71a      	b.n	80047a2 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800496c:	0e80      	lsrs	r0, r0, #26
 800496e:	3001      	adds	r0, #1
 8004970:	f000 051f 	and.w	r5, r0, #31
 8004974:	2401      	movs	r4, #1
 8004976:	0680      	lsls	r0, r0, #26
 8004978:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800497c:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497e:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004980:	ea44 0400 	orr.w	r4, r4, r0
 8004984:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004988:	d977      	bls.n	8004a7a <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800498a:	381e      	subs	r0, #30
 800498c:	0500      	lsls	r0, r0, #20
 800498e:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004992:	e7c2      	b.n	800491a <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004994:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8004996:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004998:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800499c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049a0:	2d00      	cmp	r5, #0
 80049a2:	d16c      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x3aa>
 80049a4:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049a8:	4284      	cmp	r4, r0
 80049aa:	f000 80a0 	beq.w	8004aee <HAL_ADC_ConfigChannel+0x41a>
 80049ae:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80049b0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b2:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049b6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80049ba:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 80049be:	4285      	cmp	r5, r0
 80049c0:	f000 80c0 	beq.w	8004b44 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049c4:	68a5      	ldr	r5, [r4, #8]
 80049c6:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049c8:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049cc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80049d0:	4285      	cmp	r5, r0
 80049d2:	f000 80a1 	beq.w	8004b18 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049d6:	68e5      	ldr	r5, [r4, #12]
 80049d8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049da:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049de:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80049e2:	42a0      	cmp	r0, r4
 80049e4:	f000 80c4 	beq.w	8004b70 <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049e8:	4638      	mov	r0, r7
 80049ea:	e6a4      	b.n	8004736 <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80049ec:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80049f0:	5835      	ldr	r5, [r6, r0]
 80049f2:	402c      	ands	r4, r5
 80049f4:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049f6:	6950      	ldr	r0, [r2, #20]
 80049f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80049fc:	6150      	str	r0, [r2, #20]
}
 80049fe:	e6f9      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x120>
 8004a00:	0007ffff 	.word	0x0007ffff
 8004a04:	407f0000 	.word	0x407f0000
 8004a08:	80080000 	.word	0x80080000
 8004a0c:	50000300 	.word	0x50000300
 8004a10:	c3210000 	.word	0xc3210000
 8004a14:	90c00010 	.word	0x90c00010
 8004a18:	c7520000 	.word	0xc7520000
 8004a1c:	cb840000 	.word	0xcb840000
 8004a20:	50000100 	.word	0x50000100
 8004a24:	03fff000 	.word	0x03fff000
 8004a28:	200004e0 	.word	0x200004e0
 8004a2c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a30:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004a34:	2c00      	cmp	r4, #0
 8004a36:	f000 80b7 	beq.w	8004ba8 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8004a3a:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a3e:	3401      	adds	r4, #1
 8004a40:	06a4      	lsls	r4, r4, #26
 8004a42:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a46:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	f000 80aa 	beq.w	8004ba4 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8004a50:	fab5 f585 	clz	r5, r5
 8004a54:	3501      	adds	r5, #1
 8004a56:	f005 051f 	and.w	r5, r5, #31
 8004a5a:	2601      	movs	r6, #1
 8004a5c:	fa06 f505 	lsl.w	r5, r6, r5
 8004a60:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a62:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004a66:	2800      	cmp	r0, #0
 8004a68:	f000 8099 	beq.w	8004b9e <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8004a6c:	fab0 f080 	clz	r0, r0
 8004a70:	3001      	adds	r0, #1
 8004a72:	f000 001f 	and.w	r0, r0, #31
 8004a76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004a7a:	0500      	lsls	r0, r0, #20
 8004a7c:	e74d      	b.n	800491a <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a82:	b11d      	cbz	r5, 8004a8c <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8004a84:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a88:	42ac      	cmp	r4, r5
 8004a8a:	d030      	beq.n	8004aee <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a8c:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8004a8e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a90:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a94:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004a98:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	fa97 f6a7 	rbit	r6, r7
 8004aa0:	f104 0c08 	add.w	ip, r4, #8
 8004aa4:	46e0      	mov	r8, ip
  if (value == 0U)
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	d074      	beq.n	8004b94 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004aaa:	fab6 f686 	clz	r6, r6
 8004aae:	42ae      	cmp	r6, r5
 8004ab0:	d04a      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ab2:	f8dc 5000 	ldr.w	r5, [ip]
 8004ab6:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aba:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac2:	f104 060c 	add.w	r6, r4, #12
 8004ac6:	46b0      	mov	r8, r6
  if (value == 0U)
 8004ac8:	f1be 0f00 	cmp.w	lr, #0
 8004acc:	d059      	beq.n	8004b82 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8004ace:	fabe fe8e 	clz	lr, lr
 8004ad2:	45ae      	cmp	lr, r5
 8004ad4:	d022      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ad6:	6834      	ldr	r4, [r6, #0]
 8004ad8:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ada:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 8004ae2:	2d00      	cmp	r5, #0
 8004ae4:	f43f ae27 	beq.w	8004736 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8004ae8:	fab5 f085 	clz	r0, r5
 8004aec:	e779      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 8004aee:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004af0:	4614      	mov	r4, r2
 8004af2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004af6:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004afa:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004afc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004afe:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004b00:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b04:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b08:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	d1c4      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x3c8>
 8004b12:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8004b16:	e752      	b.n	80049be <HAL_ADC_ConfigChannel+0x2ea>
 8004b18:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8004b1c:	f8dc 0000 	ldr.w	r0, [ip]
 8004b20:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004b24:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b28:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	68e4      	ldr	r4, [r4, #12]
 8004b2e:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b32:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b34:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b38:	4638      	mov	r0, r7
 8004b3a:	2d00      	cmp	r5, #0
 8004b3c:	d1cf      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x40a>
 8004b3e:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8004b42:	e74e      	b.n	80049e2 <HAL_ADC_ConfigChannel+0x30e>
 8004b44:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8004b48:	f8de 0000 	ldr.w	r0, [lr]
 8004b4c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004b50:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b54:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b56:	68a0      	ldr	r0, [r4, #8]
 8004b58:	68a5      	ldr	r5, [r4, #8]
 8004b5a:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b5e:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b60:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b64:	4638      	mov	r0, r7
 8004b66:	2e00      	cmp	r6, #0
 8004b68:	d1a9      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x3ea>
 8004b6a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8004b6e:	e72f      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8004b70:	6830      	ldr	r0, [r6, #0]
 8004b72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004b76:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b78:	6808      	ldr	r0, [r1, #0]
}
 8004b7a:	e5dc      	b.n	8004736 <HAL_ADC_ConfigChannel+0x62>
 8004b7c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004b80:	e6ab      	b.n	80048da <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004b82:	68e5      	ldr	r5, [r4, #12]
 8004b84:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b86:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004b8a:	e7a8      	b.n	8004ade <HAL_ADC_ConfigChannel+0x40a>
 8004b8c:	4808      	ldr	r0, [pc, #32]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x4dc>)
 8004b8e:	e6c4      	b.n	800491a <HAL_ADC_ConfigChannel+0x246>
 8004b90:	2502      	movs	r5, #2
 8004b92:	e6af      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x220>
 8004b94:	68a5      	ldr	r5, [r4, #8]
 8004b96:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b98:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004b9c:	e78f      	b.n	8004abe <HAL_ADC_ConfigChannel+0x3ea>
 8004b9e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8004ba2:	e6ba      	b.n	800491a <HAL_ADC_ConfigChannel+0x246>
 8004ba4:	2502      	movs	r5, #2
 8004ba6:	e75b      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x38c>
 8004ba8:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004bac:	e74b      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x372>
 8004bae:	bf00      	nop
 8004bb0:	fe500000 	.word	0xfe500000

08004bb4 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb8:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8004bc0:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004bc8:	f000 8175 	beq.w	8004eb6 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8004bcc:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004bce:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8004bd0:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004bd4:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004bd8:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	d072      	beq.n	8004cc4 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004bde:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004be0:	2d01      	cmp	r5, #1
 8004be2:	d06f      	beq.n	8004cc4 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004be4:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004be6:	f000 001f 	and.w	r0, r0, #31
 8004bea:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004bee:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004bf0:	2f00      	cmp	r7, #0
 8004bf2:	f040 811a 	bne.w	8004e2a <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bf6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004bf8:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f000 821e 	beq.w	800503c <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004c00:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004c02:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8004c06:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004c08:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004c0a:	4330      	orrs	r0, r6
 8004c0c:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c10:	6898      	ldr	r0, [r3, #8]
 8004c12:	0700      	lsls	r0, r0, #28
 8004c14:	d410      	bmi.n	8004c38 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004c16:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004c1a:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8004c1e:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004c20:	2d00      	cmp	r5, #0
 8004c22:	f040 80f7 	bne.w	8004e14 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 8004c26:	68dd      	ldr	r5, [r3, #12]
 8004c28:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004c2c:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004c30:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004c34:	4328      	orrs	r0, r5
 8004c36:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c38:	6898      	ldr	r0, [r3, #8]
 8004c3a:	f010 0004 	ands.w	r0, r0, #4
 8004c3e:	d057      	beq.n	8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c40:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c42:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c44:	689d      	ldr	r5, [r3, #8]
 8004c46:	07ee      	lsls	r6, r5, #31
 8004c48:	d414      	bmi.n	8004c74 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004c4a:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004c4c:	4da3      	ldr	r5, [pc, #652]	@ (8004edc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004c4e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8004c52:	f007 0c18 	and.w	ip, r7, #24
 8004c56:	fa25 f50c 	lsr.w	r5, r5, ip
 8004c5a:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8004c5e:	4025      	ands	r5, r4
 8004c60:	ea26 0c0e 	bic.w	ip, r6, lr
 8004c64:	ea45 050c 	orr.w	r5, r5, ip
 8004c68:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c6c:	4d9c      	ldr	r5, [pc, #624]	@ (8004ee0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004c6e:	42af      	cmp	r7, r5
 8004c70:	f000 80f6 	beq.w	8004e60 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004c74:	499b      	ldr	r1, [pc, #620]	@ (8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004c76:	420c      	tst	r4, r1
 8004c78:	d01e      	beq.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004c7a:	4e9b      	ldr	r6, [pc, #620]	@ (8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004c7c:	4d9b      	ldr	r5, [pc, #620]	@ (8004eec <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8004c7e:	68b1      	ldr	r1, [r6, #8]
 8004c80:	42ac      	cmp	r4, r5
 8004c82:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8004c86:	f000 809f 	beq.w	8004dc8 <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c8a:	4d99      	ldr	r5, [pc, #612]	@ (8004ef0 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8004c8c:	42ac      	cmp	r4, r5
 8004c8e:	f000 809b 	beq.w	8004dc8 <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004c92:	4d98      	ldr	r5, [pc, #608]	@ (8004ef4 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004c94:	42ac      	cmp	r4, r5
 8004c96:	f000 8112 	beq.w	8004ebe <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004c9a:	4d97      	ldr	r5, [pc, #604]	@ (8004ef8 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8004c9c:	42ac      	cmp	r4, r5
 8004c9e:	d10b      	bne.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ca0:	0249      	lsls	r1, r1, #9
 8004ca2:	d409      	bmi.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004ca4:	4995      	ldr	r1, [pc, #596]	@ (8004efc <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004ca6:	428b      	cmp	r3, r1
 8004ca8:	d006      	beq.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004caa:	68b3      	ldr	r3, [r6, #8]
 8004cac:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004cb0:	433b      	orrs	r3, r7
 8004cb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cb6:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004cbe:	b003      	add	sp, #12
 8004cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004cc4:	2809      	cmp	r0, #9
 8004cc6:	d1a3      	bne.n	8004c10 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cc8:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cca:	0c65      	lsrs	r5, r4, #17
 8004ccc:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004cd0:	b120      	cbz	r0, 8004cdc <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cd2:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004cd4:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cd8:	4330      	orrs	r0, r6
 8004cda:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004cdc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004cde:	4e88      	ldr	r6, [pc, #544]	@ (8004f00 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004ce0:	4030      	ands	r0, r6
 8004ce2:	4328      	orrs	r0, r5
 8004ce4:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ce6:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004ce8:	6655      	str	r5, [r2, #100]	@ 0x64
 8004cea:	0700      	lsls	r0, r0, #28
 8004cec:	d4a4      	bmi.n	8004c38 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8004cee:	e792      	b.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x62>
 8004cf0:	689d      	ldr	r5, [r3, #8]
 8004cf2:	072f      	lsls	r7, r5, #28
 8004cf4:	d4a6      	bmi.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004cf6:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004cf8:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004cfc:	2d00      	cmp	r5, #0
 8004cfe:	f040 80a6 	bne.w	8004e4e <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004d02:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004d04:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004d06:	f000 819b 	beq.w	8005040 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004d0a:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004d0e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d10:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004d12:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004d16:	2d01      	cmp	r5, #1
 8004d18:	f000 8185 	beq.w	8005026 <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004d1c:	691d      	ldr	r5, [r3, #16]
 8004d1e:	f025 0502 	bic.w	r5, r5, #2
 8004d22:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d24:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8004d26:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8004d2a:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d2c:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8004d2e:	40bd      	lsls	r5, r7
 8004d30:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d34:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8004d38:	ea6f 0505 	mvn.w	r5, r5
 8004d3c:	f000 8169 	beq.w	8005012 <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d40:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004d44:	40be      	lsls	r6, r7
 8004d46:	f85c 7004 	ldr.w	r7, [ip, r4]
 8004d4a:	403d      	ands	r5, r7
 8004d4c:	4335      	orrs	r5, r6
 8004d4e:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d52:	695c      	ldr	r4, [r3, #20]
 8004d54:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004d58:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004d5a:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004d5c:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004d5e:	694d      	ldr	r5, [r1, #20]
 8004d60:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004d62:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004d64:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004d66:	f000 810c 	beq.w	8004f82 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004d6a:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004d6e:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8004d70:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8004d74:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d78:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8004d7c:	4e61      	ldr	r6, [pc, #388]	@ (8004f04 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004d7e:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8004d82:	ea0e 0606 	and.w	r6, lr, r6
 8004d86:	ea46 060c 	orr.w	r6, r6, ip
 8004d8a:	4334      	orrs	r4, r6
 8004d8c:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004d90:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d94:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004d96:	698e      	ldr	r6, [r1, #24]
 8004d98:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004d9c:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8004da0:	4334      	orrs	r4, r6
 8004da2:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004da6:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004da8:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004daa:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004dae:	f1a6 0601 	sub.w	r6, r6, #1
 8004db2:	fab6 f686 	clz	r6, r6
 8004db6:	0976      	lsrs	r6, r6, #5
 8004db8:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8004dbc:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8004dc0:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004dc4:	680c      	ldr	r4, [r1, #0]
}
 8004dc6:	e73d      	b.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dc8:	020d      	lsls	r5, r1, #8
 8004dca:	f53f af75 	bmi.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dd2:	f47f af71 	bne.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004dd6:	4944      	ldr	r1, [pc, #272]	@ (8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004dd8:	4c4b      	ldr	r4, [pc, #300]	@ (8004f08 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004dda:	688b      	ldr	r3, [r1, #8]
 8004ddc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004de0:	433b      	orrs	r3, r7
 8004de2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004de6:	608b      	str	r3, [r1, #8]
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	4948      	ldr	r1, [pc, #288]	@ (8004f0c <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004dec:	099b      	lsrs	r3, r3, #6
 8004dee:	fba1 1303 	umull	r1, r3, r1, r3
 8004df2:	099b      	lsrs	r3, r3, #6
 8004df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004dfc:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004dfe:	9b01      	ldr	r3, [sp, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f43f af59 	beq.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 8004e06:	9b01      	ldr	r3, [sp, #4]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004e0c:	9b01      	ldr	r3, [sp, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f9      	bne.n	8004e06 <HAL_ADCEx_InjectedConfigChannel+0x252>
 8004e12:	e751      	b.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 8004e14:	68dd      	ldr	r5, [r3, #12]
 8004e16:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004e1a:	4328      	orrs	r0, r5
 8004e1c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e1e:	6898      	ldr	r0, [r3, #8]
 8004e20:	f010 0004 	ands.w	r0, r0, #4
 8004e24:	f43f af64 	beq.w	8004cf0 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8004e28:	e70a      	b.n	8004c40 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004e2a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004e2c:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004e2e:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8004e30:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004e32:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f47f aeeb 	bne.w	8004c10 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004e3a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004e3c:	4e30      	ldr	r6, [pc, #192]	@ (8004f00 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8004e3e:	4030      	ands	r0, r6
 8004e40:	4328      	orrs	r0, r5
 8004e42:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e44:	6898      	ldr	r0, [r3, #8]
 8004e46:	0700      	lsls	r0, r0, #28
 8004e48:	f53f aef6 	bmi.w	8004c38 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8004e4c:	e6e3      	b.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004e4e:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8004e50:	2d00      	cmp	r5, #0
 8004e52:	f43f af56 	beq.w	8004d02 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004e56:	2801      	cmp	r0, #1
 8004e58:	f000 8118 	beq.w	800508c <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004e5c:	68d8      	ldr	r0, [r3, #12]
 8004e5e:	e754      	b.n	8004d0a <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e60:	f1be 0f00 	cmp.w	lr, #0
 8004e64:	d154      	bne.n	8004f10 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8004e66:	0ea4      	lsrs	r4, r4, #26
 8004e68:	3401      	adds	r4, #1
 8004e6a:	f004 061f 	and.w	r6, r4, #31
 8004e6e:	2501      	movs	r5, #1
 8004e70:	06a4      	lsls	r4, r4, #26
 8004e72:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8004e76:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e78:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e7a:	ea45 0504 	orr.w	r5, r5, r4
 8004e7e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e82:	f200 80fe 	bhi.w	8005082 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e86:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e88:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004e8a:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8004e8c:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004e8e:	f006 0604 	and.w	r6, r6, #4
 8004e92:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004e96:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004e9a:	fa05 fc04 	lsl.w	ip, r5, r4
 8004e9e:	f04f 0e07 	mov.w	lr, #7
 8004ea2:	59bd      	ldr	r5, [r7, r6]
 8004ea4:	fa0e f404 	lsl.w	r4, lr, r4
 8004ea8:	ea25 0404 	bic.w	r4, r5, r4
 8004eac:	ea44 040c 	orr.w	r4, r4, ip
 8004eb0:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004eb2:	680c      	ldr	r4, [r1, #0]
}
 8004eb4:	e6de      	b.n	8004c74 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8004eb6:	2002      	movs	r0, #2
}
 8004eb8:	b003      	add	sp, #12
 8004eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ebe:	01cc      	lsls	r4, r1, #7
 8004ec0:	f53f aefa 	bmi.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ec4:	490d      	ldr	r1, [pc, #52]	@ (8004efc <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	f43f aef6 	beq.w	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004ecc:	68b3      	ldr	r3, [r6, #8]
 8004ece:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004ed2:	433b      	orrs	r3, r7
 8004ed4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed8:	60b3      	str	r3, [r6, #8]
}
 8004eda:	e6ed      	b.n	8004cb8 <HAL_ADCEx_InjectedConfigChannel+0x104>
 8004edc:	0007ffff 	.word	0x0007ffff
 8004ee0:	407f0000 	.word	0x407f0000
 8004ee4:	80080000 	.word	0x80080000
 8004ee8:	50000300 	.word	0x50000300
 8004eec:	c3210000 	.word	0xc3210000
 8004ef0:	90c00010 	.word	0x90c00010
 8004ef4:	c7520000 	.word	0xc7520000
 8004ef8:	cb840000 	.word	0xcb840000
 8004efc:	50000100 	.word	0x50000100
 8004f00:	04104000 	.word	0x04104000
 8004f04:	03fff000 	.word	0x03fff000
 8004f08:	200004e0 	.word	0x200004e0
 8004f0c:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	f000 80be 	beq.w	8005096 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004f1a:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f1e:	3501      	adds	r5, #1
 8004f20:	f005 051f 	and.w	r5, r5, #31
 8004f24:	2d09      	cmp	r5, #9
 8004f26:	f240 80b6 	bls.w	8005096 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004f2e:	2d00      	cmp	r5, #0
 8004f30:	f000 812b 	beq.w	800518a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004f34:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f38:	3501      	adds	r5, #1
 8004f3a:	06ad      	lsls	r5, r5, #26
 8004f3c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004f44:	2e00      	cmp	r6, #0
 8004f46:	f000 811e 	beq.w	8005186 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004f4a:	fab6 f686 	clz	r6, r6
 8004f4e:	3601      	adds	r6, #1
 8004f50:	f006 061f 	and.w	r6, r6, #31
 8004f54:	2701      	movs	r7, #1
 8004f56:	fa07 f606 	lsl.w	r6, r7, r6
 8004f5a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004f60:	2c00      	cmp	r4, #0
 8004f62:	f000 8109 	beq.w	8005178 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8004f66:	fab4 f484 	clz	r4, r4
 8004f6a:	1c66      	adds	r6, r4, #1
 8004f6c:	f006 061f 	and.w	r6, r6, #31
 8004f70:	2403      	movs	r4, #3
 8004f72:	f06f 071d 	mvn.w	r7, #29
 8004f76:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004f7a:	0524      	lsls	r4, r4, #20
 8004f7c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004f80:	e782      	b.n	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f82:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004f84:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004f86:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f8a:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004f8e:	2e00      	cmp	r6, #0
 8004f90:	d05a      	beq.n	8005048 <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f92:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004f96:	b126      	cbz	r6, 8004fa2 <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8004f98:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004f9c:	42b5      	cmp	r5, r6
 8004f9e:	f000 80ce 	beq.w	800513e <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8004fa2:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004fa4:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fa6:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004faa:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004fae:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	fa9c f7ac 	rbit	r7, ip
 8004fb6:	f105 0e08 	add.w	lr, r5, #8
 8004fba:	46f1      	mov	r9, lr
  if (value == 0U)
 8004fbc:	2f00      	cmp	r7, #0
 8004fbe:	f000 80dd 	beq.w	800517c <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 8004fc2:	fab7 f787 	clz	r7, r7
 8004fc6:	42b7      	cmp	r7, r6
 8004fc8:	f000 80a3 	beq.w	8005112 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fcc:	f8de 6000 	ldr.w	r6, [lr]
 8004fd0:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004fd4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fdc:	f105 070c 	add.w	r7, r5, #12
 8004fe0:	46b9      	mov	r9, r7
  if (value == 0U)
 8004fe2:	f1b8 0f00 	cmp.w	r8, #0
 8004fe6:	f000 80d3 	beq.w	8005190 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8004fea:	fab8 f888 	clz	r8, r8
 8004fee:	45b0      	cmp	r8, r6
 8004ff0:	d077      	beq.n	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ff2:	683d      	ldr	r5, [r7, #0]
 8004ff4:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ff6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffa:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	f43f ae20 	beq.w	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 8005004:	fab6 f486 	clz	r4, r6
 8005008:	42ac      	cmp	r4, r5
 800500a:	f000 80af 	beq.w	800516c <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800500e:	4664      	mov	r4, ip
 8005010:	e618      	b.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005012:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005016:	593e      	ldr	r6, [r7, r4]
 8005018:	4035      	ands	r5, r6
 800501a:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800501c:	695c      	ldr	r4, [r3, #20]
 800501e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8005022:	615c      	str	r4, [r3, #20]
}
 8005024:	e699      	b.n	8004d5a <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8005026:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 800502a:	691e      	ldr	r6, [r3, #16]
 800502c:	433d      	orrs	r5, r7
 800502e:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8005032:	4335      	orrs	r5, r6
 8005034:	f045 0502 	orr.w	r5, r5, #2
 8005038:	611d      	str	r5, [r3, #16]
 800503a:	e673      	b.n	8004d24 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800503c:	4628      	mov	r0, r5
 800503e:	e5e4      	b.n	8004c0a <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005040:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005044:	60d8      	str	r0, [r3, #12]
 8005046:	e663      	b.n	8004d10 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005048:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800504c:	42a5      	cmp	r5, r4
 800504e:	d076      	beq.n	800513e <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005050:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8005052:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005054:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005058:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800505c:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8005060:	42a6      	cmp	r6, r4
 8005062:	d054      	beq.n	800510e <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005064:	68ae      	ldr	r6, [r5, #8]
 8005066:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005068:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800506c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005070:	42a6      	cmp	r6, r4
 8005072:	d034      	beq.n	80050de <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005074:	68ee      	ldr	r6, [r5, #12]
 8005076:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005078:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800507c:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8005080:	e7c2      	b.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005082:	3c1e      	subs	r4, #30
 8005084:	0524      	lsls	r4, r4, #20
 8005086:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800508a:	e6fd      	b.n	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508c:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 800508e:	f045 0520 	orr.w	r5, r5, #32
 8005092:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8005094:	e63d      	b.n	8004d12 <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800509a:	2d00      	cmp	r5, #0
 800509c:	f000 8082 	beq.w	80051a4 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 80050a0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050a4:	3501      	adds	r5, #1
 80050a6:	06ad      	lsls	r5, r5, #26
 80050a8:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ac:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	d075      	beq.n	80051a0 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050b4:	fab6 f686 	clz	r6, r6
 80050b8:	3601      	adds	r6, #1
 80050ba:	f006 061f 	and.w	r6, r6, #31
 80050be:	2701      	movs	r7, #1
 80050c0:	fa07 f606 	lsl.w	r6, r7, r6
 80050c4:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80050ca:	2c00      	cmp	r4, #0
 80050cc:	d065      	beq.n	800519a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 80050ce:	fab4 f484 	clz	r4, r4
 80050d2:	3401      	adds	r4, #1
 80050d4:	f004 041f 	and.w	r4, r4, #31
 80050d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80050dc:	e6d3      	b.n	8004e86 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 80050de:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80050e2:	f8de 4000 	ldr.w	r4, [lr]
 80050e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80050ea:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80050ee:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050f2:	68ec      	ldr	r4, [r5, #12]
 80050f4:	68ed      	ldr	r5, [r5, #12]
 80050f6:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050fa:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050fc:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005100:	4664      	mov	r4, ip
 8005102:	2e00      	cmp	r6, #0
 8005104:	f47f af79 	bne.w	8004ffa <HAL_ADCEx_InjectedConfigChannel+0x446>
 8005108:	f3cc 6484 	ubfx	r4, ip, #26, #5
 800510c:	e77c      	b.n	8005008 <HAL_ADCEx_InjectedConfigChannel+0x454>
 800510e:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8005112:	f8d8 4000 	ldr.w	r4, [r8]
 8005116:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800511a:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800511e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005122:	68ac      	ldr	r4, [r5, #8]
 8005124:	68ae      	ldr	r6, [r5, #8]
 8005126:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800512a:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800512c:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005130:	4664      	mov	r4, ip
 8005132:	2f00      	cmp	r7, #0
 8005134:	f47f af50 	bne.w	8004fd8 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8005138:	f3cc 6484 	ubfx	r4, ip, #26, #5
 800513c:	e798      	b.n	8005070 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 800513e:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8005140:	461d      	mov	r5, r3
 8005142:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005146:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800514a:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800514e:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005150:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005152:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005156:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800515a:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800515e:	4664      	mov	r4, ip
 8005160:	2f00      	cmp	r7, #0
 8005162:	f47f af26 	bne.w	8004fb2 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8005166:	f3cc 6484 	ubfx	r4, ip, #26, #5
 800516a:	e779      	b.n	8005060 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 800516c:	683c      	ldr	r4, [r7, #0]
 800516e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005172:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005174:	680c      	ldr	r4, [r1, #0]
}
 8005176:	e565      	b.n	8004c44 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8005178:	4c0c      	ldr	r4, [pc, #48]	@ (80051ac <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 800517a:	e685      	b.n	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800517c:	68ae      	ldr	r6, [r5, #8]
 800517e:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005180:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005184:	e728      	b.n	8004fd8 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8005186:	2602      	movs	r6, #2
 8005188:	e6e7      	b.n	8004f5a <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 800518a:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800518e:	e6d7      	b.n	8004f40 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8005190:	68ee      	ldr	r6, [r5, #12]
 8005192:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005194:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005198:	e72f      	b.n	8004ffa <HAL_ADCEx_InjectedConfigChannel+0x446>
 800519a:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800519e:	e673      	b.n	8004e88 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 80051a0:	2602      	movs	r6, #2
 80051a2:	e78f      	b.n	80050c4 <HAL_ADCEx_InjectedConfigChannel+0x510>
 80051a4:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80051a8:	e780      	b.n	80050ac <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 80051aa:	bf00      	nop
 80051ac:	fe500000 	.word	0xfe500000

080051b0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051b0:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80051b4:	2a01      	cmp	r2, #1
 80051b6:	d045      	beq.n	8005244 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 80051b8:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051ba:	6804      	ldr	r4, [r0, #0]
{
 80051bc:	b09c      	sub	sp, #112	@ 0x70
 80051be:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80051c0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80051c2:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051c4:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80051c8:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 80051ca:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80051ce:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051d0:	d008      	beq.n	80051e4 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d8:	f041 0120 	orr.w	r1, r1, #32
 80051dc:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80051de:	b01c      	add	sp, #112	@ 0x70
 80051e0:	bcf0      	pop	{r4, r5, r6, r7}
 80051e2:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80051e6:	6890      	ldr	r0, [r2, #8]
 80051e8:	0740      	lsls	r0, r0, #29
 80051ea:	d50b      	bpl.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80051ec:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051f0:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80051f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80051fe:	b01c      	add	sp, #112	@ 0x70
 8005200:	bcf0      	pop	{r4, r5, r6, r7}
 8005202:	4770      	bx	lr
 8005204:	68a0      	ldr	r0, [r4, #8]
 8005206:	0745      	lsls	r5, r0, #29
 8005208:	d4f1      	bmi.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800520a:	680d      	ldr	r5, [r1, #0]
 800520c:	b1e5      	cbz	r5, 8005248 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800520e:	4e19      	ldr	r6, [pc, #100]	@ (8005274 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005210:	684f      	ldr	r7, [r1, #4]
 8005212:	68b0      	ldr	r0, [r6, #8]
 8005214:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8005218:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 800521c:	4338      	orrs	r0, r7
 800521e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8005222:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005224:	68a0      	ldr	r0, [r4, #8]
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	07c0      	lsls	r0, r0, #31
 800522a:	d41e      	bmi.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800522c:	07d7      	lsls	r7, r2, #31
 800522e:	d41c      	bmi.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8005230:	68b2      	ldr	r2, [r6, #8]
 8005232:	6889      	ldr	r1, [r1, #8]
 8005234:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8005238:	430d      	orrs	r5, r1
 800523a:	f022 020f 	bic.w	r2, r2, #15
 800523e:	4315      	orrs	r5, r2
 8005240:	60b5      	str	r5, [r6, #8]
 8005242:	e012      	b.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8005244:	2002      	movs	r0, #2
}
 8005246:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005248:	480a      	ldr	r0, [pc, #40]	@ (8005274 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800524a:	6881      	ldr	r1, [r0, #8]
 800524c:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8005250:	6081      	str	r1, [r0, #8]
 8005252:	68a1      	ldr	r1, [r4, #8]
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	07cd      	lsls	r5, r1, #31
 8005258:	d407      	bmi.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800525a:	07d4      	lsls	r4, r2, #31
 800525c:	d405      	bmi.n	800526a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800525e:	6882      	ldr	r2, [r0, #8]
 8005260:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8005264:	f022 020f 	bic.w	r2, r2, #15
 8005268:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800526a:	2000      	movs	r0, #0
 800526c:	e7c4      	b.n	80051f8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800526e:	bf00      	nop
 8005270:	50000100 	.word	0x50000100
 8005274:	50000300 	.word	0x50000300

08005278 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005278:	b530      	push	{r4, r5, lr}
 800527a:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800527c:	2300      	movs	r3, #0
 800527e:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8005280:	2800      	cmp	r0, #0
 8005282:	d051      	beq.n	8005328 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8005284:	6802      	ldr	r2, [r0, #0]
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	4604      	mov	r4, r0
 800528c:	db4c      	blt.n	8005328 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800528e:	7f43      	ldrb	r3, [r0, #29]
 8005290:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8005294:	2b00      	cmp	r3, #0
 8005296:	d073      	beq.n	8005380 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8005298:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 800529c:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800529e:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 80052a0:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 80052a2:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 80052a4:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80052a6:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 80052a8:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 80052aa:	6921      	ldr	r1, [r4, #16]
 80052ac:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80052ae:	493c      	ldr	r1, [pc, #240]	@ (80053a0 <HAL_COMP_Init+0x128>)
 80052b0:	4001      	ands	r1, r0
 80052b2:	430b      	orrs	r3, r1
 80052b4:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80052b6:	6813      	ldr	r3, [r2, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	d501      	bpl.n	80052c0 <HAL_COMP_Init+0x48>
 80052bc:	022d      	lsls	r5, r5, #8
 80052be:	d549      	bpl.n	8005354 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80052c0:	4b38      	ldr	r3, [pc, #224]	@ (80053a4 <HAL_COMP_Init+0x12c>)
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d062      	beq.n	800538c <HAL_COMP_Init+0x114>
 80052c6:	4b38      	ldr	r3, [pc, #224]	@ (80053a8 <HAL_COMP_Init+0x130>)
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d064      	beq.n	8005396 <HAL_COMP_Init+0x11e>
 80052cc:	3304      	adds	r3, #4
 80052ce:	429a      	cmp	r2, r3
 80052d0:	bf15      	itete	ne
 80052d2:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 80052d6:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 80052da:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 80052de:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80052e2:	69a3      	ldr	r3, [r4, #24]
 80052e4:	0798      	lsls	r0, r3, #30
 80052e6:	d022      	beq.n	800532e <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80052e8:	4d30      	ldr	r5, [pc, #192]	@ (80053ac <HAL_COMP_Init+0x134>)
 80052ea:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80052ec:	f013 0f10 	tst.w	r3, #16
 80052f0:	bf14      	ite	ne
 80052f2:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80052f4:	4010      	andeq	r0, r2
 80052f6:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80052f8:	4d2c      	ldr	r5, [pc, #176]	@ (80053ac <HAL_COMP_Init+0x134>)
 80052fa:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80052fc:	f013 0f20 	tst.w	r3, #32
 8005300:	bf14      	ite	ne
 8005302:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005304:	4010      	andeq	r0, r2
 8005306:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005308:	4828      	ldr	r0, [pc, #160]	@ (80053ac <HAL_COMP_Init+0x134>)
 800530a:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800530c:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800530e:	f013 0f02 	tst.w	r3, #2
 8005312:	bf14      	ite	ne
 8005314:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005316:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005318:	07db      	lsls	r3, r3, #31
 800531a:	6045      	str	r5, [r0, #4]
 800531c:	d515      	bpl.n	800534a <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 800531e:	4b23      	ldr	r3, [pc, #140]	@ (80053ac <HAL_COMP_Init+0x134>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4311      	orrs	r1, r2
 8005324:	6019      	str	r1, [r3, #0]
}
 8005326:	e009      	b.n	800533c <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 8005328:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800532a:	b003      	add	sp, #12
 800532c:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800532e:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <HAL_COMP_Init+0x134>)
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	4011      	ands	r1, r2
 8005334:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005336:	6819      	ldr	r1, [r3, #0]
 8005338:	400a      	ands	r2, r1
 800533a:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800533c:	7f63      	ldrb	r3, [r4, #29]
 800533e:	b90b      	cbnz	r3, 8005344 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 8005340:	2301      	movs	r3, #1
 8005342:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8005344:	2000      	movs	r0, #0
}
 8005346:	b003      	add	sp, #12
 8005348:	bd30      	pop	{r4, r5, pc}
 800534a:	4918      	ldr	r1, [pc, #96]	@ (80053ac <HAL_COMP_Init+0x134>)
 800534c:	680b      	ldr	r3, [r1, #0]
 800534e:	4013      	ands	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
}
 8005352:	e7f3      	b.n	800533c <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005354:	4b16      	ldr	r3, [pc, #88]	@ (80053b0 <HAL_COMP_Init+0x138>)
 8005356:	4917      	ldr	r1, [pc, #92]	@ (80053b4 <HAL_COMP_Init+0x13c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	fba1 1303 	umull	r1, r3, r1, r3
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	3301      	adds	r3, #1
 8005364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0a6      	beq.n	80052c0 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	3b01      	subs	r3, #1
 8005376:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8005378:	9b01      	ldr	r3, [sp, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f9      	bne.n	8005372 <HAL_COMP_Init+0xfa>
 800537e:	e79f      	b.n	80052c0 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8005380:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8005382:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8005384:	f7fd fdac 	bl	8002ee0 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	e785      	b.n	8005298 <HAL_COMP_Init+0x20>
 800538c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005390:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005394:	e7a5      	b.n	80052e2 <HAL_COMP_Init+0x6a>
 8005396:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800539a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800539e:	e7a0      	b.n	80052e2 <HAL_COMP_Init+0x6a>
 80053a0:	ff007e0f 	.word	0xff007e0f
 80053a4:	40010200 	.word	0x40010200
 80053a8:	40010204 	.word	0x40010204
 80053ac:	40010400 	.word	0x40010400
 80053b0:	200004e0 	.word	0x200004e0
 80053b4:	053e2d63 	.word	0x053e2d63

080053b8 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80053b8:	b1b0      	cbz	r0, 80053e8 <HAL_CORDIC_Init+0x30>
{
 80053ba:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80053bc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80053c0:	4604      	mov	r4, r0
 80053c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80053c6:	b153      	cbz	r3, 80053de <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80053c8:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80053ca:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80053cc:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80053ce:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 80053d2:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 80053d6:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80053da:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80053dc:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80053de:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80053e2:	f7fd fdf1 	bl	8002fc8 <HAL_CORDIC_MspInit>
 80053e6:	e7ef      	b.n	80053c8 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80053e8:	2001      	movs	r0, #1
}
 80053ea:	4770      	bx	lr

080053ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053ec:	4907      	ldr	r1, [pc, #28]	@ (800540c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80053ee:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053f2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053fa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053fc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053fe:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005406:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <HAL_NVIC_SetPriority+0x70>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005418:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800541a:	f1c3 0e07 	rsb	lr, r3, #7
 800541e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005422:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005426:	bf28      	it	cs
 8005428:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800542c:	f1bc 0f06 	cmp.w	ip, #6
 8005430:	d91c      	bls.n	800546c <HAL_NVIC_SetPriority+0x5c>
 8005432:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005436:	f04f 33ff 	mov.w	r3, #4294967295
 800543a:	fa03 f30c 	lsl.w	r3, r3, ip
 800543e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005442:	f04f 33ff 	mov.w	r3, #4294967295
 8005446:	fa03 f30e 	lsl.w	r3, r3, lr
 800544a:	ea21 0303 	bic.w	r3, r1, r3
 800544e:	fa03 f30c 	lsl.w	r3, r3, ip
 8005452:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005454:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8005456:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005458:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800545a:	db0a      	blt.n	8005472 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005460:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005464:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005468:	f85d fb04 	ldr.w	pc, [sp], #4
 800546c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800546e:	4694      	mov	ip, r2
 8005470:	e7e7      	b.n	8005442 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005472:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <HAL_NVIC_SetPriority+0x74>)
 8005474:	f000 000f 	and.w	r0, r0, #15
 8005478:	4402      	add	r2, r0
 800547a:	7613      	strb	r3, [r2, #24]
 800547c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005480:	e000ed00 	.word	0xe000ed00
 8005484:	e000ecfc 	.word	0xe000ecfc

08005488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005488:	2800      	cmp	r0, #0
 800548a:	db07      	blt.n	800549c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800548c:	4a04      	ldr	r2, [pc, #16]	@ (80054a0 <HAL_NVIC_EnableIRQ+0x18>)
 800548e:	0941      	lsrs	r1, r0, #5
 8005490:	2301      	movs	r3, #1
 8005492:	f000 001f 	and.w	r0, r0, #31
 8005496:	4083      	lsls	r3, r0
 8005498:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000e100 	.word	0xe000e100

080054a4 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80054a4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80054a8:	4905      	ldr	r1, [pc, #20]	@ (80054c0 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80054aa:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80054ac:	68ca      	ldr	r2, [r1, #12]
 80054ae:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60cb      	str	r3, [r1, #12]
 80054b6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80054ba:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80054bc:	e7fd      	b.n	80054ba <HAL_NVIC_SystemReset+0x16>
 80054be:	bf00      	nop
 80054c0:	e000ed00 	.word	0xe000ed00
 80054c4:	05fa0004 	.word	0x05fa0004

080054c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054c8:	3801      	subs	r0, #1
 80054ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80054ce:	d301      	bcc.n	80054d4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054d0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80054d2:	4770      	bx	lr
{
 80054d4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054da:	4c07      	ldr	r4, [pc, #28]	@ (80054f8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054de:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80054e2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054e6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054e8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054ea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054ec:	619a      	str	r2, [r3, #24]
}
 80054ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054f2:	6119      	str	r1, [r3, #16]
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop

08005500 <HAL_SYSTICK_IRQHandler>:
{
 8005500:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005502:	f7ff fffb 	bl	80054fc <HAL_SYSTICK_Callback>
}
 8005506:	bd08      	pop	{r3, pc}

08005508 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005508:	b188      	cbz	r0, 800552e <HAL_DAC_Init+0x26>
{
 800550a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800550c:	7903      	ldrb	r3, [r0, #4]
 800550e:	4604      	mov	r4, r0
 8005510:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005514:	b13b      	cbz	r3, 8005526 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005516:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005518:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800551a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800551c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800551e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005520:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005522:	4618      	mov	r0, r3
}
 8005524:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005526:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005528:	f7fd fd64 	bl	8002ff4 <HAL_DAC_MspInit>
 800552c:	e7f3      	b.n	8005516 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800552e:	2001      	movs	r0, #1
}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop

08005534 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005534:	2800      	cmp	r0, #0
 8005536:	f000 80c2 	beq.w	80056be <HAL_DAC_ConfigChannel+0x18a>
{
 800553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553e:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8005540:	2900      	cmp	r1, #0
 8005542:	f000 80be 	beq.w	80056c2 <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005546:	7943      	ldrb	r3, [r0, #5]
 8005548:	2b01      	cmp	r3, #1
 800554a:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800554c:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 800554e:	f000 80c7 	beq.w	80056e0 <HAL_DAC_ConfigChannel+0x1ac>
 8005552:	2301      	movs	r3, #1
 8005554:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005556:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8005558:	f04f 0302 	mov.w	r3, #2
 800555c:	4616      	mov	r6, r2
 800555e:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005560:	d06f      	beq.n	8005642 <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005562:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005564:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005568:	69fa      	ldr	r2, [r7, #28]
 800556a:	2a01      	cmp	r2, #1
 800556c:	d108      	bne.n	8005580 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 800556e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005570:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005572:	241f      	movs	r4, #31
 8005574:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005576:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005578:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800557c:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800557e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005580:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8005582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005584:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005588:	2901      	cmp	r1, #1
 800558a:	f000 8095 	beq.w	80056b8 <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800558e:	2902      	cmp	r1, #2
 8005590:	f000 809a 	beq.w	80056c8 <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005594:	fabe fc8e 	clz	ip, lr
 8005598:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800559c:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800559e:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80055a0:	f1a4 0401 	sub.w	r4, r4, #1
 80055a4:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055a8:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80055ac:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055ae:	fab1 f181 	clz	r1, r1
 80055b2:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80055b4:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055b6:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80055ba:	f240 3107 	movw	r1, #775	@ 0x307
 80055be:	40b1      	lsls	r1, r6
 80055c0:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055c4:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055c6:	ea44 040e 	orr.w	r4, r4, lr
 80055ca:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055cc:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80055ce:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80055d2:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80055d6:	d07a      	beq.n	80056ce <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80055d8:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80055dc:	40b4      	lsls	r4, r6
 80055de:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80055e2:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055ea:	40b1      	lsls	r1, r6
 80055ec:	ea22 0201 	bic.w	r2, r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80055f2:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 80055f6:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80055f8:	f640 70fe 	movw	r0, #4094	@ 0xffe
 80055fc:	40b0      	lsls	r0, r6
 80055fe:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005602:	fa01 f006 	lsl.w	r0, r1, r6
 8005606:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005608:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 800560a:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800560c:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005610:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8005614:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005616:	24c0      	movs	r4, #192	@ 0xc0
 8005618:	6819      	ldr	r1, [r3, #0]
 800561a:	40b4      	lsls	r4, r6
 800561c:	ea21 0104 	bic.w	r1, r1, r4
 8005620:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005622:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8005624:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8005628:	40b0      	lsls	r0, r6
 800562a:	ea21 0100 	bic.w	r1, r1, r0
 800562e:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005630:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005632:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8005634:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8005638:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 800563a:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 800563c:	716c      	strb	r4, [r5, #5]
}
 800563e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8005642:	f7fe ff4d 	bl	80044e0 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005646:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005648:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800564a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 800564c:	b156      	cbz	r6, 8005664 <HAL_DAC_ConfigChannel+0x130>
 800564e:	e018      	b.n	8005682 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005650:	f7fe ff46 	bl	80044e0 <HAL_GetTick>
 8005654:	1b00      	subs	r0, r0, r4
 8005656:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005658:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800565a:	d902      	bls.n	8005662 <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800565c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565e:	0411      	lsls	r1, r2, #16
 8005660:	d448      	bmi.n	80056f4 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005664:	0412      	lsls	r2, r2, #16
 8005666:	d4f3      	bmi.n	8005650 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566a:	641a      	str	r2, [r3, #64]	@ 0x40
 800566c:	e00d      	b.n	800568a <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800566e:	f7fe ff37 	bl	80044e0 <HAL_GetTick>
 8005672:	1b00      	subs	r0, r0, r4
 8005674:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005676:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005678:	d902      	bls.n	8005680 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800567a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800567c:	2a00      	cmp	r2, #0
 800567e:	db39      	blt.n	80056f4 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005682:	2a00      	cmp	r2, #0
 8005684:	dbf3      	blt.n	800566e <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005688:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800568a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800568c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800568e:	f006 0610 	and.w	r6, r6, #16
 8005692:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8005696:	40b0      	lsls	r0, r6
 8005698:	40b1      	lsls	r1, r6
 800569a:	ea22 0200 	bic.w	r2, r2, r0
 800569e:	430a      	orrs	r2, r1
 80056a0:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056a6:	20ff      	movs	r0, #255	@ 0xff
 80056a8:	40b0      	lsls	r0, r6
 80056aa:	ea22 0200 	bic.w	r2, r2, r0
 80056ae:	40b1      	lsls	r1, r6
 80056b0:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80056b2:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80056b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80056b6:	e757      	b.n	8005568 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 80056b8:	f04f 0c00 	mov.w	ip, #0
 80056bc:	e76e      	b.n	800559c <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 80056be:	2001      	movs	r0, #1
}
 80056c0:	4770      	bx	lr
    return HAL_ERROR;
 80056c2:	2001      	movs	r0, #1
}
 80056c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 80056c8:	f04f 0c01 	mov.w	ip, #1
 80056cc:	e766      	b.n	800559c <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80056ce:	f000 fee1 	bl	8006494 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80056d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005704 <HAL_DAC_ConfigChannel+0x1d0>)
 80056d4:	4298      	cmp	r0, r3
 80056d6:	d905      	bls.n	80056e4 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 80056d8:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80056da:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 80056de:	e77d      	b.n	80055dc <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 80056e0:	2002      	movs	r0, #2
 80056e2:	e7ac      	b.n	800563e <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80056e4:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 80056e6:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80056e8:	4290      	cmp	r0, r2
 80056ea:	f67f af77 	bls.w	80055dc <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80056ee:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 80056f2:	e773      	b.n	80055dc <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056f4:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056f6:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 80056fe:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005700:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8005702:	e79c      	b.n	800563e <HAL_DAC_ConfigChannel+0x10a>
 8005704:	09896800 	.word	0x09896800
 8005708:	04c4b400 	.word	0x04c4b400

0800570c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800570c:	2800      	cmp	r0, #0
 800570e:	d076      	beq.n	80057fe <HAL_DMA_Init+0xf2>
{
 8005710:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005712:	4a3c      	ldr	r2, [pc, #240]	@ (8005804 <HAL_DMA_Init+0xf8>)
 8005714:	6804      	ldr	r4, [r0, #0]
 8005716:	4294      	cmp	r4, r2
 8005718:	4603      	mov	r3, r0
 800571a:	d95c      	bls.n	80057d6 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800571c:	493a      	ldr	r1, [pc, #232]	@ (8005808 <HAL_DMA_Init+0xfc>)
 800571e:	4a3b      	ldr	r2, [pc, #236]	@ (800580c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8005720:	483b      	ldr	r0, [pc, #236]	@ (8005810 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005722:	4421      	add	r1, r4
 8005724:	fba2 2101 	umull	r2, r1, r2, r1
 8005728:	0909      	lsrs	r1, r1, #4
 800572a:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800572c:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800572e:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8005730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8005734:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005736:	4e35      	ldr	r6, [pc, #212]	@ (800580c <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005738:	4f36      	ldr	r7, [pc, #216]	@ (8005814 <HAL_DMA_Init+0x108>)
 800573a:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800573e:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8005740:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	4302      	orrs	r2, r0
 8005744:	6958      	ldr	r0, [r3, #20]
 8005746:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005748:	6998      	ldr	r0, [r3, #24]
 800574a:	4302      	orrs	r2, r0
 800574c:	69d8      	ldr	r0, [r3, #28]
 800574e:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005750:	b2e0      	uxtb	r0, r4
 8005752:	3808      	subs	r0, #8
 8005754:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8005758:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800575a:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 800575e:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005760:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005764:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8005766:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 800576a:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800576c:	4e25      	ldr	r6, [pc, #148]	@ (8005804 <HAL_DMA_Init+0xf8>)
 800576e:	4a2a      	ldr	r2, [pc, #168]	@ (8005818 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005770:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005774:	42b4      	cmp	r4, r6
 8005776:	bf98      	it	ls
 8005778:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800577a:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800577e:	2401      	movs	r4, #1
 8005780:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005784:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005786:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800578a:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800578e:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005790:	649e      	str	r6, [r3, #72]	@ 0x48
 8005792:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005796:	d027      	beq.n	80057e8 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005798:	685e      	ldr	r6, [r3, #4]
 800579a:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800579c:	3e01      	subs	r6, #1
 800579e:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057a0:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057a8:	d824      	bhi.n	80057f4 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057aa:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057ac:	481c      	ldr	r0, [pc, #112]	@ (8005820 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057ae:	442a      	add	r2, r5
 80057b0:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057b2:	3d01      	subs	r5, #1
 80057b4:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057b6:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057b8:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057bc:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057be:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_DMA_Init+0x118>)
 80057c2:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c4:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80057c6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c8:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80057ca:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80057ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80057d2:	bcf0      	pop	{r4, r5, r6, r7}
 80057d4:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057d6:	4914      	ldr	r1, [pc, #80]	@ (8005828 <HAL_DMA_Init+0x11c>)
 80057d8:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 80057da:	4814      	ldr	r0, [pc, #80]	@ (800582c <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057dc:	4421      	add	r1, r4
 80057de:	fba2 2101 	umull	r2, r1, r2, r1
 80057e2:	0909      	lsrs	r1, r1, #4
 80057e4:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80057e6:	e7a1      	b.n	800572c <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80057e8:	2400      	movs	r4, #0
 80057ea:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80057ec:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057f0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80057f4:	2200      	movs	r2, #0
 80057f6:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057fc:	e7e2      	b.n	80057c4 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80057fe:	2001      	movs	r0, #1
}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40020407 	.word	0x40020407
 8005808:	bffdfbf8 	.word	0xbffdfbf8
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	40020400 	.word	0x40020400
 8005814:	40020800 	.word	0x40020800
 8005818:	40020820 	.word	0x40020820
 800581c:	1000823f 	.word	0x1000823f
 8005820:	40020940 	.word	0x40020940
 8005824:	40020900 	.word	0x40020900
 8005828:	bffdfff8 	.word	0xbffdfff8
 800582c:	40020000 	.word	0x40020000

08005830 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005830:	680b      	ldr	r3, [r1, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8198 	beq.w	8005b68 <HAL_GPIO_Init+0x338>
{
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8005840:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8005842:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005846:	f04f 0b01 	mov.w	fp, #1
 800584a:	f000 810d 	beq.w	8005a68 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800584e:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8005b9c <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005852:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8005854:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005856:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 800585a:	ea1c 0a03 	ands.w	sl, ip, r3
 800585e:	d077      	beq.n	8005950 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005860:	684d      	ldr	r5, [r1, #4]
 8005862:	f005 0703 	and.w	r7, r5, #3
 8005866:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005868:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800586a:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800586e:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005872:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005876:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800587a:	f240 8119 	bls.w	8005ab0 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800587e:	2f03      	cmp	r7, #3
 8005880:	f040 8179 	bne.w	8005b76 <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005884:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8005888:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800588a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800588c:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800588e:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005892:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005894:	d05c      	beq.n	8005950 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005896:	4ebe      	ldr	r6, [pc, #760]	@ (8005b90 <HAL_GPIO_Init+0x360>)
 8005898:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800589a:	f044 0401 	orr.w	r4, r4, #1
 800589e:	6634      	str	r4, [r6, #96]	@ 0x60
 80058a0:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80058a2:	f004 0401 	and.w	r4, r4, #1
 80058a6:	9403      	str	r4, [sp, #12]
 80058a8:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80058aa:	f022 0403 	bic.w	r4, r2, #3
 80058ae:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b2:	f002 0703 	and.w	r7, r2, #3
 80058b6:	230f      	movs	r3, #15
 80058b8:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80058bc:	00bf      	lsls	r7, r7, #2
 80058be:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c2:	4bb4      	ldr	r3, [pc, #720]	@ (8005b94 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80058c4:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c6:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c8:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058cc:	f000 8140 	beq.w	8005b50 <HAL_GPIO_Init+0x320>
 80058d0:	4bb1      	ldr	r3, [pc, #708]	@ (8005b98 <HAL_GPIO_Init+0x368>)
 80058d2:	4298      	cmp	r0, r3
 80058d4:	f000 812d 	beq.w	8005b32 <HAL_GPIO_Init+0x302>
 80058d8:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8005ba0 <HAL_GPIO_Init+0x370>
 80058dc:	4560      	cmp	r0, ip
 80058de:	f000 813d 	beq.w	8005b5c <HAL_GPIO_Init+0x32c>
 80058e2:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8005ba4 <HAL_GPIO_Init+0x374>
 80058e6:	4560      	cmp	r0, ip
 80058e8:	f000 813f 	beq.w	8005b6a <HAL_GPIO_Init+0x33a>
 80058ec:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8005ba8 <HAL_GPIO_Init+0x378>
 80058f0:	4560      	cmp	r0, ip
 80058f2:	bf0c      	ite	eq
 80058f4:	f04f 0c05 	moveq.w	ip, #5
 80058f8:	f04f 0c06 	movne.w	ip, #6
 80058fc:	fa0c f707 	lsl.w	r7, ip, r7
 8005900:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005902:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8005904:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8005908:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800590c:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 800590e:	bf54      	ite	pl
 8005910:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005912:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8005916:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 800591a:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800591e:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8005920:	bf54      	ite	pl
 8005922:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005924:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8005928:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 800592c:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005930:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8005932:	bf54      	ite	pl
 8005934:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005936:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 800593a:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800593e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005942:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8005944:	bf54      	ite	pl
 8005946:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005948:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 800594c:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005950:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8005952:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005954:	fa33 f402 	lsrs.w	r4, r3, r2
 8005958:	f47f af7c 	bne.w	8005854 <HAL_GPIO_Init+0x24>
  }
}
 800595c:	b005      	add	sp, #20
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005962:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005966:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005968:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 800596c:	fa06 f807 	lsl.w	r8, r6, r7
 8005970:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005974:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005978:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800597c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005980:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8005984:	fa0e fe02 	lsl.w	lr, lr, r2
 8005988:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 800598c:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005990:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005994:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005996:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800599a:	fa06 fe07 	lsl.w	lr, r6, r7
 800599e:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80059a4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a8:	d119      	bne.n	80059de <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 80059aa:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059ae:	690e      	ldr	r6, [r1, #16]
 80059b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059b4:	f002 0807 	and.w	r8, r2, #7
 80059b8:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 80059bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059c0:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 80059c4:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059c8:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059ca:	260f      	movs	r6, #15
 80059cc:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059d0:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059d2:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059d6:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80059da:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059de:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80059e0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059e2:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059e6:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059e8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80059ec:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ee:	d036      	beq.n	8005a5e <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f0:	4f67      	ldr	r7, [pc, #412]	@ (8005b90 <HAL_GPIO_Init+0x360>)
 80059f2:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80059f4:	f044 0401 	orr.w	r4, r4, #1
 80059f8:	663c      	str	r4, [r7, #96]	@ 0x60
 80059fa:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80059fc:	f004 0401 	and.w	r4, r4, #1
 8005a00:	9403      	str	r4, [sp, #12]
 8005a02:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005a04:	f022 0403 	bic.w	r4, r2, #3
 8005a08:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8005a0c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a10:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005a14:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a18:	260f      	movs	r6, #15
 8005a1a:	00bf      	lsls	r7, r7, #2
 8005a1c:	fa06 f707 	lsl.w	r7, r6, r7
 8005a20:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a24:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8005a26:	4c5d      	ldr	r4, [pc, #372]	@ (8005b9c <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a28:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8005a2a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8005a2c:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a30:	d47c      	bmi.n	8005b2c <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8005a32:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8005a34:	4e59      	ldr	r6, [pc, #356]	@ (8005b9c <HAL_GPIO_Init+0x36c>)
 8005a36:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8005a38:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a3a:	02ae      	lsls	r6, r5, #10
 8005a3c:	f100 8085 	bmi.w	8005b4a <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8005a40:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 8005a42:	4e56      	ldr	r6, [pc, #344]	@ (8005b9c <HAL_GPIO_Init+0x36c>)
 8005a44:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8005a46:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a48:	03ae      	lsls	r6, r5, #14
 8005a4a:	d47b      	bmi.n	8005b44 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8005a4c:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8005a4e:	4e53      	ldr	r6, [pc, #332]	@ (8005b9c <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a50:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8005a52:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8005a54:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a56:	d472      	bmi.n	8005b3e <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8005a58:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8005a5a:	4d50      	ldr	r5, [pc, #320]	@ (8005b9c <HAL_GPIO_Init+0x36c>)
 8005a5c:	602c      	str	r4, [r5, #0]
    position++;
 8005a5e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005a60:	fa33 f402 	lsrs.w	r4, r3, r2
 8005a64:	f43f af7a 	beq.w	800595c <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005a68:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8005a6c:	ea13 0c0e 	ands.w	ip, r3, lr
 8005a70:	d0f5      	beq.n	8005a5e <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a72:	684d      	ldr	r5, [r1, #4]
 8005a74:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a76:	2603      	movs	r6, #3
 8005a78:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a7c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a80:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005a84:	f104 38ff 	add.w	r8, r4, #4294967295
 8005a88:	f1b8 0f01 	cmp.w	r8, #1
 8005a8c:	f67f af69 	bls.w	8005962 <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a90:	2c03      	cmp	r4, #3
 8005a92:	d0a4      	beq.n	80059de <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8005a94:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a98:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8005a9a:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a9e:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005aa2:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aa6:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8005aaa:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aae:	e796      	b.n	80059de <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8005ab0:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ab4:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ab6:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aba:	fa03 f804 	lsl.w	r8, r3, r4
 8005abe:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8005ac2:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005ac6:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aca:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005acc:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad0:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8005ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8005ad8:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8005adc:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8005ae0:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ae4:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ae8:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aec:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af0:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8005af2:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005af6:	f47f aec5 	bne.w	8005884 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005afa:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8005afc:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b00:	f002 0c07 	and.w	ip, r2, #7
 8005b04:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8005b08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b0c:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8005b10:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b14:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b16:	230f      	movs	r3, #15
 8005b18:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b1c:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b1e:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005b22:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005b26:	f8c8 c020 	str.w	ip, [r8, #32]
 8005b2a:	e6ab      	b.n	8005884 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8005b2c:	ea44 040c 	orr.w	r4, r4, ip
 8005b30:	e780      	b.n	8005a34 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b32:	f04f 0c02 	mov.w	ip, #2
 8005b36:	fa0c f707 	lsl.w	r7, ip, r7
 8005b3a:	433e      	orrs	r6, r7
 8005b3c:	e6e1      	b.n	8005902 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8005b3e:	ea4c 0404 	orr.w	r4, ip, r4
 8005b42:	e78a      	b.n	8005a5a <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8005b44:	ea44 040c 	orr.w	r4, r4, ip
 8005b48:	e781      	b.n	8005a4e <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8005b4a:	ea4c 0404 	orr.w	r4, ip, r4
 8005b4e:	e778      	b.n	8005a42 <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b50:	f04f 0c01 	mov.w	ip, #1
 8005b54:	fa0c f707 	lsl.w	r7, ip, r7
 8005b58:	433e      	orrs	r6, r7
 8005b5a:	e6d2      	b.n	8005902 <HAL_GPIO_Init+0xd2>
 8005b5c:	f04f 0c03 	mov.w	ip, #3
 8005b60:	fa0c f707 	lsl.w	r7, ip, r7
 8005b64:	433e      	orrs	r6, r7
 8005b66:	e6cc      	b.n	8005902 <HAL_GPIO_Init+0xd2>
 8005b68:	4770      	bx	lr
 8005b6a:	f04f 0c04 	mov.w	ip, #4
 8005b6e:	fa0c f707 	lsl.w	r7, ip, r7
 8005b72:	433e      	orrs	r6, r7
 8005b74:	e6c5      	b.n	8005902 <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8005b76:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7a:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b7c:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b80:	fa03 fc04 	lsl.w	ip, r3, r4
 8005b84:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8005b88:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8c:	e67a      	b.n	8005884 <HAL_GPIO_Init+0x54>
 8005b8e:	bf00      	nop
 8005b90:	40021000 	.word	0x40021000
 8005b94:	48000400 	.word	0x48000400
 8005b98:	48000800 	.word	0x48000800
 8005b9c:	40010400 	.word	0x40010400
 8005ba0:	48000c00 	.word	0x48000c00
 8005ba4:	48001000 	.word	0x48001000
 8005ba8:	48001400 	.word	0x48001400

08005bac <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005bac:	2800      	cmp	r0, #0
 8005bae:	d06f      	beq.n	8005c90 <HAL_OPAMP_Init+0xe4>
{
 8005bb0:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005bb2:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005bb6:	2b05      	cmp	r3, #5
{
 8005bb8:	b083      	sub	sp, #12
 8005bba:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005bbc:	d056      	beq.n	8005c6c <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005bbe:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d052      	beq.n	8005c6c <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bc6:	4b33      	ldr	r3, [pc, #204]	@ (8005c94 <HAL_OPAMP_Init+0xe8>)
 8005bc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	661a      	str	r2, [r3, #96]	@ 0x60
 8005bd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	9301      	str	r3, [sp, #4]
 8005bd8:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005bda:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8005bde:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005be2:	b90b      	cbnz	r3, 8005be8 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8005be4:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7fd fa1d 	bl	8003028 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005bee:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8005bf0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005bf2:	f023 0220 	bic.w	r2, r3, #32
 8005bf6:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8005bf8:	6822      	ldr	r2, [r4, #0]
 8005bfa:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8005bfc:	d039      	beq.n	8005c72 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8005bfe:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005c00:	f021 0110 	bic.w	r1, r1, #16
 8005c04:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005c06:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8005c08:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005c0a:	432b      	orrs	r3, r5
 8005c0c:	4303      	orrs	r3, r0
 8005c0e:	6920      	ldr	r0, [r4, #16]
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	4303      	orrs	r3, r0
 8005c14:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005c16:	4303      	orrs	r3, r0
 8005c18:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005c1a:	4303      	orrs	r3, r0
 8005c1c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005c1e:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8005c22:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005c24:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005c28:	481b      	ldr	r0, [pc, #108]	@ (8005c98 <HAL_OPAMP_Init+0xec>)
 8005c2a:	4008      	ands	r0, r1
 8005c2c:	7d21      	ldrb	r1, [r4, #20]
 8005c2e:	f1a1 0101 	sub.w	r1, r1, #1
 8005c32:	fab1 f181 	clz	r1, r1
 8005c36:	4303      	orrs	r3, r0
 8005c38:	0949      	lsrs	r1, r1, #5
 8005c3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c3e:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005c40:	6993      	ldr	r3, [r2, #24]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	db09      	blt.n	8005c5a <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8005c46:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005c4a:	6991      	ldr	r1, [r2, #24]
 8005c4c:	4303      	orrs	r3, r0
 8005c4e:	6a20      	ldr	r0, [r4, #32]
 8005c50:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005c54:	4303      	orrs	r3, r0
 8005c56:	430b      	orrs	r3, r1
 8005c58:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005c5a:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8005c5e:	b913      	cbnz	r3, 8005c66 <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8005c66:	2000      	movs	r0, #0
  }
}
 8005c68:	b003      	add	sp, #12
 8005c6a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005c6c:	2001      	movs	r0, #1
}
 8005c6e:	b003      	add	sp, #12
 8005c70:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8005c72:	f021 0110 	bic.w	r1, r1, #16
 8005c76:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005c78:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005c7a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005c7c:	4303      	orrs	r3, r0
 8005c7e:	6920      	ldr	r0, [r4, #16]
 8005c80:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005c82:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8005c84:	4303      	orrs	r3, r0
 8005c86:	430b      	orrs	r3, r1
 8005c88:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005c8a:	6811      	ldr	r1, [r2, #0]
 8005c8c:	432b      	orrs	r3, r5
 8005c8e:	e7c6      	b.n	8005c1e <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8005c90:	2001      	movs	r0, #1
}
 8005c92:	4770      	bx	lr
 8005c94:	40021000 	.word	0x40021000
 8005c98:	e0003e11 	.word	0xe0003e11

08005c9c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c9c:	4a35      	ldr	r2, [pc, #212]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005c9e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ca0:	b960      	cbnz	r0, 8005cbc <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ca2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005caa:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cae:	d01b      	beq.n	8005ce8 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cb8:	2000      	movs	r0, #0
}
 8005cba:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cbc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005cc0:	d006      	beq.n	8005cd0 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005cc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005ccc:	2000      	movs	r0, #0
}
 8005cce:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cd8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cdc:	d029      	beq.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ce2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ce6:	e7f1      	b.n	8005ccc <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cf2:	4821      	ldr	r0, [pc, #132]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005cf4:	4921      	ldr	r1, [pc, #132]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cfe:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d00:	6803      	ldr	r3, [r0, #0]
 8005d02:	2032      	movs	r0, #50	@ 0x32
 8005d04:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d08:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d0a:	fba1 1303 	umull	r1, r3, r1, r3
 8005d0e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d10:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d12:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d16:	d506      	bpl.n	8005d26 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005d18:	e000      	b.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x80>
 8005d1a:	b123      	cbz	r3, 8005d26 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005d1c:	6951      	ldr	r1, [r2, #20]
 8005d1e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005d20:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d24:	d4f9      	bmi.n	8005d1a <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d26:	4b13      	ldr	r3, [pc, #76]	@ (8005d74 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	055b      	lsls	r3, r3, #21
 8005d2c:	d5ce      	bpl.n	8005ccc <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8005d2e:	2003      	movs	r0, #3
 8005d30:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d36:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d3a:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d3c:	480e      	ldr	r0, [pc, #56]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005d3e:	490f      	ldr	r1, [pc, #60]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d48:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d4a:	6803      	ldr	r3, [r0, #0]
 8005d4c:	2032      	movs	r0, #50	@ 0x32
 8005d4e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d52:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d54:	fba1 1303 	umull	r1, r3, r1, r3
 8005d58:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d5a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d5c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d60:	d5e1      	bpl.n	8005d26 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005d62:	e001      	b.n	8005d68 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0de      	beq.n	8005d26 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005d68:	6951      	ldr	r1, [r2, #20]
 8005d6a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005d6c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d70:	d5d9      	bpl.n	8005d26 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005d72:	e7f7      	b.n	8005d64 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005d74:	40007000 	.word	0x40007000
 8005d78:	200004e0 	.word	0x200004e0
 8005d7c:	431bde83 	.word	0x431bde83

08005d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d80:	4a02      	ldr	r2, [pc, #8]	@ (8005d8c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005d82:	6893      	ldr	r3, [r2, #8]
 8005d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d88:	6093      	str	r3, [r2, #8]
}
 8005d8a:	4770      	bx	lr
 8005d8c:	40007000 	.word	0x40007000

08005d90 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f000 81bd 	beq.w	8006110 <HAL_RCC_OscConfig+0x380>
{
 8005d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9a:	6803      	ldr	r3, [r0, #0]
 8005d9c:	07d9      	lsls	r1, r3, #31
{
 8005d9e:	b082      	sub	sp, #8
 8005da0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	d512      	bpl.n	8005dca <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da4:	49a6      	ldr	r1, [pc, #664]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005da6:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005daa:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dae:	2a0c      	cmp	r2, #12
 8005db0:	f000 80d0 	beq.w	8005f54 <HAL_RCC_OscConfig+0x1c4>
 8005db4:	2a08      	cmp	r2, #8
 8005db6:	f040 80d2 	bne.w	8005f5e <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dba:	4aa1      	ldr	r2, [pc, #644]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	0392      	lsls	r2, r2, #14
 8005dc0:	d503      	bpl.n	8005dca <HAL_RCC_OscConfig+0x3a>
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	f000 8137 	beq.w	8006038 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dca:	079a      	lsls	r2, r3, #30
 8005dcc:	d522      	bpl.n	8005e14 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dce:	4a9c      	ldr	r2, [pc, #624]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005dd0:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd2:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd4:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	f000 80f8 	beq.w	8005fce <HAL_RCC_OscConfig+0x23e>
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	f040 80fa 	bne.w	8005fd8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	4b96      	ldr	r3, [pc, #600]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	055b      	lsls	r3, r3, #21
 8005dea:	d503      	bpl.n	8005df4 <HAL_RCC_OscConfig+0x64>
 8005dec:	68e3      	ldr	r3, [r4, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8122 	beq.w	8006038 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df4:	4a92      	ldr	r2, [pc, #584]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005df6:	6920      	ldr	r0, [r4, #16]
 8005df8:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005dfa:	4992      	ldr	r1, [pc, #584]	@ (8006044 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dfc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005e00:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e04:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e06:	6808      	ldr	r0, [r1, #0]
 8005e08:	f7fe fb20 	bl	800444c <HAL_InitTick>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f040 8113 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	071a      	lsls	r2, r3, #28
 8005e16:	d519      	bpl.n	8005e4c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e18:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1a:	4d89      	ldr	r5, [pc, #548]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80c2 	beq.w	8005fa6 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8005e22:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fe fb57 	bl	80044e0 <HAL_GetTick>
 8005e32:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e34:	e005      	b.n	8005e42 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fe fb53 	bl	80044e0 <HAL_GetTick>
 8005e3a:	1b80      	subs	r0, r0, r6
 8005e3c:	2802      	cmp	r0, #2
 8005e3e:	f200 8117 	bhi.w	8006070 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e42:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005e46:	079b      	lsls	r3, r3, #30
 8005e48:	d5f5      	bpl.n	8005e36 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	075d      	lsls	r5, r3, #29
 8005e4e:	d541      	bpl.n	8005ed4 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e50:	4b7b      	ldr	r3, [pc, #492]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005e52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e54:	00d0      	lsls	r0, r2, #3
 8005e56:	f100 810f 	bmi.w	8006078 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e60:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005e6c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6e:	4e76      	ldr	r6, [pc, #472]	@ (8006048 <HAL_RCC_OscConfig+0x2b8>)
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	05d9      	lsls	r1, r3, #23
 8005e74:	f140 812e 	bpl.w	80060d4 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f000 80fe 	beq.w	800607c <HAL_RCC_OscConfig+0x2ec>
 8005e80:	2b05      	cmp	r3, #5
 8005e82:	f000 8184 	beq.w	800618e <HAL_RCC_OscConfig+0x3fe>
 8005e86:	4e6e      	ldr	r6, [pc, #440]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005e88:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005e8c:	f022 0201 	bic.w	r2, r2, #1
 8005e90:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005e94:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005e98:	f022 0204 	bic.w	r2, r2, #4
 8005e9c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f040 80f2 	bne.w	800608a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea6:	f7fe fb1b 	bl	80044e0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005eae:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005eb0:	e005      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb2:	f7fe fb15 	bl	80044e0 <HAL_GetTick>
 8005eb6:	1bc0      	subs	r0, r0, r7
 8005eb8:	4540      	cmp	r0, r8
 8005eba:	f200 80d9 	bhi.w	8006070 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ebe:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005ec2:	0799      	lsls	r1, r3, #30
 8005ec4:	d4f5      	bmi.n	8005eb2 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec6:	b125      	cbz	r5, 8005ed2 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec8:	4a5d      	ldr	r2, [pc, #372]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005eca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	069a      	lsls	r2, r3, #26
 8005ed6:	d518      	bpl.n	8005f0a <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ed8:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005eda:	4d59      	ldr	r5, [pc, #356]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80e5 	beq.w	80060ac <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8005ee2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fe faf7 	bl	80044e0 <HAL_GetTick>
 8005ef2:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ef4:	e005      	b.n	8005f02 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ef6:	f7fe faf3 	bl	80044e0 <HAL_GetTick>
 8005efa:	1b80      	subs	r0, r0, r6
 8005efc:	2802      	cmp	r0, #2
 8005efe:	f200 80b7 	bhi.w	8006070 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f02:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005f06:	079b      	lsls	r3, r3, #30
 8005f08:	d5f5      	bpl.n	8005ef6 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f0a:	69e3      	ldr	r3, [r4, #28]
 8005f0c:	b1f3      	cbz	r3, 8005f4c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f0e:	4d4c      	ldr	r5, [pc, #304]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f10:	68aa      	ldr	r2, [r5, #8]
 8005f12:	f002 020c 	and.w	r2, r2, #12
 8005f16:	2a0c      	cmp	r2, #12
 8005f18:	f000 8147 	beq.w	80061aa <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f1c:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f24:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f26:	f000 80f5 	beq.w	8006114 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2a:	f7fe fad9 	bl	80044e0 <HAL_GetTick>
 8005f2e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f30:	e005      	b.n	8005f3e <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fe fad5 	bl	80044e0 <HAL_GetTick>
 8005f36:	1b00      	subs	r0, r0, r4
 8005f38:	2802      	cmp	r0, #2
 8005f3a:	f200 8099 	bhi.w	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f3e:	682b      	ldr	r3, [r5, #0]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	d4f6      	bmi.n	8005f32 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f44:	68ea      	ldr	r2, [r5, #12]
 8005f46:	4b41      	ldr	r3, [pc, #260]	@ (800604c <HAL_RCC_OscConfig+0x2bc>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8005f4c:	2000      	movs	r0, #0
}
 8005f4e:	b002      	add	sp, #8
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f54:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f58:	2903      	cmp	r1, #3
 8005f5a:	f43f af2e 	beq.w	8005dba <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f64:	d055      	beq.n	8006012 <HAL_RCC_OscConfig+0x282>
 8005f66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f6a:	f000 80c4 	beq.w	80060f6 <HAL_RCC_OscConfig+0x366>
 8005f6e:	4d34      	ldr	r5, [pc, #208]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f70:	682a      	ldr	r2, [r5, #0]
 8005f72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f76:	602a      	str	r2, [r5, #0]
 8005f78:	682a      	ldr	r2, [r5, #0]
 8005f7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f7e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d14b      	bne.n	800601c <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8005f84:	f7fe faac 	bl	80044e0 <HAL_GetTick>
 8005f88:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f8a:	e004      	b.n	8005f96 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f8c:	f7fe faa8 	bl	80044e0 <HAL_GetTick>
 8005f90:	1b80      	subs	r0, r0, r6
 8005f92:	2864      	cmp	r0, #100	@ 0x64
 8005f94:	d86c      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f96:	682b      	ldr	r3, [r5, #0]
 8005f98:	0399      	lsls	r1, r3, #14
 8005f9a:	d4f7      	bmi.n	8005f8c <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	079a      	lsls	r2, r3, #30
 8005fa0:	f57f af38 	bpl.w	8005e14 <HAL_RCC_OscConfig+0x84>
 8005fa4:	e713      	b.n	8005dce <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8005fa6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005fb2:	f7fe fa95 	bl	80044e0 <HAL_GetTick>
 8005fb6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb8:	e004      	b.n	8005fc4 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fe fa91 	bl	80044e0 <HAL_GetTick>
 8005fbe:	1b80      	subs	r0, r0, r6
 8005fc0:	2802      	cmp	r0, #2
 8005fc2:	d855      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fc4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005fc8:	079f      	lsls	r7, r3, #30
 8005fca:	d4f6      	bmi.n	8005fba <HAL_RCC_OscConfig+0x22a>
 8005fcc:	e73d      	b.n	8005e4a <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fce:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fd2:	2a02      	cmp	r2, #2
 8005fd4:	f43f af06 	beq.w	8005de4 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fd8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005fda:	4d19      	ldr	r5, [pc, #100]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d037      	beq.n	8006050 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005fe8:	f7fe fa7a 	bl	80044e0 <HAL_GetTick>
 8005fec:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fee:	e004      	b.n	8005ffa <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fe fa76 	bl	80044e0 <HAL_GetTick>
 8005ff4:	1b80      	subs	r0, r0, r6
 8005ff6:	2802      	cmp	r0, #2
 8005ff8:	d83a      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	055f      	lsls	r7, r3, #21
 8005ffe:	d5f7      	bpl.n	8005ff0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	686b      	ldr	r3, [r5, #4]
 8006002:	6922      	ldr	r2, [r4, #16]
 8006004:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006008:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800600c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	e700      	b.n	8005e14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006012:	4a0b      	ldr	r2, [pc, #44]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8006014:	6813      	ldr	r3, [r2, #0]
 8006016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800601a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800601c:	f7fe fa60 	bl	80044e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006020:	4e07      	ldr	r6, [pc, #28]	@ (8006040 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006022:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006024:	e004      	b.n	8006030 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006026:	f7fe fa5b 	bl	80044e0 <HAL_GetTick>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	2864      	cmp	r0, #100	@ 0x64
 800602e:	d81f      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006030:	6833      	ldr	r3, [r6, #0]
 8006032:	039f      	lsls	r7, r3, #14
 8006034:	d5f7      	bpl.n	8006026 <HAL_RCC_OscConfig+0x296>
 8006036:	e7b1      	b.n	8005f9c <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8006038:	2001      	movs	r0, #1
}
 800603a:	b002      	add	sp, #8
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	40021000 	.word	0x40021000
 8006044:	200004e8 	.word	0x200004e8
 8006048:	40007000 	.word	0x40007000
 800604c:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006056:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006058:	f7fe fa42 	bl	80044e0 <HAL_GetTick>
 800605c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800605e:	682b      	ldr	r3, [r5, #0]
 8006060:	0559      	lsls	r1, r3, #21
 8006062:	f57f aed6 	bpl.w	8005e12 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006066:	f7fe fa3b 	bl	80044e0 <HAL_GetTick>
 800606a:	1b80      	subs	r0, r0, r6
 800606c:	2802      	cmp	r0, #2
 800606e:	d9f6      	bls.n	800605e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8006070:	2003      	movs	r0, #3
}
 8006072:	b002      	add	sp, #8
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8006078:	2500      	movs	r5, #0
 800607a:	e6f8      	b.n	8005e6e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607c:	4a65      	ldr	r2, [pc, #404]	@ (8006214 <HAL_RCC_OscConfig+0x484>)
 800607e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800608a:	f7fe fa29 	bl	80044e0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800608e:	4f61      	ldr	r7, [pc, #388]	@ (8006214 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8006090:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006092:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006096:	e004      	b.n	80060a2 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006098:	f7fe fa22 	bl	80044e0 <HAL_GetTick>
 800609c:	1b80      	subs	r0, r0, r6
 800609e:	4540      	cmp	r0, r8
 80060a0:	d8e6      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80060a6:	079b      	lsls	r3, r3, #30
 80060a8:	d5f6      	bpl.n	8006098 <HAL_RCC_OscConfig+0x308>
 80060aa:	e70c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 80060ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80060b8:	f7fe fa12 	bl	80044e0 <HAL_GetTick>
 80060bc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060be:	e004      	b.n	80060ca <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060c0:	f7fe fa0e 	bl	80044e0 <HAL_GetTick>
 80060c4:	1b80      	subs	r0, r0, r6
 80060c6:	2802      	cmp	r0, #2
 80060c8:	d8d2      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060ca:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80060ce:	079f      	lsls	r7, r3, #30
 80060d0:	d4f6      	bmi.n	80060c0 <HAL_RCC_OscConfig+0x330>
 80060d2:	e71a      	b.n	8005f0a <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060d4:	6833      	ldr	r3, [r6, #0]
 80060d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80060dc:	f7fe fa00 	bl	80044e0 <HAL_GetTick>
 80060e0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060e2:	6833      	ldr	r3, [r6, #0]
 80060e4:	05da      	lsls	r2, r3, #23
 80060e6:	f53f aec7 	bmi.w	8005e78 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ea:	f7fe f9f9 	bl	80044e0 <HAL_GetTick>
 80060ee:	1bc0      	subs	r0, r0, r7
 80060f0:	2802      	cmp	r0, #2
 80060f2:	d9f6      	bls.n	80060e2 <HAL_RCC_OscConfig+0x352>
 80060f4:	e7bc      	b.n	8006070 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fa:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800610c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800610e:	e785      	b.n	800601c <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8006110:	2001      	movs	r0, #1
}
 8006112:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8006114:	f7fe f9e4 	bl	80044e0 <HAL_GetTick>
 8006118:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800611a:	e004      	b.n	8006126 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611c:	f7fe f9e0 	bl	80044e0 <HAL_GetTick>
 8006120:	1b80      	subs	r0, r0, r6
 8006122:	2802      	cmp	r0, #2
 8006124:	d8a4      	bhi.n	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	0199      	lsls	r1, r3, #6
 800612a:	d4f7      	bmi.n	800611c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800612c:	68e9      	ldr	r1, [r5, #12]
 800612e:	4b3a      	ldr	r3, [pc, #232]	@ (8006218 <HAL_RCC_OscConfig+0x488>)
 8006130:	6a22      	ldr	r2, [r4, #32]
 8006132:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006134:	400b      	ands	r3, r1
 8006136:	4313      	orrs	r3, r2
 8006138:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800613c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006140:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8006144:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8006148:	3801      	subs	r0, #1
 800614a:	0849      	lsrs	r1, r1, #1
 800614c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8006150:	3901      	subs	r1, #1
 8006152:	0852      	lsrs	r2, r2, #1
 8006154:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8006158:	3a01      	subs	r2, #1
 800615a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800615e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006166:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006168:	68eb      	ldr	r3, [r5, #12]
 800616a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800616e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8006170:	f7fe f9b6 	bl	80044e0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006174:	4d27      	ldr	r5, [pc, #156]	@ (8006214 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8006176:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006178:	e005      	b.n	8006186 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617a:	f7fe f9b1 	bl	80044e0 <HAL_GetTick>
 800617e:	1b00      	subs	r0, r0, r4
 8006180:	2802      	cmp	r0, #2
 8006182:	f63f af75 	bhi.w	8006070 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	019a      	lsls	r2, r3, #6
 800618a:	d5f6      	bpl.n	800617a <HAL_RCC_OscConfig+0x3ea>
 800618c:	e6de      	b.n	8005f4c <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800618e:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_RCC_OscConfig+0x484>)
 8006190:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006194:	f042 0204 	orr.w	r2, r2, #4
 8006198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800619c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80061a0:	f042 0201 	orr.w	r2, r2, #1
 80061a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a8:	e76f      	b.n	800608a <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	f43f af44 	beq.w	8006038 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 80061b0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b2:	6a22      	ldr	r2, [r4, #32]
 80061b4:	f003 0103 	and.w	r1, r3, #3
 80061b8:	4291      	cmp	r1, r2
 80061ba:	f47f af3d 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80061c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80061c4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80061ca:	f47f af35 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80061d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061d4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80061d8:	f47f af2e 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061dc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061e2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80061e6:	f47f af27 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80061ec:	0852      	lsrs	r2, r2, #1
 80061ee:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80061f2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061f4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80061f8:	f47f af1e 	bne.w	8006038 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061fc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80061fe:	0852      	lsrs	r2, r2, #1
 8006200:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8006204:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006206:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800620a:	bf14      	ite	ne
 800620c:	2001      	movne	r0, #1
 800620e:	2000      	moveq	r0, #0
 8006210:	e69d      	b.n	8005f4e <HAL_RCC_OscConfig+0x1be>
 8006212:	bf00      	nop
 8006214:	40021000 	.word	0x40021000
 8006218:	019f800c 	.word	0x019f800c

0800621c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800621c:	4b18      	ldr	r3, [pc, #96]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x64>)
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	f002 020c 	and.w	r2, r2, #12
 8006224:	2a04      	cmp	r2, #4
 8006226:	d026      	beq.n	8006276 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	f002 020c 	and.w	r2, r2, #12
 800622e:	2a08      	cmp	r2, #8
 8006230:	d023      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	f002 020c 	and.w	r2, r2, #12
 8006238:	2a0c      	cmp	r2, #12
 800623a:	d001      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800623c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800623e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006240:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006242:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006244:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006246:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800624a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800624c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006250:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006254:	bf0c      	ite	eq
 8006256:	4b0b      	ldreq	r3, [pc, #44]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006258:	4b0b      	ldrne	r3, [pc, #44]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800625a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800625c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006260:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006264:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCC_GetSysClockFreq+0x64>)
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800626c:	3301      	adds	r3, #1
 800626e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8006270:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8006274:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8006276:	4804      	ldr	r0, [pc, #16]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006278:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800627a:	4802      	ldr	r0, [pc, #8]	@ (8006284 <HAL_RCC_GetSysClockFreq+0x68>)
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000
 8006284:	007a1200 	.word	0x007a1200
 8006288:	00f42400 	.word	0x00f42400

0800628c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800628c:	2800      	cmp	r0, #0
 800628e:	f000 80ee 	beq.w	800646e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006292:	4a78      	ldr	r2, [pc, #480]	@ (8006474 <HAL_RCC_ClockConfig+0x1e8>)
{
 8006294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006298:	6813      	ldr	r3, [r2, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	428b      	cmp	r3, r1
 80062a0:	460d      	mov	r5, r1
 80062a2:	4604      	mov	r4, r0
 80062a4:	d20c      	bcs.n	80062c0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	f023 030f 	bic.w	r3, r3, #15
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b0:	6813      	ldr	r3, [r2, #0]
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	428b      	cmp	r3, r1
 80062b8:	d002      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80062ba:	2001      	movs	r0, #1
}
 80062bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	07df      	lsls	r7, r3, #31
 80062c4:	d569      	bpl.n	800639a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c6:	6867      	ldr	r7, [r4, #4]
 80062c8:	2f03      	cmp	r7, #3
 80062ca:	f000 80a0 	beq.w	800640e <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062d2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d4:	f000 8097 	beq.w	8006406 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062d8:	055b      	lsls	r3, r3, #21
 80062da:	d5ee      	bpl.n	80062ba <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062dc:	f7ff ff9e 	bl	800621c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80062e0:	4b66      	ldr	r3, [pc, #408]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
 80062e2:	4298      	cmp	r0, r3
 80062e4:	f240 80c0 	bls.w	8006468 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062e8:	4a63      	ldr	r2, [pc, #396]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 80062ea:	6893      	ldr	r3, [r2, #8]
 80062ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062f6:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062fa:	4e5f      	ldr	r6, [pc, #380]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 80062fc:	68b3      	ldr	r3, [r6, #8]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	433b      	orrs	r3, r7
 8006304:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006306:	f7fe f8eb 	bl	80044e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800630a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800630e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006310:	e004      	b.n	800631c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006312:	f7fe f8e5 	bl	80044e0 <HAL_GetTick>
 8006316:	1bc0      	subs	r0, r0, r7
 8006318:	4540      	cmp	r0, r8
 800631a:	d871      	bhi.n	8006400 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631c:	68b3      	ldr	r3, [r6, #8]
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006328:	d1f3      	bne.n	8006312 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	079f      	lsls	r7, r3, #30
 800632e:	d436      	bmi.n	800639e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	d003      	beq.n	800633e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006336:	68b3      	ldr	r3, [r6, #8]
 8006338:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800633c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800633e:	4e4d      	ldr	r6, [pc, #308]	@ (8006474 <HAL_RCC_ClockConfig+0x1e8>)
 8006340:	6833      	ldr	r3, [r6, #0]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	42ab      	cmp	r3, r5
 8006348:	d846      	bhi.n	80063d8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	075a      	lsls	r2, r3, #29
 800634e:	d506      	bpl.n	800635e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006350:	4949      	ldr	r1, [pc, #292]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 8006352:	68e0      	ldr	r0, [r4, #12]
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800635a:	4302      	orrs	r2, r0
 800635c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635e:	071b      	lsls	r3, r3, #28
 8006360:	d507      	bpl.n	8006372 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006362:	4a45      	ldr	r2, [pc, #276]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 8006364:	6921      	ldr	r1, [r4, #16]
 8006366:	6893      	ldr	r3, [r2, #8]
 8006368:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800636c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006370:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006372:	f7ff ff53 	bl	800621c <HAL_RCC_GetSysClockFreq>
 8006376:	4a40      	ldr	r2, [pc, #256]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 8006378:	4c41      	ldr	r4, [pc, #260]	@ (8006480 <HAL_RCC_ClockConfig+0x1f4>)
 800637a:	6892      	ldr	r2, [r2, #8]
 800637c:	4941      	ldr	r1, [pc, #260]	@ (8006484 <HAL_RCC_ClockConfig+0x1f8>)
 800637e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006382:	4603      	mov	r3, r0
 8006384:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8006386:	4840      	ldr	r0, [pc, #256]	@ (8006488 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006388:	f002 021f 	and.w	r2, r2, #31
 800638c:	40d3      	lsrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8006390:	6800      	ldr	r0, [r0, #0]
}
 8006392:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8006396:	f7fe b859 	b.w	800444c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639a:	079e      	lsls	r6, r3, #30
 800639c:	d5cf      	bpl.n	800633e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639e:	0758      	lsls	r0, r3, #29
 80063a0:	d504      	bpl.n	80063ac <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a2:	4935      	ldr	r1, [pc, #212]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 80063a4:	688a      	ldr	r2, [r1, #8]
 80063a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80063aa:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ac:	0719      	lsls	r1, r3, #28
 80063ae:	d506      	bpl.n	80063be <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063b0:	4a31      	ldr	r2, [pc, #196]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 80063b2:	6893      	ldr	r3, [r2, #8]
 80063b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063b8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063bc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063be:	4a2e      	ldr	r2, [pc, #184]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 80063c0:	68a1      	ldr	r1, [r4, #8]
 80063c2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063c4:	4e2b      	ldr	r6, [pc, #172]	@ (8006474 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ca:	430b      	orrs	r3, r1
 80063cc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063ce:	6833      	ldr	r3, [r6, #0]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	d9b8      	bls.n	800634a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	f023 030f 	bic.w	r3, r3, #15
 80063de:	432b      	orrs	r3, r5
 80063e0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80063e2:	f7fe f87d 	bl	80044e0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80063ea:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	42ab      	cmp	r3, r5
 80063f4:	d0a9      	beq.n	800634a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063f6:	f7fe f873 	bl	80044e0 <HAL_GetTick>
 80063fa:	1bc0      	subs	r0, r0, r7
 80063fc:	4540      	cmp	r0, r8
 80063fe:	d9f5      	bls.n	80063ec <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8006400:	2003      	movs	r0, #3
}
 8006402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006406:	039a      	lsls	r2, r3, #14
 8006408:	f53f af68 	bmi.w	80062dc <HAL_RCC_ClockConfig+0x50>
 800640c:	e755      	b.n	80062ba <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800640e:	4a1a      	ldr	r2, [pc, #104]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
 8006410:	6811      	ldr	r1, [r2, #0]
 8006412:	0188      	lsls	r0, r1, #6
 8006414:	f57f af51 	bpl.w	80062ba <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006418:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800641a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800641c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800641e:	4e17      	ldr	r6, [pc, #92]	@ (800647c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006420:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8006424:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006426:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800642a:	bf0c      	ite	eq
 800642c:	4817      	ldreq	r0, [pc, #92]	@ (800648c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800642e:	4818      	ldrne	r0, [pc, #96]	@ (8006490 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006430:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006432:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006436:	4810      	ldr	r0, [pc, #64]	@ (8006478 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006438:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800643c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006440:	68c1      	ldr	r1, [r0, #12]
 8006442:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8006446:	3101      	adds	r1, #1
 8006448:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800644a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800644e:	42b2      	cmp	r2, r6
 8006450:	d90a      	bls.n	8006468 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006452:	6882      	ldr	r2, [r0, #8]
 8006454:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8006458:	f43f af46 	beq.w	80062e8 <HAL_RCC_ClockConfig+0x5c>
 800645c:	0799      	lsls	r1, r3, #30
 800645e:	d503      	bpl.n	8006468 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f43f af40 	beq.w	80062e8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	e745      	b.n	80062fa <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800646e:	2001      	movs	r0, #1
}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40022000 	.word	0x40022000
 8006478:	40021000 	.word	0x40021000
 800647c:	04c4b400 	.word	0x04c4b400
 8006480:	080097a8 	.word	0x080097a8
 8006484:	200004e0 	.word	0x200004e0
 8006488:	200004e8 	.word	0x200004e8
 800648c:	007a1200 	.word	0x007a1200
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8006494:	4b01      	ldr	r3, [pc, #4]	@ (800649c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200004e0 	.word	0x200004e0

080064a0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064a0:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80064a2:	4a06      	ldr	r2, [pc, #24]	@ (80064bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80064a4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80064a6:	4906      	ldr	r1, [pc, #24]	@ (80064c0 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80064ac:	6808      	ldr	r0, [r1, #0]
 80064ae:	5cd3      	ldrb	r3, [r2, r3]
 80064b0:	f003 031f 	and.w	r3, r3, #31
}
 80064b4:	40d8      	lsrs	r0, r3
 80064b6:	4770      	bx	lr
 80064b8:	40021000 	.word	0x40021000
 80064bc:	080097a0 	.word	0x080097a0
 80064c0:	200004e0 	.word	0x200004e0

080064c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80064c6:	4a06      	ldr	r2, [pc, #24]	@ (80064e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80064c8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80064ca:	4906      	ldr	r1, [pc, #24]	@ (80064e4 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064cc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80064d0:	6808      	ldr	r0, [r1, #0]
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	f003 031f 	and.w	r3, r3, #31
}
 80064d8:	40d8      	lsrs	r0, r3
 80064da:	4770      	bx	lr
 80064dc:	40021000 	.word	0x40021000
 80064e0:	080097a0 	.word	0x080097a0
 80064e4:	200004e0 	.word	0x200004e0

080064e8 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80064e8:	4a02      	ldr	r2, [pc, #8]	@ (80064f4 <HAL_RCC_EnableCSS+0xc>)
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064f0:	6013      	str	r3, [r2, #0]
}
 80064f2:	4770      	bx	lr
 80064f4:	40021000 	.word	0x40021000

080064f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064fc:	6803      	ldr	r3, [r0, #0]
{
 80064fe:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006500:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006504:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006506:	d041      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006508:	4ba0      	ldr	r3, [pc, #640]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800650a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800650c:	00d5      	lsls	r5, r2, #3
 800650e:	f140 80f7 	bpl.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8006512:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006514:	4d9e      	ldr	r5, [pc, #632]	@ (8006790 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8006516:	682b      	ldr	r3, [r5, #0]
 8006518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800651c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800651e:	f7fd ffdf 	bl	80044e0 <HAL_GetTick>
 8006522:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006524:	e004      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006526:	f7fd ffdb 	bl	80044e0 <HAL_GetTick>
 800652a:	1b83      	subs	r3, r0, r6
 800652c:	2b02      	cmp	r3, #2
 800652e:	d828      	bhi.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	05d8      	lsls	r0, r3, #23
 8006534:	d5f7      	bpl.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006536:	4d95      	ldr	r5, [pc, #596]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006538:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800653a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800653e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8006542:	f000 8119 	beq.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006546:	4293      	cmp	r3, r2
 8006548:	f000 8116 	beq.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800654c:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006550:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006558:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800655c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006564:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006568:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800656c:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800656e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006572:	f140 8101 	bpl.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fd ffb3 	bl	80044e0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800657e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006580:	e0f5      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006582:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006584:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8006586:	2f00      	cmp	r7, #0
 8006588:	f040 80c5 	bne.w	8006716 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800658c:	07de      	lsls	r6, r3, #31
 800658e:	d508      	bpl.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006590:	497e      	ldr	r1, [pc, #504]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006592:	6865      	ldr	r5, [r4, #4]
 8006594:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006598:	f022 0203 	bic.w	r2, r2, #3
 800659c:	432a      	orrs	r2, r5
 800659e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065a2:	079d      	lsls	r5, r3, #30
 80065a4:	d508      	bpl.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065a6:	4979      	ldr	r1, [pc, #484]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80065a8:	68a5      	ldr	r5, [r4, #8]
 80065aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80065ae:	f022 020c 	bic.w	r2, r2, #12
 80065b2:	432a      	orrs	r2, r5
 80065b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065b8:	0759      	lsls	r1, r3, #29
 80065ba:	d508      	bpl.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065bc:	4973      	ldr	r1, [pc, #460]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80065be:	68e5      	ldr	r5, [r4, #12]
 80065c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80065c4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80065c8:	432a      	orrs	r2, r5
 80065ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065ce:	071a      	lsls	r2, r3, #28
 80065d0:	d508      	bpl.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065d2:	496e      	ldr	r1, [pc, #440]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80065d4:	6925      	ldr	r5, [r4, #16]
 80065d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80065da:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80065de:	432a      	orrs	r2, r5
 80065e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e4:	069f      	lsls	r7, r3, #26
 80065e6:	d508      	bpl.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065e8:	4968      	ldr	r1, [pc, #416]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80065ea:	6965      	ldr	r5, [r4, #20]
 80065ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80065f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80065f4:	432a      	orrs	r2, r5
 80065f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065fa:	065e      	lsls	r6, r3, #25
 80065fc:	d508      	bpl.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065fe:	4963      	ldr	r1, [pc, #396]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006600:	69a5      	ldr	r5, [r4, #24]
 8006602:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006606:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800660a:	432a      	orrs	r2, r5
 800660c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006610:	061d      	lsls	r5, r3, #24
 8006612:	d508      	bpl.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006614:	495d      	ldr	r1, [pc, #372]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006616:	69e5      	ldr	r5, [r4, #28]
 8006618:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800661c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006620:	432a      	orrs	r2, r5
 8006622:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006626:	05d9      	lsls	r1, r3, #23
 8006628:	d508      	bpl.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800662a:	4958      	ldr	r1, [pc, #352]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800662c:	6a25      	ldr	r5, [r4, #32]
 800662e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006632:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8006636:	432a      	orrs	r2, r5
 8006638:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800663c:	059a      	lsls	r2, r3, #22
 800663e:	d508      	bpl.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006640:	4952      	ldr	r1, [pc, #328]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006642:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006644:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006648:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800664c:	432a      	orrs	r2, r5
 800664e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006652:	055f      	lsls	r7, r3, #21
 8006654:	d50b      	bpl.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006656:	494d      	ldr	r1, [pc, #308]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006658:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800665a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800665e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006662:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006664:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006668:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800666c:	d059      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800666e:	051e      	lsls	r6, r3, #20
 8006670:	d50b      	bpl.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006672:	4946      	ldr	r1, [pc, #280]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006674:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006676:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800667a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800667e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006680:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006684:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006688:	d050      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800668a:	04dd      	lsls	r5, r3, #19
 800668c:	d50b      	bpl.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800668e:	493f      	ldr	r1, [pc, #252]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006690:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006692:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006696:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800669a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800669c:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066a0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066a4:	d047      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066a6:	0499      	lsls	r1, r3, #18
 80066a8:	d50b      	bpl.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066aa:	4938      	ldr	r1, [pc, #224]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80066ac:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80066ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80066b2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80066b6:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066b8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066c0:	d03e      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066c2:	045a      	lsls	r2, r3, #17
 80066c4:	d50b      	bpl.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066c6:	4931      	ldr	r1, [pc, #196]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80066c8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80066ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80066ce:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80066d2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066d4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066dc:	d035      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	d50b      	bpl.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066e2:	4a2a      	ldr	r2, [pc, #168]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80066e4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80066e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80066ea:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80066ee:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066f0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80066f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066f8:	d02c      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 80066fa:	b002      	add	sp, #8
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006700:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006702:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006706:	659a      	str	r2, [r3, #88]	@ 0x58
 8006708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006712:	2701      	movs	r7, #1
 8006714:	e6fe      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006716:	491d      	ldr	r1, [pc, #116]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006718:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800671a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800671e:	658a      	str	r2, [r1, #88]	@ 0x58
 8006720:	e734      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006722:	68ca      	ldr	r2, [r1, #12]
 8006724:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006728:	60ca      	str	r2, [r1, #12]
 800672a:	e7a0      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800672c:	68ca      	ldr	r2, [r1, #12]
 800672e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006732:	60ca      	str	r2, [r1, #12]
 8006734:	e7a9      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006736:	68ca      	ldr	r2, [r1, #12]
 8006738:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800673c:	60ca      	str	r2, [r1, #12]
 800673e:	e7b2      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006740:	68ca      	ldr	r2, [r1, #12]
 8006742:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006746:	60ca      	str	r2, [r1, #12]
 8006748:	e7bb      	b.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800674a:	68ca      	ldr	r2, [r1, #12]
 800674c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006750:	60ca      	str	r2, [r1, #12]
 8006752:	e7c4      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006754:	68d3      	ldr	r3, [r2, #12]
 8006756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675a:	60d3      	str	r3, [r2, #12]
}
 800675c:	b002      	add	sp, #8
 800675e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006762:	f7fd febd 	bl	80044e0 <HAL_GetTick>
 8006766:	1b80      	subs	r0, r0, r6
 8006768:	4540      	cmp	r0, r8
 800676a:	f63f af0a 	bhi.w	8006582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800676e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006772:	079b      	lsls	r3, r3, #30
 8006774:	d5f5      	bpl.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006776:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006778:	4904      	ldr	r1, [pc, #16]	@ (800678c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800677a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800677e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006788:	2000      	movs	r0, #0
 800678a:	e6fb      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800678c:	40021000 	.word	0x40021000
 8006790:	40007000 	.word	0x40007000

08006794 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006794:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	6a02      	ldr	r2, [r0, #32]
 8006798:	f022 0201 	bic.w	r2, r2, #1
{
 800679c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80067aa:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80067ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80067b2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80067b6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b8:	4d13      	ldr	r5, [pc, #76]	@ (8006808 <TIM_OC1_SetConfig+0x74>)
 80067ba:	42a8      	cmp	r0, r5
 80067bc:	d00f      	beq.n	80067de <TIM_OC1_SetConfig+0x4a>
 80067be:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80067c2:	42a8      	cmp	r0, r5
 80067c4:	d00b      	beq.n	80067de <TIM_OC1_SetConfig+0x4a>
 80067c6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80067ca:	42a8      	cmp	r0, r5
 80067cc:	d007      	beq.n	80067de <TIM_OC1_SetConfig+0x4a>
 80067ce:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80067d2:	42a8      	cmp	r0, r5
 80067d4:	d003      	beq.n	80067de <TIM_OC1_SetConfig+0x4a>
 80067d6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80067da:	42a8      	cmp	r0, r5
 80067dc:	d10d      	bne.n	80067fa <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067de:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80067e4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067e6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ea:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ee:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80067f6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80067fc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80067fe:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006800:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006802:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8006804:	6203      	str	r3, [r0, #32]
}
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00

0800680c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680e:	6a02      	ldr	r2, [r0, #32]
 8006810:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8006814:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006816:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800681e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006822:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006826:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006828:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800682a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800682e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006832:	4d14      	ldr	r5, [pc, #80]	@ (8006884 <TIM_OC3_SetConfig+0x78>)
 8006834:	42a8      	cmp	r0, r5
 8006836:	d00f      	beq.n	8006858 <TIM_OC3_SetConfig+0x4c>
 8006838:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800683c:	42a8      	cmp	r0, r5
 800683e:	d00b      	beq.n	8006858 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006844:	42a8      	cmp	r0, r5
 8006846:	d00e      	beq.n	8006866 <TIM_OC3_SetConfig+0x5a>
 8006848:	4d0f      	ldr	r5, [pc, #60]	@ (8006888 <TIM_OC3_SetConfig+0x7c>)
 800684a:	42a8      	cmp	r0, r5
 800684c:	d00b      	beq.n	8006866 <TIM_OC3_SetConfig+0x5a>
 800684e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006852:	42a8      	cmp	r0, r5
 8006854:	d10f      	bne.n	8006876 <TIM_OC3_SetConfig+0x6a>
 8006856:	e006      	b.n	8006866 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006858:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800685a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800685e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006866:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800686e:	ea46 0c05 	orr.w	ip, r6, r5
 8006872:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006876:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006878:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800687a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800687c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800687e:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006880:	6203      	str	r3, [r0, #32]
}
 8006882:	4770      	bx	lr
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40014400 	.word	0x40014400

0800688c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800688e:	6a02      	ldr	r2, [r0, #32]
 8006890:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8006894:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006896:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006898:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800689e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80068a2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068aa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80068ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068b0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80068b4:	4d14      	ldr	r5, [pc, #80]	@ (8006908 <TIM_OC4_SetConfig+0x7c>)
 80068b6:	42a8      	cmp	r0, r5
 80068b8:	d00f      	beq.n	80068da <TIM_OC4_SetConfig+0x4e>
 80068ba:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80068be:	42a8      	cmp	r0, r5
 80068c0:	d00b      	beq.n	80068da <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c2:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80068c6:	42a8      	cmp	r0, r5
 80068c8:	d00e      	beq.n	80068e8 <TIM_OC4_SetConfig+0x5c>
 80068ca:	4d10      	ldr	r5, [pc, #64]	@ (800690c <TIM_OC4_SetConfig+0x80>)
 80068cc:	42a8      	cmp	r0, r5
 80068ce:	d00b      	beq.n	80068e8 <TIM_OC4_SetConfig+0x5c>
 80068d0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80068d4:	42a8      	cmp	r0, r5
 80068d6:	d10f      	bne.n	80068f8 <TIM_OC4_SetConfig+0x6c>
 80068d8:	e006      	b.n	80068e8 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80068dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80068e0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80068e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068e8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068ec:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068f0:	ea46 0c05 	orr.w	ip, r6, r5
 80068f4:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80068fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80068fc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80068fe:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006900:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006902:	6203      	str	r3, [r0, #32]
}
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40014400 	.word	0x40014400

08006910 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006910:	2800      	cmp	r0, #0
 8006912:	d075      	beq.n	8006a00 <HAL_TIM_PWM_Init+0xf0>
{
 8006914:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006916:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800691a:	4604      	mov	r4, r0
 800691c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006920:	2b00      	cmp	r3, #0
 8006922:	d068      	beq.n	80069f6 <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006924:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006926:	4e37      	ldr	r6, [pc, #220]	@ (8006a04 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8006928:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800692a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800692c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	2202      	movs	r2, #2
 8006930:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006934:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8006936:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006938:	d04c      	beq.n	80069d4 <HAL_TIM_PWM_Init+0xc4>
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693e:	d017      	beq.n	8006970 <HAL_TIM_PWM_Init+0x60>
 8006940:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8006944:	42b3      	cmp	r3, r6
 8006946:	d013      	beq.n	8006970 <HAL_TIM_PWM_Init+0x60>
 8006948:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800694c:	42b3      	cmp	r3, r6
 800694e:	d00f      	beq.n	8006970 <HAL_TIM_PWM_Init+0x60>
 8006950:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8006954:	42b3      	cmp	r3, r6
 8006956:	d03d      	beq.n	80069d4 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006958:	4e2b      	ldr	r6, [pc, #172]	@ (8006a08 <HAL_TIM_PWM_Init+0xf8>)
 800695a:	42b3      	cmp	r3, r6
 800695c:	d03e      	beq.n	80069dc <HAL_TIM_PWM_Init+0xcc>
 800695e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006962:	42b3      	cmp	r3, r6
 8006964:	d03a      	beq.n	80069dc <HAL_TIM_PWM_Init+0xcc>
 8006966:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800696a:	42b3      	cmp	r3, r6
 800696c:	d108      	bne.n	8006980 <HAL_TIM_PWM_Init+0x70>
 800696e:	e035      	b.n	80069dc <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8006970:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006972:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006976:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006978:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006984:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006986:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006988:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800698a:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800698c:	2201      	movs	r2, #1
 800698e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	07d2      	lsls	r2, r2, #31
 8006994:	d503      	bpl.n	800699e <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800699e:	2301      	movs	r3, #1
 80069a0:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80069a8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80069ac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80069b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80069b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80069c0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80069c4:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80069c8:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80069d0:	2000      	movs	r0, #0
}
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80069d4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80069da:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069dc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069e8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80069ea:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ec:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069ee:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80069f0:	6962      	ldr	r2, [r4, #20]
 80069f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80069f4:	e7ca      	b.n	800698c <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 80069f6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80069fa:	f7fc fb89 	bl	8003110 <HAL_TIM_PWM_MspInit>
 80069fe:	e791      	b.n	8006924 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
}
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40014000 	.word	0x40014000

08006a0c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8006a0c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a0e:	6a02      	ldr	r2, [r0, #32]
 8006a10:	f022 0210 	bic.w	r2, r2, #16
{
 8006a14:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a16:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006a18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006a1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a1e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006a22:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006a2c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a34:	4d14      	ldr	r5, [pc, #80]	@ (8006a88 <TIM_OC2_SetConfig+0x7c>)
 8006a36:	42a8      	cmp	r0, r5
 8006a38:	d00f      	beq.n	8006a5a <TIM_OC2_SetConfig+0x4e>
 8006a3a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006a3e:	42a8      	cmp	r0, r5
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a42:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006a46:	42a8      	cmp	r0, r5
 8006a48:	d00e      	beq.n	8006a68 <TIM_OC2_SetConfig+0x5c>
 8006a4a:	4d10      	ldr	r5, [pc, #64]	@ (8006a8c <TIM_OC2_SetConfig+0x80>)
 8006a4c:	42a8      	cmp	r0, r5
 8006a4e:	d00b      	beq.n	8006a68 <TIM_OC2_SetConfig+0x5c>
 8006a50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006a54:	42a8      	cmp	r0, r5
 8006a56:	d10f      	bne.n	8006a78 <TIM_OC2_SetConfig+0x6c>
 8006a58:	e006      	b.n	8006a68 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a68:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a6c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a70:	ea46 0c05 	orr.w	ip, r6, r5
 8006a74:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006a78:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006a7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006a7c:	6182      	str	r2, [r0, #24]
}
 8006a7e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006a80:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006a82:	6203      	str	r3, [r0, #32]
}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40014400 	.word	0x40014400

08006a90 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006a90:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	f000 80dc 	beq.w	8006c52 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8006a9a:	2301      	movs	r3, #1
{
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006aa2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8006aa6:	2a14      	cmp	r2, #20
 8006aa8:	d80c      	bhi.n	8006ac4 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006aaa:	e8df f002 	tbb	[pc, r2]
 8006aae:	0b4f      	.short	0x0b4f
 8006ab0:	0b630b0b 	.word	0x0b630b0b
 8006ab4:	0b740b0b 	.word	0x0b740b0b
 8006ab8:	0b840b0b 	.word	0x0b840b0b
 8006abc:	0b950b0b 	.word	0x0b950b0b
 8006ac0:	0b0b      	.short	0x0b0b
 8006ac2:	10          	.byte	0x10
 8006ac3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8006aca:	2001      	movs	r0, #1
}
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ace:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ad4:	6a19      	ldr	r1, [r3, #32]
 8006ad6:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8006ada:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006adc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006ade:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ae0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8006ae4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ae8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006aec:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aee:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006af2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af6:	4e58      	ldr	r6, [pc, #352]	@ (8006c58 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8006af8:	42b3      	cmp	r3, r6
 8006afa:	d00f      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006afc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006b00:	42b3      	cmp	r3, r6
 8006b02:	d00b      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006b04:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8006b08:	42b3      	cmp	r3, r6
 8006b0a:	d007      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006b0c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006b10:	42b3      	cmp	r3, r6
 8006b12:	d003      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006b14:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006b18:	42b3      	cmp	r3, r6
 8006b1a:	d104      	bne.n	8006b26 <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b1c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b1e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b22:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b26:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b28:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b2a:	6869      	ldr	r1, [r5, #4]
 8006b2c:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b32:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b38:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b40:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b48:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006b4a:	e00e      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b4c:	6800      	ldr	r0, [r0, #0]
 8006b4e:	f7ff fe21 	bl	8006794 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b52:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b54:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b56:	f043 0308 	orr.w	r3, r3, #8
 8006b5a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b5c:	6983      	ldr	r3, [r0, #24]
 8006b5e:	f023 0304 	bic.w	r3, r3, #4
 8006b62:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b64:	6983      	ldr	r3, [r0, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2000      	movs	r0, #0
}
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b74:	6800      	ldr	r0, [r0, #0]
 8006b76:	f7ff ff49 	bl	8006a0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b7a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b7c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006b82:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b84:	6983      	ldr	r3, [r0, #24]
 8006b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b8a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b8c:	6983      	ldr	r3, [r0, #24]
 8006b8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006b92:	6183      	str	r3, [r0, #24]
      break;
 8006b94:	e7e9      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b96:	6800      	ldr	r0, [r0, #0]
 8006b98:	f7ff fe38 	bl	800680c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b9c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b9e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ba0:	f043 0308 	orr.w	r3, r3, #8
 8006ba4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba6:	69c3      	ldr	r3, [r0, #28]
 8006ba8:	f023 0304 	bic.w	r3, r3, #4
 8006bac:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bae:	69c3      	ldr	r3, [r0, #28]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	61c3      	str	r3, [r0, #28]
      break;
 8006bb4:	e7d9      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bb6:	6800      	ldr	r0, [r0, #0]
 8006bb8:	f7ff fe68 	bl	800688c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bbc:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bbe:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006bc4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bc6:	69c3      	ldr	r3, [r0, #28]
 8006bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bcc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bce:	69c3      	ldr	r3, [r0, #28]
 8006bd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006bd4:	61c3      	str	r3, [r0, #28]
      break;
 8006bd6:	e7c8      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bd8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006bda:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bde:	6a19      	ldr	r1, [r3, #32]
 8006be0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006be4:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006be6:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006be8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bea:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006bee:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006bf2:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bf4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006bf6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bfa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfe:	4e16      	ldr	r6, [pc, #88]	@ (8006c58 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	d00f      	beq.n	8006c24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006c04:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006c08:	42b3      	cmp	r3, r6
 8006c0a:	d00b      	beq.n	8006c24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006c0c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8006c10:	42b3      	cmp	r3, r6
 8006c12:	d007      	beq.n	8006c24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006c14:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006c18:	42b3      	cmp	r3, r6
 8006c1a:	d003      	beq.n	8006c24 <HAL_TIM_PWM_ConfigChannel+0x194>
 8006c1c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8006c20:	42b3      	cmp	r3, r6
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c24:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c26:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c2a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006c2e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006c30:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006c32:	6869      	ldr	r1, [r5, #4]
 8006c34:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8006c36:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c3a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c3c:	f042 0208 	orr.w	r2, r2, #8
 8006c40:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c44:	f022 0204 	bic.w	r2, r2, #4
 8006c48:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c50:	e78b      	b.n	8006b6a <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8006c52:	2002      	movs	r0, #2
}
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	40012c00 	.word	0x40012c00

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d046      	beq.n	8006cf2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8006c64:	b470      	push	{r4, r5, r6}
 8006c66:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c68:	4e23      	ldr	r6, [pc, #140]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8006c6a:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c72:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8006c74:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c76:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006c78:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c7a:	d024      	beq.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8006c7c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006c80:	42b0      	cmp	r0, r6
 8006c82:	d02b      	beq.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c84:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c8c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c8e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006c92:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c94:	d00a      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8006c96:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006c98:	4298      	cmp	r0, r3
 8006c9a:	d007      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8006c9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ca0:	4298      	cmp	r0, r3
 8006ca2:	d003      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8006ca4:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8006ca8:	4298      	cmp	r0, r3
 8006caa:	d104      	bne.n	8006cb6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cac:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cae:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb2:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb4:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006cb6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006cbe:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8006cc2:	bc70      	pop	{r4, r5, r6}
 8006cc4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cc6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cc8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ccc:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd6:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006cd8:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cda:	e7e7      	b.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cdc:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ce2:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cec:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8006cee:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf0:	e7dc      	b.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8006cf2:	2002      	movs	r0, #2
}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40000400 	.word	0x40000400

08006d00 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d00:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d045      	beq.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006d08:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d0a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d12:	4602      	mov	r2, r0
 8006d14:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d16:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d18:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d24:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d26:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d2e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d34:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d36:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d3c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d3e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d40:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d44:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d4e:	4c12      	ldr	r4, [pc, #72]	@ (8006d98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d50:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d52:	6810      	ldr	r0, [r2, #0]
 8006d54:	42a0      	cmp	r0, r4
 8006d56:	d00b      	beq.n	8006d70 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8006d58:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006d5c:	42a0      	cmp	r0, r4
 8006d5e:	d007      	beq.n	8006d70 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006d60:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006d62:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006d64:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006d68:	4608      	mov	r0, r1
}
 8006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d70:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006d72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d76:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d7a:	6a0c      	ldr	r4, [r1, #32]
 8006d7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d80:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d82:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d84:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d86:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006d8a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d8c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d90:	430b      	orrs	r3, r1
 8006d92:	e7e5      	b.n	8006d60 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8006d94:	2002      	movs	r0, #2
}
 8006d96:	4770      	bx	lr
 8006d98:	40012c00 	.word	0x40012c00

08006d9c <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006d9c:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d9e:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8006da2:	2801      	cmp	r0, #1
 8006da4:	d047      	beq.n	8006e36 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8006da6:	6810      	ldr	r0, [r2, #0]
 8006da8:	3801      	subs	r0, #1
 8006daa:	280f      	cmp	r0, #15
{
 8006dac:	b4f0      	push	{r4, r5, r6, r7}
 8006dae:	d815      	bhi.n	8006ddc <HAL_TIMEx_ConfigBreakInput+0x40>
 8006db0:	4c22      	ldr	r4, [pc, #136]	@ (8006e3c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8006db2:	4e23      	ldr	r6, [pc, #140]	@ (8006e40 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8006db4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8006db8:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8006dbc:	4c21      	ldr	r4, [pc, #132]	@ (8006e44 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8006dbe:	4e22      	ldr	r6, [pc, #136]	@ (8006e48 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8006dc0:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8006dc4:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006dc8:	2901      	cmp	r1, #1
 8006dca:	d00d      	beq.n	8006de8 <HAL_TIMEx_ConfigBreakInput+0x4c>
 8006dcc:	2902      	cmp	r1, #2
 8006dce:	d01c      	beq.n	8006e0a <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8006dd6:	2001      	movs	r0, #1

  return status;
}
 8006dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dda:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006ddc:	2700      	movs	r7, #0
  switch (BreakInput)
 8006dde:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006de0:	46bc      	mov	ip, r7
 8006de2:	463c      	mov	r4, r7
 8006de4:	463d      	mov	r5, r7
  switch (BreakInput)
 8006de6:	d1f1      	bne.n	8006dcc <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006de8:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8006dea:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006dec:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006dee:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8006df0:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006df2:	fa01 f10c 	lsl.w	r1, r1, ip
 8006df6:	ea81 0207 	eor.w	r2, r1, r7
 8006dfa:	402a      	ands	r2, r5
 8006dfc:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006dfe:	ea80 0102 	eor.w	r1, r0, r2
 8006e02:	4021      	ands	r1, r4
 8006e04:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8006e06:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8006e08:	e00f      	b.n	8006e2a <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006e0a:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8006e0c:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006e0e:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006e10:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8006e12:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006e14:	fa01 f10c 	lsl.w	r1, r1, ip
 8006e18:	ea81 0207 	eor.w	r2, r1, r7
 8006e1c:	402a      	ands	r2, r5
 8006e1e:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006e20:	ea80 0102 	eor.w	r1, r0, r2
 8006e24:	4021      	ands	r1, r4
 8006e26:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8006e28:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006e30:	2000      	movs	r0, #0
}
 8006e32:	bcf0      	pop	{r4, r5, r6, r7}
 8006e34:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006e36:	2002      	movs	r0, #2
}
 8006e38:	4770      	bx	lr
 8006e3a:	bf00      	nop
 8006e3c:	08009878 	.word	0x08009878
 8006e40:	080097f8 	.word	0x080097f8
 8006e44:	08009838 	.word	0x08009838
 8006e48:	080097b8 	.word	0x080097b8

08006e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e50:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e52:	6882      	ldr	r2, [r0, #8]
 8006e54:	6900      	ldr	r0, [r0, #16]
 8006e56:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e58:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e5a:	4302      	orrs	r2, r0
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e60:	498e      	ldr	r1, [pc, #568]	@ (800709c <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e62:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e64:	4029      	ands	r1, r5
 8006e66:	430a      	orrs	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e6e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e70:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006e74:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e76:	498a      	ldr	r1, [pc, #552]	@ (80070a0 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e78:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e7a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e7c:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e7e:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e80:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006e84:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e88:	f000 80b0 	beq.w	8006fec <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 8006e8c:	6a26      	ldr	r6, [r4, #32]
 8006e8e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e90:	430a      	orrs	r2, r1
 8006e92:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	f022 020f 	bic.w	r2, r2, #15
 8006e9a:	432a      	orrs	r2, r5
 8006e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9e:	4a81      	ldr	r2, [pc, #516]	@ (80070a4 <UART_SetConfig+0x258>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d035      	beq.n	8006f10 <UART_SetConfig+0xc4>
 8006ea4:	4a80      	ldr	r2, [pc, #512]	@ (80070a8 <UART_SetConfig+0x25c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00d      	beq.n	8006ec6 <UART_SetConfig+0x7a>
 8006eaa:	4a80      	ldr	r2, [pc, #512]	@ (80070ac <UART_SetConfig+0x260>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d055      	beq.n	8006f5c <UART_SetConfig+0x110>
 8006eb0:	4a7f      	ldr	r2, [pc, #508]	@ (80070b0 <UART_SetConfig+0x264>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d040      	beq.n	8006f38 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8006eb6:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006eba:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006ebe:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006ec2:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8006ec4:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80070b4 <UART_SetConfig+0x268>)
 8006ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ecc:	f003 030c 	and.w	r3, r3, #12
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d8f0      	bhi.n	8006eb6 <UART_SetConfig+0x6a>
 8006ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x90>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006fe1 	.word	0x08006fe1
 8006ee0:	08006eb7 	.word	0x08006eb7
 8006ee4:	08006eb7 	.word	0x08006eb7
 8006ee8:	08006eb7 	.word	0x08006eb7
 8006eec:	08006f4f 	.word	0x08006f4f
 8006ef0:	08006eb7 	.word	0x08006eb7
 8006ef4:	08006eb7 	.word	0x08006eb7
 8006ef8:	08006eb7 	.word	0x08006eb7
 8006efc:	08006fa3 	.word	0x08006fa3
 8006f00:	08006eb7 	.word	0x08006eb7
 8006f04:	08006eb7 	.word	0x08006eb7
 8006f08:	08006eb7 	.word	0x08006eb7
 8006f0c:	08006f71 	.word	0x08006f71
 8006f10:	4b68      	ldr	r3, [pc, #416]	@ (80070b4 <UART_SetConfig+0x268>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d041      	beq.n	8006fa2 <UART_SetConfig+0x156>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d026      	beq.n	8006f70 <UART_SetConfig+0x124>
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d013      	beq.n	8006f4e <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006f2a:	f000 80ac 	beq.w	8007086 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2e:	f7ff fac9 	bl	80064c4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006f32:	b3a0      	cbz	r0, 8006f9e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f34:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006f36:	e020      	b.n	8006f7a <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f38:	4b5e      	ldr	r3, [pc, #376]	@ (80070b4 <UART_SetConfig+0x268>)
 8006f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f42:	2b80      	cmp	r3, #128	@ 0x80
 8006f44:	d02d      	beq.n	8006fa2 <UART_SetConfig+0x156>
 8006f46:	f200 808e 	bhi.w	8007066 <UART_SetConfig+0x21a>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d048      	beq.n	8006fe0 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006f52:	f000 809e 	beq.w	8007092 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 8006f56:	f7ff f961 	bl	800621c <HAL_RCC_GetSysClockFreq>
        break;
 8006f5a:	e7ea      	b.n	8006f32 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f5c:	4b55      	ldr	r3, [pc, #340]	@ (80070b4 <UART_SetConfig+0x268>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d01b      	beq.n	8006fa2 <UART_SetConfig+0x156>
 8006f6a:	d9ee      	bls.n	8006f4a <UART_SetConfig+0xfe>
 8006f6c:	2b30      	cmp	r3, #48	@ 0x30
 8006f6e:	d1a2      	bne.n	8006eb6 <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f70:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006f74:	d019      	beq.n	8006faa <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 8006f76:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80070b8 <UART_SetConfig+0x26c>)
 8006f7e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8006f82:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f86:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006f8e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f92:	f1a0 0310 	sub.w	r3, r0, #16
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d88d      	bhi.n	8006eb6 <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e78a      	b.n	8006eb8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006fa6:	4845      	ldr	r0, [pc, #276]	@ (80070bc <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fa8:	d1e7      	bne.n	8006f7a <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	4b42      	ldr	r3, [pc, #264]	@ (80070b8 <UART_SetConfig+0x26c>)
 8006fae:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006fb2:	fbb0 f0f1 	udiv	r0, r0, r1
 8006fb6:	0853      	lsrs	r3, r2, #1
 8006fb8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbc:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fc0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc4:	f1a3 0210 	sub.w	r2, r3, #16
 8006fc8:	428a      	cmp	r2, r1
 8006fca:	f63f af74 	bhi.w	8006eb6 <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fce:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006fd2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd4:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fd6:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60cb      	str	r3, [r1, #12]
 8006fde:	e7de      	b.n	8006f9e <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006fe4:	d049      	beq.n	800707a <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe6:	f7ff fa5b 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8006fea:	e7a2      	b.n	8006f32 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fec:	4311      	orrs	r1, r2
 8006fee:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff2:	4930      	ldr	r1, [pc, #192]	@ (80070b4 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff4:	f022 020f 	bic.w	r2, r2, #15
 8006ff8:	432a      	orrs	r2, r5
 8006ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ffc:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8007000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d046      	beq.n	8007098 <UART_SetConfig+0x24c>
 800700a:	d82f      	bhi.n	800706c <UART_SetConfig+0x220>
 800700c:	2b00      	cmp	r3, #0
 800700e:	d03d      	beq.n	800708c <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 8007010:	f7ff f904 	bl	800621c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007014:	2800      	cmp	r0, #0
 8007016:	d0c2      	beq.n	8006f9e <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007018:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800701a:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800701c:	4b26      	ldr	r3, [pc, #152]	@ (80070b8 <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800701e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007022:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8007026:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800702a:	4299      	cmp	r1, r3
 800702c:	f63f af43 	bhi.w	8006eb6 <UART_SetConfig+0x6a>
 8007030:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8007034:	f63f af3f 	bhi.w	8006eb6 <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007038:	2300      	movs	r3, #0
 800703a:	4619      	mov	r1, r3
 800703c:	f7f9 f8ec 	bl	8000218 <__aeabi_uldivmod>
 8007040:	0872      	lsrs	r2, r6, #1
 8007042:	0203      	lsls	r3, r0, #8
 8007044:	0209      	lsls	r1, r1, #8
 8007046:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800704a:	1898      	adds	r0, r3, r2
 800704c:	f141 0100 	adc.w	r1, r1, #0
 8007050:	4632      	mov	r2, r6
 8007052:	2300      	movs	r3, #0
 8007054:	f7f9 f8e0 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007058:	4b19      	ldr	r3, [pc, #100]	@ (80070c0 <UART_SetConfig+0x274>)
 800705a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800705e:	429a      	cmp	r2, r3
 8007060:	f63f af29 	bhi.w	8006eb6 <UART_SetConfig+0x6a>
 8007064:	e799      	b.n	8006f9a <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007066:	2bc0      	cmp	r3, #192	@ 0xc0
 8007068:	d082      	beq.n	8006f70 <UART_SetConfig+0x124>
 800706a:	e724      	b.n	8006eb6 <UART_SetConfig+0x6a>
 800706c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007070:	f47f af21 	bne.w	8006eb6 <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 8007074:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007078:	e7cf      	b.n	800701a <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 800707a:	f7ff fa11 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800707e:	2800      	cmp	r0, #0
 8007080:	d08d      	beq.n	8006f9e <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007082:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007084:	e791      	b.n	8006faa <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007086:	f7ff fa1d 	bl	80064c4 <HAL_RCC_GetPCLK2Freq>
        break;
 800708a:	e7f8      	b.n	800707e <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 800708c:	f7ff fa08 	bl	80064a0 <HAL_RCC_GetPCLK1Freq>
        break;
 8007090:	e7c0      	b.n	8007014 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8007092:	f7ff f8c3 	bl	800621c <HAL_RCC_GetSysClockFreq>
        break;
 8007096:	e7f2      	b.n	800707e <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 8007098:	4808      	ldr	r0, [pc, #32]	@ (80070bc <UART_SetConfig+0x270>)
 800709a:	e7be      	b.n	800701a <UART_SetConfig+0x1ce>
 800709c:	cfff69f3 	.word	0xcfff69f3
 80070a0:	40008000 	.word	0x40008000
 80070a4:	40013800 	.word	0x40013800
 80070a8:	40004400 	.word	0x40004400
 80070ac:	40004800 	.word	0x40004800
 80070b0:	40004c00 	.word	0x40004c00
 80070b4:	40021000 	.word	0x40021000
 80070b8:	080098b8 	.word	0x080098b8
 80070bc:	00f42400 	.word	0x00f42400
 80070c0:	000ffcff 	.word	0x000ffcff

080070c4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80070c6:	071a      	lsls	r2, r3, #28
{
 80070c8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070ca:	d506      	bpl.n	80070da <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070cc:	6801      	ldr	r1, [r0, #0]
 80070ce:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80070d0:	684a      	ldr	r2, [r1, #4]
 80070d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80070d6:	4322      	orrs	r2, r4
 80070d8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070da:	07dc      	lsls	r4, r3, #31
 80070dc:	d506      	bpl.n	80070ec <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070de:	6801      	ldr	r1, [r0, #0]
 80070e0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80070e2:	684a      	ldr	r2, [r1, #4]
 80070e4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80070e8:	4322      	orrs	r2, r4
 80070ea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070ec:	0799      	lsls	r1, r3, #30
 80070ee:	d506      	bpl.n	80070fe <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070f0:	6801      	ldr	r1, [r0, #0]
 80070f2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80070f4:	684a      	ldr	r2, [r1, #4]
 80070f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80070fa:	4322      	orrs	r2, r4
 80070fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070fe:	075a      	lsls	r2, r3, #29
 8007100:	d506      	bpl.n	8007110 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007102:	6801      	ldr	r1, [r0, #0]
 8007104:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8007106:	684a      	ldr	r2, [r1, #4]
 8007108:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800710c:	4322      	orrs	r2, r4
 800710e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007110:	06dc      	lsls	r4, r3, #27
 8007112:	d506      	bpl.n	8007122 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007114:	6801      	ldr	r1, [r0, #0]
 8007116:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8007118:	688a      	ldr	r2, [r1, #8]
 800711a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800711e:	4322      	orrs	r2, r4
 8007120:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007122:	0699      	lsls	r1, r3, #26
 8007124:	d506      	bpl.n	8007134 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007126:	6801      	ldr	r1, [r0, #0]
 8007128:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800712a:	688a      	ldr	r2, [r1, #8]
 800712c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007130:	4322      	orrs	r2, r4
 8007132:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007134:	065a      	lsls	r2, r3, #25
 8007136:	d509      	bpl.n	800714c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007138:	6801      	ldr	r1, [r0, #0]
 800713a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800713c:	684a      	ldr	r2, [r1, #4]
 800713e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8007142:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007144:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007148:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714a:	d00b      	beq.n	8007164 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	d506      	bpl.n	800715e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007150:	6802      	ldr	r2, [r0, #0]
 8007152:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007154:	6853      	ldr	r3, [r2, #4]
 8007156:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800715a:	430b      	orrs	r3, r1
 800715c:	6053      	str	r3, [r2, #4]
  }
}
 800715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007162:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007164:	684a      	ldr	r2, [r1, #4]
 8007166:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8007168:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800716c:	4322      	orrs	r2, r4
 800716e:	604a      	str	r2, [r1, #4]
 8007170:	e7ec      	b.n	800714c <UART_AdvFeatureConfig+0x88>
 8007172:	bf00      	nop

08007174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007174:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	2300      	movs	r3, #0
{
 8007178:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717a:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800717e:	f7fd f9af 	bl	80044e0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	6813      	ldr	r3, [r2, #0]
 8007186:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8007188:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800718a:	d40f      	bmi.n	80071ac <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800718c:	6813      	ldr	r3, [r2, #0]
 800718e:	0759      	lsls	r1, r3, #29
 8007190:	d431      	bmi.n	80071f6 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007194:	2220      	movs	r2, #32
 8007196:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800719a:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a2:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80071a4:	2300      	movs	r3, #0
 80071a6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ac:	69d3      	ldr	r3, [r2, #28]
 80071ae:	0298      	lsls	r0, r3, #10
 80071b0:	d4ec      	bmi.n	800718c <UART_CheckIdleState+0x18>
 80071b2:	e00c      	b.n	80071ce <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071b4:	6819      	ldr	r1, [r3, #0]
 80071b6:	0749      	lsls	r1, r1, #29
 80071b8:	461a      	mov	r2, r3
 80071ba:	d505      	bpl.n	80071c8 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071bc:	69d9      	ldr	r1, [r3, #28]
 80071be:	0708      	lsls	r0, r1, #28
 80071c0:	d44a      	bmi.n	8007258 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c2:	69d9      	ldr	r1, [r3, #28]
 80071c4:	0509      	lsls	r1, r1, #20
 80071c6:	d475      	bmi.n	80072b4 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	0298      	lsls	r0, r3, #10
 80071cc:	d4de      	bmi.n	800718c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fd f987 	bl	80044e0 <HAL_GetTick>
 80071d2:	1b43      	subs	r3, r0, r5
 80071d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071d8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071da:	d3eb      	bcc.n	80071b4 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	e843 2100 	strex	r1, r2, [r3]
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d1f7      	bne.n	80071dc <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 80071ec:	2320      	movs	r3, #32
 80071ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80071f2:	2003      	movs	r0, #3
 80071f4:	e7d6      	b.n	80071a4 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f6:	69d3      	ldr	r3, [r2, #28]
 80071f8:	025b      	lsls	r3, r3, #9
 80071fa:	d4ca      	bmi.n	8007192 <UART_CheckIdleState+0x1e>
 80071fc:	e00d      	b.n	800721a <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	0750      	lsls	r0, r2, #29
 8007202:	d507      	bpl.n	8007214 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	0711      	lsls	r1, r2, #28
 8007208:	f100 8082 	bmi.w	8007310 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	0512      	lsls	r2, r2, #20
 8007210:	f100 80ac 	bmi.w	800736c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	025b      	lsls	r3, r3, #9
 8007218:	d4bb      	bmi.n	8007192 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721a:	f7fd f961 	bl	80044e0 <HAL_GetTick>
 800721e:	1b43      	subs	r3, r0, r5
 8007220:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	d3ea      	bcc.n	80071fe <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800722c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	e843 2100 	strex	r1, r2, [r3]
 8007234:	2900      	cmp	r1, #0
 8007236:	d1f7      	bne.n	8007228 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007238:	f103 0208 	add.w	r2, r3, #8
 800723c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007240:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	f103 0008 	add.w	r0, r3, #8
 8007248:	e840 2100 	strex	r1, r2, [r0]
 800724c:	2900      	cmp	r1, #0
 800724e:	d1f3      	bne.n	8007238 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8007250:	2320      	movs	r3, #32
 8007252:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8007256:	e7cc      	b.n	80071f2 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007258:	2208      	movs	r2, #8
 800725a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007260:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	e843 2100 	strex	r1, r2, [r3]
 8007268:	2900      	cmp	r1, #0
 800726a:	d1f7      	bne.n	800725c <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800726c:	4856      	ldr	r0, [pc, #344]	@ (80073c8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	f103 0208 	add.w	r2, r3, #8
 8007272:	e852 2f00 	ldrex	r2, [r2]
 8007276:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	f103 0508 	add.w	r5, r3, #8
 800727c:	e845 2100 	strex	r1, r2, [r5]
 8007280:	2900      	cmp	r1, #0
 8007282:	d1f4      	bne.n	800726e <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007286:	2a01      	cmp	r2, #1
 8007288:	d00b      	beq.n	80072a2 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800728c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800728e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007290:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007294:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007296:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007298:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800729c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80072a0:	e79c      	b.n	80071dc <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	e843 2100 	strex	r1, r2, [r3]
 80072ae:	2900      	cmp	r1, #0
 80072b0:	d1f7      	bne.n	80072a2 <UART_CheckIdleState+0x12e>
 80072b2:	e7ea      	b.n	800728a <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072b8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072be:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	e843 2100 	strex	r1, r2, [r3]
 80072c6:	2900      	cmp	r1, #0
 80072c8:	d1f7      	bne.n	80072ba <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072ca:	483f      	ldr	r0, [pc, #252]	@ (80073c8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	f103 0208 	add.w	r2, r3, #8
 80072d0:	e852 2f00 	ldrex	r2, [r2]
 80072d4:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	f103 0508 	add.w	r5, r3, #8
 80072da:	e845 2100 	strex	r1, r2, [r5]
 80072de:	2900      	cmp	r1, #0
 80072e0:	d1f4      	bne.n	80072cc <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e2:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80072e4:	2a01      	cmp	r2, #1
 80072e6:	d00a      	beq.n	80072fe <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80072ea:	2120      	movs	r1, #32
 80072ec:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80072f0:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f2:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80072f4:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072f8:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80072fc:	e76e      	b.n	80071dc <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	e843 2100 	strex	r1, r2, [r3]
 800730a:	2900      	cmp	r1, #0
 800730c:	d1f7      	bne.n	80072fe <UART_CheckIdleState+0x18a>
 800730e:	e7eb      	b.n	80072e8 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007310:	2208      	movs	r2, #8
 8007312:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007318:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	e843 2100 	strex	r1, r2, [r3]
 8007320:	2900      	cmp	r1, #0
 8007322:	d1f7      	bne.n	8007314 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007324:	4828      	ldr	r0, [pc, #160]	@ (80073c8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	f103 0208 	add.w	r2, r3, #8
 800732a:	e852 2f00 	ldrex	r2, [r2]
 800732e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	f103 0508 	add.w	r5, r3, #8
 8007334:	e845 2100 	strex	r1, r2, [r5]
 8007338:	2900      	cmp	r1, #0
 800733a:	d1f4      	bne.n	8007326 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800733e:	2a01      	cmp	r2, #1
 8007340:	d00b      	beq.n	800735a <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007342:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007344:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007346:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007348:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800734c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007350:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007354:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8007358:	e766      	b.n	8007228 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	e843 2100 	strex	r1, r2, [r3]
 8007366:	2900      	cmp	r1, #0
 8007368:	d1f7      	bne.n	800735a <UART_CheckIdleState+0x1e6>
 800736a:	e7ea      	b.n	8007342 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800736c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007370:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007376:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	e843 2100 	strex	r1, r2, [r3]
 800737e:	2900      	cmp	r1, #0
 8007380:	d1f7      	bne.n	8007372 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007382:	4811      	ldr	r0, [pc, #68]	@ (80073c8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	f103 0208 	add.w	r2, r3, #8
 8007388:	e852 2f00 	ldrex	r2, [r2]
 800738c:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	f103 0508 	add.w	r5, r3, #8
 8007392:	e845 2100 	strex	r1, r2, [r5]
 8007396:	2900      	cmp	r1, #0
 8007398:	d1f4      	bne.n	8007384 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800739a:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800739c:	2a01      	cmp	r2, #1
 800739e:	d00a      	beq.n	80073b6 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80073a2:	2120      	movs	r1, #32
 80073a4:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80073a8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80073ac:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80073b4:	e738      	b.n	8007228 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ba:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	e843 2100 	strex	r1, r2, [r3]
 80073c2:	2900      	cmp	r1, #0
 80073c4:	d1f7      	bne.n	80073b6 <UART_CheckIdleState+0x242>
 80073c6:	e7eb      	b.n	80073a0 <UART_CheckIdleState+0x22c>
 80073c8:	effffffe 	.word	0xeffffffe

080073cc <HAL_UART_Init>:
  if (huart == NULL)
 80073cc:	b380      	cbz	r0, 8007430 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80073ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 80073d2:	b510      	push	{r4, lr}
 80073d4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80073d6:	b333      	cbz	r3, 8007426 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 80073d8:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 80073dc:	2324      	movs	r3, #36	@ 0x24
 80073de:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80073e2:	6813      	ldr	r3, [r2, #0]
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ea:	b9c1      	cbnz	r1, 800741e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073ec:	4620      	mov	r0, r4
 80073ee:	f7ff fd2d 	bl	8006e4c <UART_SetConfig>
 80073f2:	2801      	cmp	r0, #1
 80073f4:	d011      	beq.n	800741a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007406:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800740e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8007410:	601a      	str	r2, [r3, #0]
}
 8007412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007416:	f7ff bead 	b.w	8007174 <UART_CheckIdleState>
}
 800741a:	2001      	movs	r0, #1
 800741c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800741e:	4620      	mov	r0, r4
 8007420:	f7ff fe50 	bl	80070c4 <UART_AdvFeatureConfig>
 8007424:	e7e2      	b.n	80073ec <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8007426:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800742a:	f7fb fee5 	bl	80031f8 <HAL_UART_MspInit>
 800742e:	e7d3      	b.n	80073d8 <HAL_UART_Init+0xc>
}
 8007430:	2001      	movs	r0, #1
 8007432:	4770      	bx	lr

08007434 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007434:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8007438:	2b01      	cmp	r3, #1
 800743a:	d017      	beq.n	800746c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800743c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800743e:	2324      	movs	r3, #36	@ 0x24
{
 8007440:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8007442:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007446:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007448:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800744a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800744c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007450:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8007454:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007456:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007458:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800745a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800745e:	2220      	movs	r2, #32
 8007460:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8007464:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8007468:	4618      	mov	r0, r3
}
 800746a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800746c:	2002      	movs	r0, #2
}
 800746e:	4770      	bx	lr

08007470 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007470:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007474:	2a01      	cmp	r2, #1
 8007476:	d037      	beq.n	80074e8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007478:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	2024      	movs	r0, #36	@ 0x24
{
 800747e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007480:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007484:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007486:	6810      	ldr	r0, [r2, #0]
 8007488:	f020 0001 	bic.w	r0, r0, #1
 800748c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800748e:	6890      	ldr	r0, [r2, #8]
 8007490:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007494:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007496:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007498:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800749a:	b310      	cbz	r0, 80074e2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800749c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800749e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80074a0:	4d12      	ldr	r5, [pc, #72]	@ (80074ec <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074a2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074a6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074aa:	4911      	ldr	r1, [pc, #68]	@ (80074f0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80074ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80074b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80074b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80074c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80074c8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80074cc:	2100      	movs	r1, #0
 80074ce:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80074d2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80074d6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80074da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80074dc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80074e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80074e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80074e4:	4608      	mov	r0, r1
 80074e6:	e7ef      	b.n	80074c8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80074e8:	2002      	movs	r0, #2
}
 80074ea:	4770      	bx	lr
 80074ec:	080098d0 	.word	0x080098d0
 80074f0:	080098d8 	.word	0x080098d8

080074f4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80074f4:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80074f8:	2a01      	cmp	r2, #1
 80074fa:	d037      	beq.n	800756c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80074fc:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074fe:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007500:	2024      	movs	r0, #36	@ 0x24
{
 8007502:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007504:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007508:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800750a:	6810      	ldr	r0, [r2, #0]
 800750c:	f020 0001 	bic.w	r0, r0, #1
 8007510:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007512:	6890      	ldr	r0, [r2, #8]
 8007514:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8007518:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800751a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800751c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800751e:	b310      	cbz	r0, 8007566 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007520:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007522:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007524:	4d12      	ldr	r5, [pc, #72]	@ (8007570 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007526:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800752a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800752e:	4911      	ldr	r1, [pc, #68]	@ (8007574 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007530:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007534:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007538:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800753c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007540:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007542:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007544:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007548:	fbb1 f1f5 	udiv	r1, r1, r5
 800754c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007550:	2100      	movs	r1, #0
 8007552:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8007556:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007558:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800755a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800755e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007560:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8007564:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8007566:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007568:	4608      	mov	r0, r1
 800756a:	e7ef      	b.n	800754c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800756c:	2002      	movs	r0, #2
}
 800756e:	4770      	bx	lr
 8007570:	080098d0 	.word	0x080098d0
 8007574:	080098d8 	.word	0x080098d8

08007578 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8007578:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800757a:	8840      	ldrh	r0, [r0, #2]
 800757c:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8007580:	0c00      	lsrs	r0, r0, #16
 8007582:	4770      	bx	lr

08007584 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8007584:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8007586:	8803      	ldrh	r3, [r0, #0]
 8007588:	140d      	asrs	r5, r1, #16
 800758a:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800758c:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8007590:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8007594:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8007598:	428b      	cmp	r3, r1
{
 800759a:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 800759c:	da0f      	bge.n	80075be <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800759e:	8846      	ldrh	r6, [r0, #2]
 80075a0:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80075a4:	4282      	cmp	r2, r0
 80075a6:	dd13      	ble.n	80075d0 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80075a8:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80075aa:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80075ae:	bfb8      	it	lt
 80075b0:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80075b2:	f7fa f929 	bl	8001808 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80075b6:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 80075b8:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 80075ba:	db0e      	blt.n	80075da <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 80075bc:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 80075be:	b2a4      	uxth	r4, r4
 80075c0:	2000      	movs	r0, #0
 80075c2:	f364 000f 	bfi	r0, r4, #0, #16
 80075c6:	b2ad      	uxth	r5, r5
 80075c8:	f365 401f 	bfi	r0, r5, #16, #16
}
 80075cc:	b004      	add	sp, #16
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80075d0:	1a98      	subs	r0, r3, r2
 80075d2:	f7fa f919 	bl	8001808 <MCM_Sqrt>
        if (Vqd.q < 0)
 80075d6:	2c00      	cmp	r4, #0
 80075d8:	daf0      	bge.n	80075bc <Circle_Limitation+0x38>
          new_q = - new_q;
 80075da:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 80075dc:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 80075de:	e7ee      	b.n	80075be <Circle_Limitation+0x3a>

080075e0 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80075e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80075e2:	7fc3      	ldrb	r3, [r0, #31]
 80075e4:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 80075e8:	429a      	cmp	r2, r3
{
 80075ea:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80075ec:	d002      	beq.n	80075f4 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 80075ee:	3301      	adds	r3, #1
 80075f0:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80075f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 80075f4:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	d02f      	beq.n	800765e <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80075fe:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007600:	8ba2      	ldrh	r2, [r4, #28]
 8007602:	42aa      	cmp	r2, r5
 8007604:	d31a      	bcc.n	800763c <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007606:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800760a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800760c:	2e00      	cmp	r6, #0
 800760e:	d07a      	beq.n	8007706 <MCPA_dataLog+0x126>
 8007610:	68a2      	ldr	r2, [r4, #8]
 8007612:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8007616:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8007618:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800761c:	8800      	ldrh	r0, [r0, #0]
 800761e:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007622:	8b25      	ldrh	r5, [r4, #24]
 8007624:	3502      	adds	r5, #2
 8007626:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007628:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800762a:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800762c:	d1f4      	bne.n	8007618 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 800762e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007632:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8007634:	2bfd      	cmp	r3, #253	@ 0xfd
 8007636:	d96b      	bls.n	8007710 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007638:	4295      	cmp	r5, r2
 800763a:	d9da      	bls.n	80075f2 <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 800763c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8007640:	2bfe      	cmp	r3, #254	@ 0xfe
 8007642:	d04a      	beq.n	80076da <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007644:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8007648:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800764a:	8b22      	ldrh	r2, [r4, #24]
 800764c:	6820      	ldr	r0, [r4, #0]
 800764e:	3202      	adds	r2, #2
 8007650:	2309      	movs	r3, #9
 8007652:	6845      	ldr	r5, [r0, #4]
 8007654:	b292      	uxth	r2, r2
 8007656:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	8323      	strh	r3, [r4, #24]
}
 800765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 800765e:	4601      	mov	r1, r0
 8007660:	2209      	movs	r2, #9
 8007662:	f851 0b14 	ldr.w	r0, [r1], #20
 8007666:	6803      	ldr	r3, [r0, #0]
 8007668:	4798      	blx	r3
 800766a:	b390      	cbz	r0, 80076d2 <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 800766c:	4b3a      	ldr	r3, [pc, #232]	@ (8007758 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 800766e:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007674:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8007678:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 800767c:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8007680:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8007682:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8007684:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007686:	d101      	bne.n	800768c <MCPA_dataLog+0xac>
 8007688:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800768a:	e7b9      	b.n	8007600 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 800768c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007690:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007694:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007698:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 800769c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 80076a0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80076a4:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80076a6:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 80076a8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 80076ac:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80076b0:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80076b2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80076b6:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 80076b8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80076bc:	f001 feec 	bl	8009498 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 80076c0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 80076c4:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 80076c8:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80076cc:	441a      	add	r2, r3
 80076ce:	f001 fee3 	bl	8009498 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80076d2:	8b25      	ldrh	r5, [r4, #24]
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	d192      	bne.n	80075fe <MCPA_dataLog+0x1e>
}
 80076d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80076da:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80076de:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80076e2:	4418      	add	r0, r3
 80076e4:	4283      	cmp	r3, r0
 80076e6:	daad      	bge.n	8007644 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80076e8:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80076ea:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80076ec:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80076f4:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80076f6:	5cf3      	ldrb	r3, [r6, r3]
 80076f8:	442b      	add	r3, r5
 80076fa:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80076fc:	b2d3      	uxtb	r3, r2
 80076fe:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007700:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007702:	dbf3      	blt.n	80076ec <MCPA_dataLog+0x10c>
 8007704:	e79e      	b.n	8007644 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8007706:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800770a:	2bfd      	cmp	r3, #253	@ 0xfd
 800770c:	f63f af71 	bhi.w	80075f2 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8007710:	f894 0020 	ldrb.w	r0, [r4, #32]
 8007714:	4298      	cmp	r0, r3
 8007716:	d005      	beq.n	8007724 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8007718:	3001      	adds	r0, #1
 800771a:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800771e:	42aa      	cmp	r2, r5
 8007720:	d390      	bcc.n	8007644 <MCPA_dataLog+0x64>
}
 8007722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007724:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8007728:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 800772a:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800772c:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 800772e:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007732:	daf4      	bge.n	800771e <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007734:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007738:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800773c:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007744:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007748:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800774a:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800774c:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800774e:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007750:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007752:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007754:	dbf2      	blt.n	800773c <MCPA_dataLog+0x15c>
 8007756:	e76f      	b.n	8007638 <MCPA_dataLog+0x58>
 8007758:	20001bc0 	.word	0x20001bc0

0800775c <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007760:	880f      	ldrh	r7, [r1, #0]
{
 8007762:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8007764:	2f00      	cmp	r7, #0
 8007766:	d046      	beq.n	80077f6 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8007768:	6803      	ldr	r3, [r0, #0]
 800776a:	89db      	ldrh	r3, [r3, #14]
 800776c:	42bb      	cmp	r3, r7
 800776e:	d33f      	bcc.n	80077f0 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007770:	788b      	ldrb	r3, [r1, #2]
 8007772:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8007776:	f891 8003 	ldrb.w	r8, [r1, #3]
 800777a:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800777e:	790b      	ldrb	r3, [r1, #4]
 8007780:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007784:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8007786:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007788:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 800778c:	4443      	add	r3, r8
 800778e:	4293      	cmp	r3, r2
 8007790:	dc57      	bgt.n	8007842 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8007792:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007794:	2b00      	cmp	r3, #0
 8007796:	d057      	beq.n	8007848 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8007798:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800779c:	4645      	mov	r5, r8
 800779e:	e011      	b.n	80077c4 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)HF_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : HF_GetIDSize(newID);
 80077a0:	68e3      	ldr	r3, [r4, #12]
 80077a2:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 80077a4:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80077a6:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80077aa:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 80077ae:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80077b0:	f105 0c01 	add.w	ip, r5, #1
 80077b4:	fa5f f58c 	uxtb.w	r5, ip
 80077b8:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 80077ba:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80077bc:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 80077be:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80077c2:	da11      	bge.n	80077e8 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80077c4:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)HF_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80077c8:	6861      	ldr	r1, [r4, #4]
 80077ca:	4648      	mov	r0, r9
 80077cc:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80077d0:	f7f9 fa4a 	bl	8000c68 <HF_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : HF_GetIDSize(newID);
 80077d4:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80077d8:	42ab      	cmp	r3, r5
 80077da:	f04f 0002 	mov.w	r0, #2
 80077de:	d8df      	bhi.n	80077a0 <MCPA_cfgLog+0x44>
 80077e0:	4648      	mov	r0, r9
 80077e2:	f7f9 fa35 	bl	8000c50 <HF_GetIDSize>
 80077e6:	e7db      	b.n	80077a0 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80077e8:	f108 0206 	add.w	r2, r8, #6
 80077ec:	4297      	cmp	r7, r2
 80077ee:	d210      	bcs.n	8007812 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80077f0:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80077f6:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80077f8:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80077fc:	b9ab      	cbnz	r3, 800782a <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8007802:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8007806:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8007808:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 800780c:	2000      	movs	r0, #0
}
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8007812:	3f02      	subs	r7, #2
 8007814:	eba7 0708 	sub.w	r7, r7, r8
 8007818:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 800781a:	7833      	ldrb	r3, [r6, #0]
 800781c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f3      	bne.n	800780c <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8007824:	8b23      	ldrh	r3, [r4, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0e9      	beq.n	80077fe <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800782a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800782c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8007830:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8007832:	8b22      	ldrh	r2, [r4, #24]
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	3202      	adds	r2, #2
 8007838:	6845      	ldr	r5, [r0, #4]
 800783a:	b292      	uxth	r2, r2
 800783c:	2309      	movs	r3, #9
 800783e:	47a8      	blx	r5
 8007840:	e7dd      	b.n	80077fe <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8007842:	200a      	movs	r0, #10
}
 8007844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007848:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800784a:	4698      	mov	r8, r3
 800784c:	e7ce      	b.n	80077ec <MCPA_cfgLog+0x90>
 800784e:	bf00      	nop

08007850 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8007850:	7803      	ldrb	r3, [r0, #0]
 8007852:	b94b      	cbnz	r3, 8007868 <NTC_Init+0x18>
    {
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8007854:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	bfcc      	ite	gt
 800785c:	2300      	movgt	r3, #0
 800785e:	2301      	movle	r3, #1
 8007860:	425b      	negs	r3, r3
 8007862:	b29b      	uxth	r3, r3
 8007864:	8043      	strh	r3, [r0, #2]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8007866:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8007868:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 800786a:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800786c:	2200      	movs	r2, #0
 800786e:	8102      	strh	r2, [r0, #8]
}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop

08007874 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8007874:	7802      	ldrb	r2, [r0, #0]
{
 8007876:	4603      	mov	r3, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8007878:	b9da      	cbnz	r2, 80078b2 <NTC_CalcAvTemp+0x3e>
    {
      uint16_t hAux = rawValue;

      if (0xFFFFU == hAux)
 800787a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800787e:	4281      	cmp	r1, r0
      {
        /* Nothing to do */
      }
      else
      {
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8007880:	885a      	ldrh	r2, [r3, #2]
      if (0xFFFFU == hAux)
 8007882:	d004      	beq.n	800788e <NTC_CalcAvTemp+0x1a>
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8007884:	1a89      	subs	r1, r1, r2
 8007886:	eb02 2221 	add.w	r2, r2, r1, asr #8
 800788a:	b292      	uxth	r2, r2
 800788c:	805a      	strh	r2, [r3, #2]
  if (pHandle->hSensitivity > 0 )
 800788e:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8007892:	8959      	ldrh	r1, [r3, #10]
  if (pHandle->hSensitivity > 0 )
 8007894:	2800      	cmp	r0, #0
 8007896:	dd07      	ble.n	80078a8 <NTC_CalcAvTemp+0x34>
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8007898:	428a      	cmp	r2, r1
 800789a:	d80d      	bhi.n	80078b8 <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800789c:	8999      	ldrh	r1, [r3, #12]
 800789e:	4291      	cmp	r1, r2
 80078a0:	d807      	bhi.n	80078b2 <NTC_CalcAvTemp+0x3e>
      hFault = pHandle->hFaultState;
 80078a2:	8918      	ldrh	r0, [r3, #8]
      }
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80078a4:	8118      	strh	r0, [r3, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80078a6:	4770      	bx	lr
    if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 80078a8:	428a      	cmp	r2, r1
 80078aa:	d305      	bcc.n	80078b8 <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 80078ac:	8999      	ldrh	r1, [r3, #12]
 80078ae:	4291      	cmp	r1, r2
 80078b0:	d2f7      	bcs.n	80078a2 <NTC_CalcAvTemp+0x2e>
 80078b2:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80078b4:	8118      	strh	r0, [r3, #8]
}
 80078b6:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 80078b8:	2008      	movs	r0, #8
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80078ba:	8118      	strh	r0, [r3, #8]
}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop

080078c0 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80078c0:	7803      	ldrb	r3, [r0, #0]
 80078c2:	b95b      	cbnz	r3, 80078dc <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80078c4:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80078c6:	6901      	ldr	r1, [r0, #16]
      wTemp *= pHandle->hSensitivity;
 80078c8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80078cc:	8a80      	ldrh	r0, [r0, #20]
      wTemp -= ((int32_t)pHandle->wV0);
 80078ce:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80078d4:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80078d8:	b200      	sxth	r0, r0
 80078da:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80078dc:	88c0      	ldrh	r0, [r0, #6]
}
 80078de:	b200      	sxth	r0, r0
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop

080078e4 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80078e4:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80078e6:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80078e8:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80078ea:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80078ec:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80078ee:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80078f0:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80078f2:	4770      	bx	lr

080078f4 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80078f4:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80078f6:	4770      	bx	lr

080078f8 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80078f8:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80078fa:	4770      	bx	lr

080078fc <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80078fc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop

08007904 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8007904:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop

0800790c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800790c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800790e:	4770      	bx	lr

08007910 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8007910:	8b80      	ldrh	r0, [r0, #28]
 8007912:	4770      	bx	lr

08007914 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8007914:	2301      	movs	r3, #1
 8007916:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8007918:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800791a:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop

08007920 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8007920:	8bc0      	ldrh	r0, [r0, #30]
 8007922:	4770      	bx	lr

08007924 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8007924:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007926:	4770      	bx	lr

08007928 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8007928:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800792a:	4770      	bx	lr

0800792c <PID_SetKIDivisorPOW2>:
{
 800792c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800792e:	2301      	movs	r3, #1
{
 8007930:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8007932:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007934:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8007938:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 800793a:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800793c:	40a1      	lsls	r1, r4
{
 800793e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8007940:	f7ff fff2 	bl	8007928 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8007944:	4902      	ldr	r1, [pc, #8]	@ (8007950 <PID_SetKIDivisorPOW2+0x24>)
 8007946:	4628      	mov	r0, r5
 8007948:	40a1      	lsls	r1, r4
 800794a:	f7ff ffeb 	bl	8007924 <PID_SetLowerIntegralTermLimit>
}
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	ffff8001 	.word	0xffff8001

08007954 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8007954:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007956:	4770      	bx	lr

08007958 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8007958:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8007960:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8007962:	4770      	bx	lr

08007964 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8007964:	2301      	movs	r3, #1
 8007966:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8007968:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800796a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop

08007970 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007970:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8007974:	4603      	mov	r3, r0
 8007976:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007978:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800797c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8007980:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007984:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8007988:	b17c      	cbz	r4, 80079aa <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800798a:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800798e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8007992:	eb15 0e01 	adds.w	lr, r5, r1
 8007996:	d41d      	bmi.n	80079d4 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8007998:	420d      	tst	r5, r1
 800799a:	4914      	ldr	r1, [pc, #80]	@ (80079ec <PI_Controller+0x7c>)
 800799c:	bf48      	it	mi
 800799e:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80079a0:	45a6      	cmp	lr, r4
 80079a2:	dc02      	bgt.n	80079aa <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80079a4:	691c      	ldr	r4, [r3, #16]
 80079a6:	4574      	cmp	r4, lr
 80079a8:	dd1d      	ble.n	80079e6 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80079aa:	8b99      	ldrh	r1, [r3, #28]
 80079ac:	410a      	asrs	r2, r1
 80079ae:	8bd9      	ldrh	r1, [r3, #30]
 80079b0:	fa44 f101 	asr.w	r1, r4, r1
 80079b4:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80079b6:	4290      	cmp	r0, r2
 80079b8:	da03      	bge.n	80079c2 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80079ba:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80079bc:	4414      	add	r4, r2
 80079be:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80079c0:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80079c2:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80079c4:	bfc5      	ittet	gt
 80079c6:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80079ca:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80079cc:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80079ce:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80079d0:	609c      	str	r4, [r3, #8]
}
 80079d2:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	dde3      	ble.n	80079a0 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80079d8:	2900      	cmp	r1, #0
 80079da:	dde1      	ble.n	80079a0 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80079dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079e0:	428c      	cmp	r4, r1
 80079e2:	d1e2      	bne.n	80079aa <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 80079e4:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80079e6:	4674      	mov	r4, lr
 80079e8:	e7df      	b.n	80079aa <PI_Controller+0x3a>
 80079ea:	bf00      	nop
 80079ec:	80000001 	.word	0x80000001

080079f0 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80079f0:	6882      	ldr	r2, [r0, #8]
{
 80079f2:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80079f4:	8951      	ldrh	r1, [r2, #10]
 80079f6:	f8b2 e014 	ldrh.w	lr, [r2, #20]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80079fa:	8913      	ldrh	r3, [r2, #8]
 80079fc:	f8b2 c012 	ldrh.w	ip, [r2, #18]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007a00:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8007a04:	fb13 230c 	smlabb	r3, r3, ip, r2
 8007a08:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007a0a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8007a0e:	bfbc      	itt	lt
 8007a10:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8007a14:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007a16:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8007a1a:	bf48      	it	mi
 8007a1c:	330f      	addmi	r3, #15
 8007a1e:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8007a22:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8007a24:	f85d fb04 	ldr.w	pc, [sp], #4

08007a28 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007a28:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007a2a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007a2e:	ee07 3a90 	vmov	s15, r3
{
 8007a32:	ed2d 8b02 	vpush	{d8}
 8007a36:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007a38:	68c0      	ldr	r0, [r0, #12]
 8007a3a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007a3e:	f7ff fd9b 	bl	8007578 <VBS_GetAvBusVoltage_V>
 8007a42:	edd4 7a01 	vldr	s15, [r4, #4]
 8007a46:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8007a4a:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8007a4e:	ee00 0a10 	vmov	s0, r0
 8007a52:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8007a56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007a5a:	bd10      	pop	{r4, pc}

08007a5c <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007a5c:	6883      	ldr	r3, [r0, #8]
 8007a5e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007a62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8007a66:	b082      	sub	sp, #8
 8007a68:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a6a:	6883      	ldr	r3, [r0, #8]
 8007a6c:	00da      	lsls	r2, r3, #3
 8007a6e:	d418      	bmi.n	8007aa2 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8007a70:	4b2e      	ldr	r3, [pc, #184]	@ (8007b2c <R3_2_ADCxInit+0xd0>)
  MODIFY_REG(ADCx->CR,
 8007a72:	6882      	ldr	r2, [r0, #8]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	492e      	ldr	r1, [pc, #184]	@ (8007b30 <R3_2_ADCxInit+0xd4>)
 8007a78:	099b      	lsrs	r3, r3, #6
 8007a7a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8007a7e:	fba1 1303 	umull	r1, r3, r1, r3
 8007a82:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007a8e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8007a90:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a92:	9b01      	ldr	r3, [sp, #4]
 8007a94:	b12b      	cbz	r3, 8007aa2 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f9      	bne.n	8007a96 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8007aa2:	6883      	ldr	r3, [r0, #8]
 8007aa4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007ab2:	6883      	ldr	r3, [r0, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dbfc      	blt.n	8007ab2 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007ab8:	6803      	ldr	r3, [r0, #0]
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d408      	bmi.n	8007ad0 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <R3_2_ADCxInit+0xd8>)
 8007ac0:	6883      	ldr	r3, [r0, #8]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007aca:	6803      	ldr	r3, [r0, #0]
 8007acc:	07d9      	lsls	r1, r3, #31
 8007ace:	d5f7      	bpl.n	8007ac0 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8007ad0:	6883      	ldr	r3, [r0, #8]
 8007ad2:	4a18      	ldr	r2, [pc, #96]	@ (8007b34 <R3_2_ADCxInit+0xd8>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	f043 0308 	orr.w	r3, r3, #8
 8007ada:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007adc:	6883      	ldr	r3, [r0, #8]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	f043 0320 	orr.w	r3, r3, #32
 8007ae4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
 8007ae6:	6883      	ldr	r3, [r0, #8]
 8007ae8:	069b      	lsls	r3, r3, #26
 8007aea:	d4fc      	bmi.n	8007ae6 <R3_2_ADCxInit+0x8a>
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8007aec:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 8007aee:	4a11      	ldr	r2, [pc, #68]	@ (8007b34 <R3_2_ADCxInit+0xd8>)
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 8007af0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8007af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af8:	64c3      	str	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 8007afa:	6883      	ldr	r3, [r0, #8]
 8007afc:	4013      	ands	r3, r2
 8007afe:	f043 0308 	orr.w	r3, r3, #8
 8007b02:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007b04:	68c3      	ldr	r3, [r0, #12]
 8007b06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b12:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007b14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007b16:	f023 030f 	bic.w	r3, r3, #15
 8007b1a:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 8007b1c:	6883      	ldr	r3, [r0, #8]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	f043 0304 	orr.w	r3, r3, #4
 8007b24:	6083      	str	r3, [r0, #8]
  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength( ADCx, 0U );
  LL_ADC_REG_StartConversion( ADCx) ;

}
 8007b26:	b002      	add	sp, #8
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	200004e0 	.word	0x200004e0
 8007b30:	053e2d63 	.word	0x053e2d63
 8007b34:	7fffffc0 	.word	0x7fffffc0

08007b38 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b38:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8007b3c:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8007b40:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b42:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8007b44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007b48:	6f1d      	ldr	r5, [r3, #112]	@ 0x70
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8007b4e:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8007b52:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b56:	6863      	ldr	r3, [r4, #4]
 8007b58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b60:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8007b62:	2a05      	cmp	r2, #5
 8007b64:	f200 809d 	bhi.w	8007ca2 <R3_2_GetPhaseCurrents+0x16a>
 8007b68:	e8df f002 	tbb	[pc, r2]
 8007b6c:	031d1d37 	.word	0x031d1d37
 8007b70:	3703      	.short	0x3703
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007b72:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8007b76:	4a4e      	ldr	r2, [pc, #312]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007b78:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	db58      	blt.n	8007c30 <R3_2_GetPhaseCurrents+0xf8>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8007b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b82:	f280 8087 	bge.w	8007c94 <R3_2_GetPhaseCurrents+0x15c>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 8007b86:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007b8a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8007b8e:	4d48      	ldr	r5, [pc, #288]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 8007b90:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007b94:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8007b96:	42aa      	cmp	r2, r5
 8007b98:	da5b      	bge.n	8007c52 <R3_2_GetPhaseCurrents+0x11a>
        {
          Iab->b = -INT16_MAX;
 8007b9a:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007b9c:	fa1f f38c 	uxth.w	r3, ip
 8007ba0:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007ba4:	e030      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007ba6:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8007baa:	4b41      	ldr	r3, [pc, #260]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007bac:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	db39      	blt.n	8007c26 <R3_2_GetPhaseCurrents+0xee>
        else  if (Aux > INT16_MAX)
 8007bb2:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8007bb6:	da62      	bge.n	8007c7e <R3_2_GetPhaseCurrents+0x146>
          Iab->a = (int16_t)Aux;
 8007bb8:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007bbc:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007bbe:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8007bc2:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007bc6:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8007bc8:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8007bca:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007bce:	db39      	blt.n	8007c44 <R3_2_GetPhaseCurrents+0x10c>
          Iab->b = INT16_MAX;
 8007bd0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007bd4:	804a      	strh	r2, [r1, #2]
 8007bd6:	4615      	mov	r5, r2
 8007bd8:	e016      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007bda:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 8007bde:	4b34      	ldr	r3, [pc, #208]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007be0:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007be2:	429c      	cmp	r4, r3
 8007be4:	db1a      	blt.n	8007c1c <R3_2_GetPhaseCurrents+0xe4>
        else  if (Aux > INT16_MAX)
 8007be6:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8007bea:	da3d      	bge.n	8007c68 <R3_2_GetPhaseCurrents+0x130>
          Iab->b = (int16_t)Aux;
 8007bec:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007bee:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007bf0:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 8007bf4:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007bf6:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8007bf8:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8007bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bfe:	db19      	blt.n	8007c34 <R3_2_GetPhaseCurrents+0xfc>
          Iab->a = INT16_MAX;
 8007c00:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007c04:	800b      	strh	r3, [r1, #0]
 8007c06:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c08:	4413      	add	r3, r2
 8007c0a:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8007c0c:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 8007c10:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007c14:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c16:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8007c1a:	4770      	bx	lr
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007c22:	461d      	mov	r5, r3
 8007c24:	e7e4      	b.n	8007bf0 <R3_2_GetPhaseCurrents+0xb8>
 8007c26:	461c      	mov	r4, r3
 8007c28:	46a4      	mov	ip, r4
 8007c2a:	f248 0301 	movw	r3, #32769	@ 0x8001
 8007c2e:	e7c6      	b.n	8007bbe <R3_2_GetPhaseCurrents+0x86>
 8007c30:	4694      	mov	ip, r2
 8007c32:	e7aa      	b.n	8007b8a <R3_2_GetPhaseCurrents+0x52>
        else  if (Aux < -INT16_MAX)
 8007c34:	4c1e      	ldr	r4, [pc, #120]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	da26      	bge.n	8007c88 <R3_2_GetPhaseCurrents+0x150>
          Iab->a = -INT16_MAX;
 8007c3a:	800c      	strh	r4, [r1, #0]
 8007c3c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8007c40:	46a4      	mov	ip, r4
 8007c42:	e7e1      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux < -INT16_MAX)
 8007c44:	4d1a      	ldr	r5, [pc, #104]	@ (8007cb0 <R3_2_GetPhaseCurrents+0x178>)
 8007c46:	42aa      	cmp	r2, r5
 8007c48:	da27      	bge.n	8007c9a <R3_2_GetPhaseCurrents+0x162>
          Iab->b = -INT16_MAX;
 8007c4a:	804d      	strh	r5, [r1, #2]
 8007c4c:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007c50:	e7da      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux > INT16_MAX)
 8007c52:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007c56:	db0c      	blt.n	8007c72 <R3_2_GetPhaseCurrents+0x13a>
          Iab->b = INT16_MAX;
 8007c58:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	804b      	strh	r3, [r1, #2]
 8007c60:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c62:	fa1f f38c 	uxth.w	r3, ip
 8007c66:	e7cf      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
 8007c68:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007c6c:	4614      	mov	r4, r2
 8007c6e:	4615      	mov	r5, r2
 8007c70:	e7be      	b.n	8007bf0 <R3_2_GetPhaseCurrents+0xb8>
          Iab->b = (int16_t)Aux;
 8007c72:	b215      	sxth	r5, r2
 8007c74:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c76:	fa1f f38c 	uxth.w	r3, ip
 8007c7a:	b292      	uxth	r2, r2
 8007c7c:	e7c4      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
 8007c7e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007c82:	461c      	mov	r4, r3
 8007c84:	469c      	mov	ip, r3
 8007c86:	e79a      	b.n	8007bbe <R3_2_GetPhaseCurrents+0x86>
          Iab->a = (int16_t)Aux;
 8007c88:	fa0f fc83 	sxth.w	ip, r3
 8007c8c:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	e7b9      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
 8007c94:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8007c98:	e777      	b.n	8007b8a <R3_2_GetPhaseCurrents+0x52>
          Iab->b = (int16_t)Aux;
 8007c9a:	b215      	sxth	r5, r2
 8007c9c:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007c9e:	b292      	uxth	r2, r2
 8007ca0:	e7b2      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
    pHandle->_Super.Ia = Iab->a;
 8007ca2:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8007ca6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007caa:	880b      	ldrh	r3, [r1, #0]
 8007cac:	884a      	ldrh	r2, [r1, #2]
 8007cae:	e7ab      	b.n	8007c08 <R3_2_GetPhaseCurrents+0xd0>
 8007cb0:	ffff8001 	.word	0xffff8001

08007cb4 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Returns the value of R3_2_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007cb4:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007cb6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007cba:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8007cbe:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007cc2:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007cc6:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007cc8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ccc:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007cce:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007cd0:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007cd4:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007cd8:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007cda:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007cdc:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007cde:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007ce0:	4904      	ldr	r1, [pc, #16]	@ (8007cf4 <R3_2_SetADCSampPointPolarization+0x40>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
}
 8007ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007ce8:	420b      	tst	r3, r1
}
 8007cea:	bf14      	ite	ne
 8007cec:	2001      	movne	r0, #1
 8007cee:	2000      	moveq	r0, #0
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	02000070 	.word	0x02000070

08007cf8 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 8007cf8:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007cfa:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007cfe:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8007d02:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007d04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007d08:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8007d0e:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007d12:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d16:	6853      	ldr	r3, [r2, #4]
 8007d18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d20:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007d22:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8007d26:	2b0f      	cmp	r3, #15
 8007d28:	d80d      	bhi.n	8007d46 <R3_2_HFCurrentsPolarizationAB+0x4e>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007d2a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007d2e:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007d32:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8007d34:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007d38:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007d3a:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007d3c:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007d46:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007d48:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8007d4a:	600b      	str	r3, [r1, #0]
}
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop

08007d50 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007d50:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 8007d54:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007d56:	3322      	adds	r3, #34	@ 0x22
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d58:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8007d5c:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007d5e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8007d62:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8007d66:	6853      	ldr	r3, [r2, #4]
 8007d68:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d70:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007d72:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8007d76:	2b0f      	cmp	r3, #15
 8007d78:	d80a      	bhi.n	8007d90 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007d7a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007d7e:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8007d82:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007d84:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007d86:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007d88:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8007d8c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007d90:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007d92:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8007d96:	600b      	str	r3, [r1, #0]
}
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop

08007d9c <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d9c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007da0:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007da4:	681b      	ldr	r3, [r3, #0]
{
 8007da6:	b4f0      	push	{r4, r5, r6, r7}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007da8:	699c      	ldr	r4, [r3, #24]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007daa:	2100      	movs	r1, #0
 8007dac:	f024 0408 	bic.w	r4, r4, #8
 8007db0:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 8007db4:	619c      	str	r4, [r3, #24]
 8007db6:	699c      	ldr	r4, [r3, #24]
 8007db8:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8007dbc:	619c      	str	r4, [r3, #24]
 8007dbe:	69dc      	ldr	r4, [r3, #28]
 8007dc0:	f024 0408 	bic.w	r4, r4, #8
 8007dc4:	61dc      	str	r4, [r3, #28]
 8007dc6:	69dc      	ldr	r4, [r3, #28]
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8007dc8:	0851      	lsrs	r1, r2, #1
 8007dca:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8007dce:	3a05      	subs	r2, #5
 8007dd0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007dd2:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007dd4:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007dd6:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007dda:	699a      	ldr	r2, [r3, #24]
 8007ddc:	f042 0208 	orr.w	r2, r2, #8
 8007de0:	619a      	str	r2, [r3, #24]
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007de8:	619a      	str	r2, [r3, #24]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	f042 0208 	orr.w	r2, r2, #8
 8007df0:	61da      	str	r2, [r3, #28]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007df8:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e00:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007e02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8007e0a:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8007e0e:	2a02      	cmp	r2, #2
 8007e10:	d004      	beq.n	8007e1c <R3_2_SwitchOnPWM+0x80>
  }
  else
  {
    /* Nothing to do */
  }
  pHandle->_Super.PWMState = true;
 8007e12:	2301      	movs	r3, #1
}
 8007e14:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 8007e16:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007e1a:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007e1c:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007e1e:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8007e20:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007e24:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007e26:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007e2a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007e2c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8007e30:	f240 5c55 	movw	ip, #1365	@ 0x555
 8007e34:	ea17 0f0c 	tst.w	r7, ip
 8007e38:	d007      	beq.n	8007e4a <R3_2_SwitchOnPWM+0xae>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007e3a:	61ae      	str	r6, [r5, #24]
 8007e3c:	618c      	str	r4, [r1, #24]
 8007e3e:	619a      	str	r2, [r3, #24]
  pHandle->_Super.PWMState = true;
 8007e40:	2301      	movs	r3, #1
}
 8007e42:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 8007e44:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007e48:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007e4a:	62ae      	str	r6, [r5, #40]	@ 0x28
 8007e4c:	628c      	str	r4, [r1, #40]	@ 0x28
 8007e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  pHandle->_Super.PWMState = true;
 8007e50:	2301      	movs	r3, #1
}
 8007e52:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 8007e54:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 8007e5c:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e5e:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8007e62:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007e64:	6853      	ldr	r3, [r2, #4]
 8007e66:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007e70:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8007e74:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8007e78:	480c      	ldr	r0, [pc, #48]	@ (8007eac <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007e7a:	3222      	adds	r2, #34	@ 0x22
 8007e7c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8007e80:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8007e84:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8007e88:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	bfa8      	it	ge
 8007e8e:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8007e90:	4283      	cmp	r3, r0
 8007e92:	bfb8      	it	lt
 8007e94:	4603      	movlt	r3, r0
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f363 020f 	bfi	r2, r3, #0, #16
 8007e9e:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8007ea6:	600a      	str	r2, [r1, #0]
}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	ffff8001 	.word	0xffff8001

08007eb0 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007eb0:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

    /* Disable TIMx preload */
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007eb4:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007eb8:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007eba:	6999      	ldr	r1, [r3, #24]
 8007ebc:	f021 0108 	bic.w	r1, r1, #8
{
 8007ec0:	b4f0      	push	{r4, r5, r6, r7}
 8007ec2:	6199      	str	r1, [r3, #24]
 8007ec4:	69d9      	ldr	r1, [r3, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007ec6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ec8:	2401      	movs	r4, #1
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007eca:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8007ece:	61d9      	str	r1, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ed0:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007ed2:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	f042 0208 	orr.w	r2, r2, #8
 8007eda:	619a      	str	r2, [r3, #24]
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ee2:	61da      	str	r2, [r3, #28]
    /* Apply new CC values */
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ee6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007eea:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ef2:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007ef4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8007ef8:	2a02      	cmp	r2, #2
 8007efa:	d113      	bne.n	8007f24 <R3_2_RLSwitchOnPWM+0x74>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8007efc:	6a1f      	ldr	r7, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007efe:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007f00:	6c01      	ldr	r1, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007f02:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007f04:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007f08:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007f0c:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8007f10:	f240 5c55 	movw	ip, #1365	@ 0x555
 8007f14:	ea17 0f0c 	tst.w	r7, ip
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f18:	bf15      	itete	ne
 8007f1a:	61ae      	strne	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007f1c:	62ae      	streq	r6, [r5, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f1e:	618c      	strne	r4, [r1, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007f20:	628c      	streq	r4, [r1, #40]	@ 0x28
 8007f22:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8007f24:	2203      	movs	r2, #3
    pHandle->_Super.PWMState = true;
 8007f26:	2301      	movs	r3, #1
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007f28:	bcf0      	pop	{r4, r5, r6, r7}
    pHdl->Sector = SECTOR_4;
 8007f2a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
    pHandle->_Super.PWMState = true;
 8007f2e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007f32:	4770      	bx	lr

08007f34 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f34:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007f38:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	f022 0208 	bic.w	r2, r2, #8
 8007f46:	619a      	str	r2, [r3, #24]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f4e:	619a      	str	r2, [r3, #24]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	f022 0208 	bic.w	r2, r2, #8
 8007f56:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f58:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f5a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007f5c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	f042 0208 	orr.w	r2, r2, #8
 8007f64:	619a      	str	r2, [r3, #24]
 8007f66:	699a      	ldr	r2, [r3, #24]
 8007f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f6c:	619a      	str	r2, [r3, #24]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	f042 0208 	orr.w	r2, r2, #8
 8007f74:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007f76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8007f7e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d000      	beq.n	8007f88 <R3_2_TurnOnLowSides+0x54>
 8007f86:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007f88:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8007f8c:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007f8e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007f90:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007f94:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007f96:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007f9a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8007f9e:	618c      	str	r4, [r1, #24]
}
 8007fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fa4:	619a      	str	r2, [r3, #24]
 8007fa6:	4770      	bx	lr

08007fa8 <R3_2_SwitchOffPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007fa8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007fac:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007fae:	6c53      	ldr	r3, [r2, #68]	@ 0x44
{
 8007fb0:	b410      	push	{r4}
  if (true == pHandle->_Super.BrakeActionLock)
 8007fb2:	f890 4083 	ldrb.w	r4, [r0, #131]	@ 0x83
  pHandle->_Super.PWMState = false;
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fbc:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007fc0:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 8007fc4:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8007fc6:	b91c      	cbnz	r4, 8007fd0 <R3_2_SwitchOffPWM+0x28>
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8007fc8:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d002      	beq.n	8007fd6 <R3_2_SwitchOffPWM+0x2e>
}
 8007fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd4:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007fd6:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007fda:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007fde:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 8007fe0:	6294      	str	r4, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007fe2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007fe6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8007fea:	628c      	str	r4, [r1, #40]	@ 0x28
}
 8007fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ff2:	4770      	bx	lr

08007ff4 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007ff4:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 8007ffe:	f101 0e08 	add.w	lr, r1, #8
 8008002:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8008004:	f85e 300c 	ldr.w	r3, [lr, ip]
 8008008:	f36f 130f 	bfc	r3, #4, #12
 800800c:	4313      	orrs	r3, r2
 800800e:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8008012:	684a      	ldr	r2, [r1, #4]
 8008014:	f000 0303 	and.w	r3, r0, #3
 8008018:	4313      	orrs	r3, r2
 800801a:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800801c:	680a      	ldr	r2, [r1, #0]
 800801e:	f000 0010 	and.w	r0, r0, #16
 8008022:	2301      	movs	r3, #1
 8008024:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8008026:	ea33 0202 	bics.w	r2, r3, r2
 800802a:	d014      	beq.n	8008056 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800802c:	4a14      	ldr	r2, [pc, #80]	@ (8008080 <R3_2_SetAOReferenceVoltage+0x8c>)
 800802e:	4815      	ldr	r0, [pc, #84]	@ (8008084 <R3_2_SetAOReferenceVoltage+0x90>)
 8008030:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8008032:	680c      	ldr	r4, [r1, #0]
 8008034:	fba0 0202 	umull	r0, r2, r0, r2
 8008038:	0cd2      	lsrs	r2, r2, #19
 800803a:	4323      	orrs	r3, r4
 800803c:	00d2      	lsls	r2, r2, #3
 800803e:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8008040:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8008042:	9b00      	ldr	r3, [sp, #0]
 8008044:	b12b      	cbz	r3, 8008052 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	3b01      	subs	r3, #1
 800804a:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f9      	bne.n	8008046 <R3_2_SetAOReferenceVoltage+0x52>
}
 8008052:	b002      	add	sp, #8
 8008054:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8008056:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <R3_2_SetAOReferenceVoltage+0x8c>)
 8008058:	4a0a      	ldr	r2, [pc, #40]	@ (8008084 <R3_2_SetAOReferenceVoltage+0x90>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	fba2 2303 	umull	r2, r3, r2, r3
 8008060:	0cdb      	lsrs	r3, r3, #19
 8008062:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008066:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008068:	9b01      	ldr	r3, [sp, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f1      	beq.n	8008052 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	3b01      	subs	r3, #1
 8008072:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f9      	bne.n	800806e <R3_2_SetAOReferenceVoltage+0x7a>
}
 800807a:	b002      	add	sp, #8
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	200004e0 	.word	0x200004e0
 8008084:	431bde83 	.word	0x431bde83

08008088 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008088:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800808c:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800808e:	699a      	ldr	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008090:	2100      	movs	r1, #0
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008092:	f022 0208 	bic.w	r2, r2, #8
 8008096:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008098:	6359      	str	r1, [r3, #52]	@ 0x34
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800809a:	699a      	ldr	r2, [r3, #24]
 800809c:	f042 0208 	orr.w	r2, r2, #8
 80080a0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80080a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080a8:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80080aa:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d000      	beq.n	80080b4 <R3_2_RLTurnOnLowSides+0x2c>
 80080b2:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80080b4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 80080b8:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80080ba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80080bc:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 80080c0:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80080c2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80080c6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 80080ca:	628c      	str	r4, [r1, #40]	@ 0x28
}
 80080cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80080d2:	4770      	bx	lr

080080d4 <R3_2_Init>:
{
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80080d8:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 80080dc:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 80080de:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80080e2:	6872      	ldr	r2, [r6, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80080e4:	682c      	ldr	r4, [r5, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80080e6:	f8d5 b00c 	ldr.w	fp, [r5, #12]
{
 80080ea:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80080ec:	e9d5 c006 	ldrd	ip, r0, [r5, #24]
{
 80080f0:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80080f2:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80080f6:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80080fa:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80080fc:	6a28      	ldr	r0, [r5, #32]
 80080fe:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8008100:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8008104:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8008106:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8008108:	e9d5 a904 	ldrd	sl, r9, [r5, #16]
 800810c:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800810e:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008112:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008114:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8008116:	f022 0220 	bic.w	r2, r2, #32
 800811a:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800811c:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	f022 0204 	bic.w	r2, r2, #4
 8008124:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8008126:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	f022 0220 	bic.w	r2, r2, #32
 8008130:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8008132:	6038      	str	r0, [r7, #0]
      if (TIM1 ==  TIMx)
 8008134:	4a8f      	ldr	r2, [pc, #572]	@ (8008374 <R3_2_Init+0x2a0>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8008136:	4890      	ldr	r0, [pc, #576]	@ (8008378 <R3_2_Init+0x2a4>)
 8008138:	4294      	cmp	r4, r2
 800813a:	6902      	ldr	r2, [r0, #16]
 800813c:	bf0c      	ite	eq
 800813e:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 8008142:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8008146:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8008148:	b181      	cbz	r1, 800816c <R3_2_Init+0x98>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800814a:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800814e:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8008152:	6989      	ldr	r1, [r1, #24]
 8008154:	f04e 0e01 	orr.w	lr, lr, #1
 8008158:	f8c2 e000 	str.w	lr, [r2]
 800815c:	6802      	ldr	r2, [r0, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	6002      	str	r2, [r0, #0]
 8008164:	680a      	ldr	r2, [r1, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800816c:	b1b3      	cbz	r3, 800819c <R3_2_Init+0xc8>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800816e:	f895 20a5 	ldrb.w	r2, [r5, #165]	@ 0xa5
 8008172:	2a01      	cmp	r2, #1
 8008174:	d00a      	beq.n	800818c <R3_2_Init+0xb8>
 8008176:	f1bc 0f00 	cmp.w	ip, #0
 800817a:	d007      	beq.n	800818c <R3_2_Init+0xb8>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800817c:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 8008180:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8008182:	9303      	str	r3, [sp, #12]
 8008184:	4661      	mov	r1, ip
 8008186:	f7ff ff35 	bl	8007ff4 <R3_2_SetAOReferenceVoltage>
 800818a:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800819a:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800819c:	f1bb 0f00 	cmp.w	fp, #0
 80081a0:	d017      	beq.n	80081d2 <R3_2_Init+0xfe>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 80081a2:	f895 30a6 	ldrb.w	r3, [r5, #166]	@ 0xa6
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d007      	beq.n	80081ba <R3_2_Init+0xe6>
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	b12b      	cbz	r3, 80081ba <R3_2_Init+0xe6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80081ae:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 80081b2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80081b4:	4619      	mov	r1, r3
 80081b6:	f7ff ff1d 	bl	8007ff4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80081ba:	f8db 3000 	ldr.w	r3, [fp]
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80081c6:	f8db 3000 	ldr.w	r3, [fp]
 80081ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081ce:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 80081d2:	f1ba 0f00 	cmp.w	sl, #0
 80081d6:	d017      	beq.n	8008208 <R3_2_Init+0x134>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 80081d8:	f895 30a7 	ldrb.w	r3, [r5, #167]	@ 0xa7
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d007      	beq.n	80081f0 <R3_2_Init+0x11c>
 80081e0:	9b01      	ldr	r3, [sp, #4]
 80081e2:	b12b      	cbz	r3, 80081f0 <R3_2_Init+0x11c>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 80081e4:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 80081e8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80081ea:	4619      	mov	r1, r3
 80081ec:	f7ff ff02 	bl	8007ff4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80081f0:	f8da 3000 	ldr.w	r3, [sl]
 80081f4:	f043 0301 	orr.w	r3, r3, #1
 80081f8:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80081fc:	f8da 3000 	ldr.w	r3, [sl]
 8008200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008204:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	d017      	beq.n	800823e <R3_2_Init+0x16a>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800820e:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 8008212:	2b01      	cmp	r3, #1
 8008214:	d007      	beq.n	8008226 <R3_2_Init+0x152>
 8008216:	9b02      	ldr	r3, [sp, #8]
 8008218:	b12b      	cbz	r3, 8008226 <R3_2_Init+0x152>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800821a:	f8b5 20a2 	ldrh.w	r2, [r5, #162]	@ 0xa2
 800821e:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8008220:	4619      	mov	r1, r3
 8008222:	f7ff fee7 	bl	8007ff4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8008226:	f8d9 3000 	ldr.w	r3, [r9]
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8008232:	f8d9 3000 	ldr.w	r3, [r9]
 8008236:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800823a:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800823e:	68b3      	ldr	r3, [r6, #8]
 8008240:	07da      	lsls	r2, r3, #31
 8008242:	d56d      	bpl.n	8008320 <R3_2_Init+0x24c>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d566      	bpl.n	8008318 <R3_2_Init+0x244>
  volatile uint32_t Brk2Timeout = 1000;
 800824a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800824e:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008258:	6863      	ldr	r3, [r4, #4]
 800825a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800825e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008262:	f043 0320 	orr.w	r3, r3, #32
 8008266:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008268:	69a3      	ldr	r3, [r4, #24]
 800826a:	f043 0308 	orr.w	r3, r3, #8
 800826e:	61a3      	str	r3, [r4, #24]
 8008270:	69a3      	ldr	r3, [r4, #24]
 8008272:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008276:	61a3      	str	r3, [r4, #24]
 8008278:	69e3      	ldr	r3, [r4, #28]
 800827a:	f043 0308 	orr.w	r3, r3, #8
 800827e:	61e3      	str	r3, [r4, #28]
 8008280:	69e3      	ldr	r3, [r4, #28]
 8008282:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008286:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008288:	6963      	ldr	r3, [r4, #20]
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8008290:	f895 30a9 	ldrb.w	r3, [r5, #169]	@ 0xa9
 8008294:	2b02      	cmp	r3, #2
 8008296:	d058      	beq.n	800834a <R3_2_Init+0x276>
    if (M1 == pHandle->_Super.Motor)
 8008298:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800829c:	2b00      	cmp	r3, #0
 800829e:	d046      	beq.n	800832e <R3_2_Init+0x25a>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80082a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80082aa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80082ae:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80082b2:	6063      	str	r3, [r4, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80082b4:	6122      	str	r2, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80082b6:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 80082b8:	9a05      	ldr	r2, [sp, #20]
 80082ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082be:	b172      	cbz	r2, 80082de <R3_2_Init+0x20a>
 80082c0:	b16b      	cbz	r3, 80082de <R3_2_Init+0x20a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80082c2:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 80082c6:	e000      	b.n	80082ca <R3_2_Init+0x1f6>
 80082c8:	b14b      	cbz	r3, 80082de <R3_2_Init+0x20a>
 80082ca:	6121      	str	r1, [r4, #16]
    Brk2Timeout--;
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80082d2:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 80082d4:	9a05      	ldr	r2, [sp, #20]
 80082d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082da:	2a00      	cmp	r2, #0
 80082dc:	d1f4      	bne.n	80082c8 <R3_2_Init+0x1f4>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80082de:	68e3      	ldr	r3, [r4, #12]
 80082e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e4:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80082e6:	6a23      	ldr	r3, [r4, #32]
 80082e8:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082ec:	f06f 0201 	mvn.w	r2, #1
  SET_BIT(TIMx->CCER, Channels);
 80082f0:	f043 0305 	orr.w	r3, r3, #5
 80082f4:	6223      	str	r3, [r4, #32]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80082f6:	6122      	str	r2, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80082f8:	68e3      	ldr	r3, [r4, #12]
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	60e3      	str	r3, [r4, #12]
      pHandle->ADCTriggerEdge = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8008300:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8008302:	2340      	movs	r3, #64	@ 0x40
 8008304:	f8a8 2096 	strh.w	r2, [r8, #150]	@ 0x96
 8008308:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800830a:	6873      	ldr	r3, [r6, #4]
 800830c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008310:	6073      	str	r3, [r6, #4]
}
 8008312:	b007      	add	sp, #28
 8008314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fb9f 	bl	8007a5c <R3_2_ADCxInit>
 800831e:	e794      	b.n	800824a <R3_2_Init+0x176>
        R3_2_ADCxInit(ADCx_1);
 8008320:	4630      	mov	r0, r6
 8008322:	f7ff fb9b 	bl	8007a5c <R3_2_ADCxInit>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	07db      	lsls	r3, r3, #31
 800832a:	d48e      	bmi.n	800824a <R3_2_Init+0x176>
 800832c:	e7f4      	b.n	8008318 <R3_2_Init+0x244>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800832e:	f895 30a4 	ldrb.w	r3, [r5, #164]	@ 0xa4
 8008332:	2b01      	cmp	r3, #1
 8008334:	d00d      	beq.n	8008352 <R3_2_Init+0x27e>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8008336:	2b03      	cmp	r3, #3
 8008338:	d1b2      	bne.n	80082a0 <R3_2_Init+0x1cc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800833a:	2201      	movs	r2, #1
 800833c:	6322      	str	r2, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800833e:	6962      	ldr	r2, [r4, #20]
 8008340:	f042 0201 	orr.w	r2, r2, #1
 8008344:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008346:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8008348:	e7aa      	b.n	80082a0 <R3_2_Init+0x1cc>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800834a:	f895 30aa 	ldrb.w	r3, [r5, #170]	@ 0xaa
 800834e:	2b01      	cmp	r3, #1
 8008350:	d004      	beq.n	800835c <R3_2_Init+0x288>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8008352:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 8008356:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8008358:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800835a:	e7a1      	b.n	80082a0 <R3_2_Init+0x1cc>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800835c:	f895 20a4 	ldrb.w	r2, [r5, #164]	@ 0xa4
 8008360:	2a03      	cmp	r2, #3
 8008362:	d1f6      	bne.n	8008352 <R3_2_Init+0x27e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8008364:	6323      	str	r3, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800836e:	6322      	str	r2, [r4, #48]	@ 0x30
}
 8008370:	e7ef      	b.n	8008352 <R3_2_Init+0x27e>
 8008372:	bf00      	nop
 8008374:	40012c00 	.word	0x40012c00
 8008378:	e0042000 	.word	0xe0042000

0800837c <R3_2_SetOffsetCalib>:
{
 800837c:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800837e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8008382:	680b      	ldr	r3, [r1, #0]
 8008384:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 8008388:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800838a:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800838e:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 8008392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008396:	4770      	bx	lr

08008398 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 8008398:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800839c:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 80083a0:	608b      	str	r3, [r1, #8]
 80083a2:	e9c1 0200 	strd	r0, r2, [r1]
}
 80083a6:	4770      	bx	lr

080083a8 <R3_2_CurrentReadingPolarization>:
{
 80083a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80083ac:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80083b0:	6803      	ldr	r3, [r0, #0]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80083b2:	6815      	ldr	r5, [r2, #0]
{
 80083b4:	b083      	sub	sp, #12
    pHandle->PhaseAOffset = 0U;
 80083b6:	2600      	movs	r6, #0
 80083b8:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80083bc:	9300      	str	r3, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80083be:	6943      	ldr	r3, [r0, #20]
 80083c0:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 80083c2:	f880 6098 	strb.w	r6, [r0, #152]	@ 0x98
  CLEAR_BIT(TIMx->CCER, Channels);
 80083c6:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 80083c8:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 80083cc:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 80083d0:	f023 0305 	bic.w	r3, r3, #5
 80083d4:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80083d6:	4b3b      	ldr	r3, [pc, #236]	@ (80084c4 <R3_2_CurrentReadingPolarization+0x11c>)
 80083d8:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80083da:	4b3b      	ldr	r3, [pc, #236]	@ (80084c8 <R3_2_CurrentReadingPolarization+0x120>)
 80083dc:	6143      	str	r3, [r0, #20]
{
 80083de:	4604      	mov	r4, r0
    pHandle->PolarizationSector=SECTOR_5;
 80083e0:	2704      	movs	r7, #4
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80083e2:	2380      	movs	r3, #128	@ 0x80
 80083e4:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    pHandle->PolarizationSector=SECTOR_5;
 80083e8:	f880 7099 	strb.w	r7, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 80083ec:	f880 707a 	strb.w	r7, [r0, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80083f0:	f7ff fcd4 	bl	8007d9c <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 80083f4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 80083f8:	f104 0856 	add.w	r8, r4, #86	@ 0x56
 80083fc:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 8008400:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 8008404:	4641      	mov	r1, r8
 8008406:	464b      	mov	r3, r9
 8008408:	4628      	mov	r0, r5
 800840a:	f7fa f8d9 	bl	80025c0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800840e:	4620      	mov	r0, r4
 8008410:	f7ff fdca 	bl	8007fa8 <R3_2_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8008414:	4b2d      	ldr	r3, [pc, #180]	@ (80084cc <R3_2_CurrentReadingPolarization+0x124>)
 8008416:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008418:	4620      	mov	r0, r4
    pHandle->PolarizationCounter = 0U;
 800841a:	f884 6098 	strb.w	r6, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800841e:	f884 6099 	strb.w	r6, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 8008422:	f884 607a 	strb.w	r6, [r4, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8008426:	f7ff fcb9 	bl	8007d9c <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800842a:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800842e:	464b      	mov	r3, r9
 8008430:	f892 20a4 	ldrb.w	r2, [r2, #164]	@ 0xa4
 8008434:	4641      	mov	r1, r8
 8008436:	4628      	mov	r0, r5
 8008438:	f7fa f8c2 	bl	80025c0 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800843c:	4620      	mov	r0, r4
 800843e:	f7ff fdb3 	bl	8007fa8 <R3_2_SwitchOffPWM>
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8008442:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8008446:	40fb      	lsrs	r3, r7
 8008448:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800844c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8008450:	40fb      	lsrs	r3, r7
 8008452:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8008456:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800845a:	40fb      	lsrs	r3, r7
 800845c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    pHandle->_Super.offsetCalibStatus = true;
 8008460:	2301      	movs	r3, #1
 8008462:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8008466:	9b00      	ldr	r3, [sp, #0]
 8008468:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800846a:	9b01      	ldr	r3, [sp, #4]
 800846c:	6163      	str	r3, [r4, #20]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800846e:	69ab      	ldr	r3, [r5, #24]
 8008470:	f023 0308 	bic.w	r3, r3, #8
 8008474:	61ab      	str	r3, [r5, #24]
 8008476:	69ab      	ldr	r3, [r5, #24]
 8008478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800847c:	61ab      	str	r3, [r5, #24]
 800847e:	69eb      	ldr	r3, [r5, #28]
 8008480:	f023 0308 	bic.w	r3, r3, #8
 8008484:	61eb      	str	r3, [r5, #28]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8008486:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
 800848a:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800848c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800848e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008490:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008492:	69ab      	ldr	r3, [r5, #24]
 8008494:	f043 0308 	orr.w	r3, r3, #8
 8008498:	61ab      	str	r3, [r5, #24]
 800849a:	69ab      	ldr	r3, [r5, #24]
 800849c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80084a0:	61ab      	str	r3, [r5, #24]
 80084a2:	69eb      	ldr	r3, [r5, #28]
 80084a4:	f043 0308 	orr.w	r3, r3, #8
 80084a8:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80084aa:	6a2b      	ldr	r3, [r5, #32]
 80084ac:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 80084b0:	f043 0305 	orr.w	r3, r3, #5
 80084b4:	622b      	str	r3, [r5, #32]
  pHandle->_Super.Sector = SECTOR_5;
 80084b6:	f884 707a 	strb.w	r7, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 80084ba:	f884 6083 	strb.w	r6, [r4, #131]	@ 0x83
}
 80084be:	b003      	add	sp, #12
 80084c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c4:	08007cf9 	.word	0x08007cf9
 80084c8:	08007cb5 	.word	0x08007cb5
 80084cc:	08007d51 	.word	0x08007d51

080084d0 <R3_2_SetADCSampPointSectX>:
{
 80084d0:	b530      	push	{r4, r5, lr}
    if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80084d2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 80084d6:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 80084da:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 80084de:	ebae 0203 	sub.w	r2, lr, r3
 80084e2:	f8b1 4068 	ldrh.w	r4, [r1, #104]	@ 0x68
 80084e6:	b292      	uxth	r2, r2
 80084e8:	42a2      	cmp	r2, r4
 80084ea:	d917      	bls.n	800851c <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 80084ec:	2204      	movs	r2, #4
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 80084ee:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 80084f2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 80084f6:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80084f8:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80084fa:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80084fe:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8008502:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008506:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008508:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800850a:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800850c:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800850e:	6852      	ldr	r2, [r2, #4]
 8008510:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <R3_2_SetADCSampPointSectX+0x84>)
 8008512:	421a      	tst	r2, r3
}
 8008514:	bf14      	ite	ne
 8008516:	2001      	movne	r0, #1
 8008518:	2000      	moveq	r0, #0
 800851a:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800851c:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 8008520:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8008524:	fa1f fc8c 	uxth.w	ip, ip
 8008528:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800852c:	d904      	bls.n	8008538 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800852e:	f8b1 206a 	ldrh.w	r2, [r1, #106]	@ 0x6a
 8008532:	1a9b      	subs	r3, r3, r2
 8008534:	b29b      	uxth	r3, r3
 8008536:	e7df      	b.n	80084f8 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8008538:	4423      	add	r3, r4
 800853a:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800853c:	459e      	cmp	lr, r3
 800853e:	d8db      	bhi.n	80084f8 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 8008540:	43db      	mvns	r3, r3
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8008542:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 8008546:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800854a:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 800854e:	b29b      	uxth	r3, r3
 8008550:	e7d2      	b.n	80084f8 <R3_2_SetADCSampPointSectX+0x28>
 8008552:	bf00      	nop
 8008554:	02000070 	.word	0x02000070

08008558 <R3_2_TIMx_UP_IRQHandler>:
{
 8008558:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800855a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800855e:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8008562:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008564:	681d      	ldr	r5, [r3, #0]
{
 8008566:	4601      	mov	r1, r0
 8008568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 800856c:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    if (OPAMPParams != NULL)
 800856e:	b1d6      	cbz	r6, 80085a6 <R3_2_TIMx_UP_IRQHandler+0x4e>
 8008570:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8008574:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1fc      	bne.n	8008574 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800857a:	eb06 030c 	add.w	r3, r6, ip
 800857e:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 8008580:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008584:	d006      	beq.n	8008594 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8008586:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800858a:	6834      	ldr	r4, [r6, #0]
 800858c:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 8008590:	433c      	orrs	r4, r7
 8008592:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8008594:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 8008596:	1c66      	adds	r6, r4, #1
 8008598:	d005      	beq.n	80085a6 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800859a:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800859c:	6833      	ldr	r3, [r6, #0]
 800859e:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 80085a2:	4323      	orrs	r3, r4
 80085a4:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 80085a6:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 80085aa:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80085ac:	431c      	orrs	r4, r3
 80085ae:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 80085b0:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80085b4:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80085b6:	4303      	orrs	r3, r0
 80085b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80085ba:	686b      	ldr	r3, [r5, #4]
 80085bc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80085c4:	2280      	movs	r2, #128	@ 0x80
 80085c6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80085ca:	606b      	str	r3, [r5, #4]
}
 80085cc:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 80085d0:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80085d2:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 80085d6:	4770      	bx	lr

080085d8 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 80085d8:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 80085dc:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 80085de:	2900      	cmp	r1, #0
 80085e0:	d13d      	bne.n	800865e <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80085e2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80085e6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80085e8:	699a      	ldr	r2, [r3, #24]
 80085ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80085ee:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80085f2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80085f6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	f042 0201 	orr.w	r2, r2, #1
 80085fe:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	f022 0204 	bic.w	r2, r2, #4
 8008606:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008608:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800860a:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800860e:	2a01      	cmp	r2, #1
 8008610:	d033      	beq.n	800867a <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8008612:	2a02      	cmp	r2, #2
 8008614:	d10f      	bne.n	8008636 <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800861c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8008620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008624:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	f042 0210 	orr.w	r2, r2, #16
 800862c:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008634:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008636:	69da      	ldr	r2, [r3, #28]
 8008638:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800863c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008640:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8008644:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008646:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8008648:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800864c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008650:	621a      	str	r2, [r3, #32]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008658:	621a      	str	r2, [r3, #32]
 800865a:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800865e:	4b0f      	ldr	r3, [pc, #60]	@ (800869c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8008660:	490f      	ldr	r1, [pc, #60]	@ (80086a0 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008662:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8008664:	4c10      	ldr	r4, [pc, #64]	@ (80086a8 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8008666:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8008668:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800866a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800866c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8008670:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8008674:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 8008678:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800867a:	699a      	ldr	r2, [r3, #24]
 800867c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008680:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8008684:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008688:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800868a:	6a1a      	ldr	r2, [r3, #32]
 800868c:	f022 0210 	bic.w	r2, r2, #16
 8008690:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8008692:	6a1a      	ldr	r2, [r3, #32]
 8008694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	e7cc      	b.n	8008636 <R3_2_RLDetectionModeEnable+0x5e>
 800869c:	08008089 	.word	0x08008089
 80086a0:	08007eb1 	.word	0x08007eb1
 80086a4:	08007fa9 	.word	0x08007fa9
 80086a8:	08007e5d 	.word	0x08007e5d

080086ac <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 80086ac:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d03d      	beq.n	8008730 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80086b8:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80086bc:	681b      	ldr	r3, [r3, #0]
{
 80086be:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	4c40      	ldr	r4, [pc, #256]	@ (80087c4 <R3_2_RLDetectionModeDisable+0x118>)
 80086c4:	4022      	ands	r2, r4
 80086c6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80086ca:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80086cc:	6a1a      	ldr	r2, [r3, #32]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80086d4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80086d8:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 80086da:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 80086de:	d028      	beq.n	8008732 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80086e0:	2a02      	cmp	r2, #2
 80086e2:	d04a      	beq.n	800877a <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 80086e4:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80086e6:	699a      	ldr	r2, [r3, #24]
 80086e8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80086ec:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 80086f0:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 80086f4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80086f6:	6a1a      	ldr	r2, [r3, #32]
 80086f8:	f042 0210 	orr.w	r2, r2, #16
 80086fc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80086fe:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008700:	69da      	ldr	r2, [r3, #28]
 8008702:	4022      	ands	r2, r4
 8008704:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008708:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008710:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008712:	4a2d      	ldr	r2, [pc, #180]	@ (80087c8 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008714:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8008716:	492d      	ldr	r1, [pc, #180]	@ (80087cc <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8008718:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800871a:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800871c:	4c2d      	ldr	r4, [pc, #180]	@ (80087d4 <R3_2_RLDetectionModeDisable+0x128>)
 800871e:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8008720:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8008722:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8008726:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800872a:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800872e:	4770      	bx	lr
 8008730:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8008732:	6a1a      	ldr	r2, [r3, #32]
 8008734:	f042 0204 	orr.w	r2, r2, #4
 8008738:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800873a:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800873c:	699a      	ldr	r2, [r3, #24]
 800873e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008742:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8008746:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800874a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800874c:	6a1a      	ldr	r2, [r3, #32]
 800874e:	f042 0210 	orr.w	r2, r2, #16
 8008752:	621a      	str	r2, [r3, #32]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800875a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800875c:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	4022      	ands	r2, r4
 8008762:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008766:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800876e:	621a      	str	r2, [r3, #32]
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008776:	621a      	str	r2, [r3, #32]
}
 8008778:	e7cb      	b.n	8008712 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800877a:	6a1a      	ldr	r2, [r3, #32]
 800877c:	f022 0204 	bic.w	r2, r2, #4
 8008780:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008782:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800878a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800878e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8008792:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	f042 0210 	orr.w	r2, r2, #16
 800879a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087a2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80087a4:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80087a6:	69da      	ldr	r2, [r3, #28]
 80087a8:	4022      	ands	r2, r4
 80087aa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80087ae:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80087b6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80087b8:	6a1a      	ldr	r2, [r3, #32]
 80087ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087be:	621a      	str	r2, [r3, #32]
}
 80087c0:	e7a7      	b.n	8008712 <R3_2_RLDetectionModeDisable+0x66>
 80087c2:	bf00      	nop
 80087c4:	fffeff8c 	.word	0xfffeff8c
 80087c8:	08007b39 	.word	0x08007b39
 80087cc:	08007d9d 	.word	0x08007d9d
 80087d0:	08007fa9 	.word	0x08007fa9
 80087d4:	08007f35 	.word	0x08007f35

080087d8 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80087d8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80087dc:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80087e0:	6812      	ldr	r2, [r2, #0]
{
 80087e2:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80087e4:	69d0      	ldr	r0, [r2, #28]
 80087e6:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 80087ea:	fb0c f101 	mul.w	r1, ip, r1
 80087ee:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
 80087f2:	0c09      	lsrs	r1, r1, #16
 80087f4:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
{
 80087f8:	b410      	push	{r4}
    pHandle->_Super.CntPhA = (uint16_t)val;
 80087fa:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 80087fe:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008800:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8008804:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008808:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800880c:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800880e:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008810:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008812:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008814:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 8008818:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800881c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 8008820:	f04f 0c03 	mov.w	ip, #3
 8008824:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 8008828:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800882a:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800882c:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008830:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008832:	d007      	beq.n	8008844 <R3_2_RLDetectionModeSetDuty+0x6c>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008834:	4b06      	ldr	r3, [pc, #24]	@ (8008850 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8008836:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800883a:	421a      	tst	r2, r3
 800883c:	bf14      	ite	ne
 800883e:	2001      	movne	r0, #1
 8008840:	2000      	moveq	r0, #0
}
 8008842:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8008844:	2200      	movs	r2, #0
}
 8008846:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800884a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800884e:	4770      	bx	lr
 8008850:	02000070 	.word	0x02000070

08008854 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008854:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008858:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800885c:	681b      	ldr	r3, [r3, #0]
{
 800885e:	b430      	push	{r4, r5}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8008860:	699c      	ldr	r4, [r3, #24]
 8008862:	f024 0408 	bic.w	r4, r4, #8
 8008866:	619c      	str	r4, [r3, #24]
 8008868:	699c      	ldr	r4, [r3, #24]
 800886a:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 800886e:	619c      	str	r4, [r3, #24]
 8008870:	69dc      	ldr	r4, [r3, #28]
 8008872:	f024 0408 	bic.w	r4, r4, #8
 8008876:	61dc      	str	r4, [r3, #28]
 8008878:	69dc      	ldr	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800887a:	2100      	movs	r1, #0
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800887c:	3a05      	subs	r2, #5
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800887e:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8008882:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008884:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008886:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008888:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800888a:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800888c:	699a      	ldr	r2, [r3, #24]
 800888e:	f042 0208 	orr.w	r2, r2, #8
 8008892:	619a      	str	r2, [r3, #24]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800889a:	619a      	str	r2, [r3, #24]
 800889c:	69da      	ldr	r2, [r3, #28]
 800889e:	f042 0208 	orr.w	r2, r2, #8
 80088a2:	61da      	str	r2, [r3, #28]
 80088a4:	69da      	ldr	r2, [r3, #28]
 80088a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088aa:	61da      	str	r2, [r3, #28]
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    
    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80088ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80088b2:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80088b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088ba:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 80088bc:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80088c0:	2a02      	cmp	r2, #2
 80088c2:	d10b      	bne.n	80088dc <R3_2_RLTurnOnLowSidesAndStart+0x88>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80088c4:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80088c8:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80088cc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 80088ce:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80088d0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 80088d4:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80088d6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 80088da:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 80088dc:	2203      	movs	r2, #3
 80088de:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 80088e2:	6a1a      	ldr	r2, [r3, #32]
 80088e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);

#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80088e8:	bc30      	pop	{r4, r5}
 80088ea:	621a      	str	r2, [r3, #32]
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop

080088f0 <RVBS_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.AvBusVoltage_d = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80088f0:	8943      	ldrh	r3, [r0, #10]
 80088f2:	8a02      	ldrh	r2, [r0, #16]
 80088f4:	4413      	add	r3, r2
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 80088fa:	4770      	bx	lr

080088fc <RVBS_CalcAvVbus>:
  else
  {
#endif
    uint16_t hAux = rawValue;

    if (0xFFFFU == hAux)
 80088fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008900:	4291      	cmp	r1, r2
 8008902:	d101      	bne.n	8008908 <RVBS_CalcAvVbus+0xc>
  uint16_t tempValue = 0U;
 8008904:	2000      	movs	r0, #0
 8008906:	4770      	bx	lr
    {
      /* Nothing to do */
    }
    else
    {
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8008908:	88c2      	ldrh	r2, [r0, #6]
 800890a:	4603      	mov	r3, r0
 800890c:	1a89      	subs	r1, r1, r2
  */
uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
  uint16_t fault;
  /* If both thresholds are equal, single threshold feature is used */
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800890e:	8940      	ldrh	r0, [r0, #10]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8008910:	eb02 2221 	add.w	r2, r2, r1, asr #8
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008914:	8999      	ldrh	r1, [r3, #12]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8008916:	b292      	uxth	r2, r2
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008918:	4288      	cmp	r0, r1
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 800891a:	80da      	strh	r2, [r3, #6]
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800891c:	d012      	beq.n	8008944 <RVBS_CalcAvVbus+0x48>
    }
  }
  else
  {
    /* If both thresholds are different, hysteresis feature is used (Brake mode) */
    if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800891e:	f8b3 c010 	ldrh.w	ip, [r3, #16]
 8008922:	4594      	cmp	ip, r2
 8008924:	d818      	bhi.n	8008958 <RVBS_CalcAvVbus+0x5c>
{
 8008926:	b410      	push	{r4}
    {
      fault = MC_UNDER_VOLT;
    }
    else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8008928:	7b9c      	ldrb	r4, [r3, #14]
 800892a:	b134      	cbz	r4, 800893a <RVBS_CalcAvVbus+0x3e>
        fault = MC_OVER_VOLT;
      }
    }
    else
    {
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800892c:	4282      	cmp	r2, r0
 800892e:	d816      	bhi.n	800895e <RVBS_CalcAvVbus+0x62>
      {
        pHandle->OverVoltageHysteresisUpDir = false;
        fault = MC_OVER_VOLT;
      }
      else{
        fault = MC_NO_ERROR;
 8008930:	2000      	movs	r0, #0
}
 8008932:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008936:	8118      	strh	r0, [r3, #8]
}
 8008938:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800893a:	428a      	cmp	r2, r1
 800893c:	d211      	bcs.n	8008962 <RVBS_CalcAvVbus+0x66>
        pHandle->OverVoltageHysteresisUpDir = true;
 800893e:	2201      	movs	r2, #1
 8008940:	739a      	strb	r2, [r3, #14]
        fault = MC_NO_ERROR;
 8008942:	e7f5      	b.n	8008930 <RVBS_CalcAvVbus+0x34>
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008944:	4282      	cmp	r2, r0
 8008946:	d80e      	bhi.n	8008966 <RVBS_CalcAvVbus+0x6a>
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008948:	8a18      	ldrh	r0, [r3, #16]
 800894a:	4290      	cmp	r0, r2
 800894c:	bf94      	ite	ls
 800894e:	2000      	movls	r0, #0
 8008950:	2001      	movhi	r0, #1
 8008952:	0080      	lsls	r0, r0, #2
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008954:	8118      	strh	r0, [r3, #8]
}
 8008956:	4770      	bx	lr
      fault = MC_UNDER_VOLT;
 8008958:	2004      	movs	r0, #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800895a:	8118      	strh	r0, [r3, #8]
}
 800895c:	4770      	bx	lr
        pHandle->OverVoltageHysteresisUpDir = false;
 800895e:	2200      	movs	r2, #0
 8008960:	739a      	strb	r2, [r3, #14]
        fault = MC_OVER_VOLT;
 8008962:	2002      	movs	r0, #2
 8008964:	e7e5      	b.n	8008932 <RVBS_CalcAvVbus+0x36>
 8008966:	2002      	movs	r0, #2
 8008968:	e7f4      	b.n	8008954 <RVBS_CalcAvVbus+0x58>
 800896a:	bf00      	nop

0800896c <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800896c:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800896e:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8008970:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8008974:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8008978:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800897a:	4770      	bx	lr

0800897c <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800897c:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8008980:	2901      	cmp	r1, #1
{
 8008982:	b410      	push	{r4}
 8008984:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8008986:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 8008988:	d909      	bls.n	800899e <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800898a:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800898c:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800898e:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 8008990:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8008992:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 8008996:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8008998:	f85d 4b04 	ldr.w	r4, [sp], #4
 800899c:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800899e:	d005      	beq.n	80089ac <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80089a0:	fb92 f0f4 	sdiv	r0, r2, r4
}
 80089a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 80089a8:	609a      	str	r2, [r3, #8]
}
 80089aa:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80089ac:	6840      	ldr	r0, [r0, #4]
 80089ae:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 80089b2:	2100      	movs	r1, #0
}
 80089b4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 80089b8:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 80089ba:	609a      	str	r2, [r3, #8]
}
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop

080089c0 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 80089c0:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 80089c2:	fab0 f080 	clz	r0, r0
 80089c6:	0940      	lsrs	r0, r0, #5
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop

080089cc <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 80089cc:	2800      	cmp	r0, #0
 80089ce:	bfb8      	it	lt
 80089d0:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 80089d2:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80089d6:	d213      	bcs.n	8008a00 <getScalingFactor+0x34>
 80089d8:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 80089da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80089de:	e001      	b.n	80089e4 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d00a      	beq.n	80089fa <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 80089e4:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 80089e8:	4290      	cmp	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	f103 0301 	add.w	r3, r3, #1
 80089f0:	d3f6      	bcc.n	80089e0 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 80089f2:	3901      	subs	r1, #1
 80089f4:	2001      	movs	r0, #1
 80089f6:	4088      	lsls	r0, r1
 80089f8:	4770      	bx	lr
 80089fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80089fe:	4770      	bx	lr
    if (TargetAbs >= limit)
 8008a00:	2001      	movs	r0, #1
}
 8008a02:	4770      	bx	lr

08008a04 <REMNG_ExecRamp>:
{
 8008a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8008a0c:	6880      	ldr	r0, [r0, #8]
 8008a0e:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 8008a10:	4615      	mov	r5, r2
 8008a12:	b962      	cbnz	r2, 8008a2e <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8008a14:	4608      	mov	r0, r1
 8008a16:	f7ff ffd9 	bl	80089cc <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8008a1a:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8008a1e:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8008a20:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 8008a22:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8008a26:	60a6      	str	r6, [r4, #8]
}
 8008a28:	2001      	movs	r0, #1
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8008a2e:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8008a32:	eba1 0708 	sub.w	r7, r1, r8
 8008a36:	4638      	mov	r0, r7
 8008a38:	f7ff ffc8 	bl	80089cc <getScalingFactor>
 8008a3c:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7ff ffc4 	bl	80089cc <getScalingFactor>
 8008a44:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ffc0 	bl	80089cc <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 8008a4c:	45ca      	cmp	sl, r9
 8008a4e:	d318      	bcc.n	8008a82 <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 8008a50:	4548      	cmp	r0, r9
 8008a52:	bf28      	it	cs
 8008a54:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8008a56:	fb08 f300 	mul.w	r3, r8, r0
 8008a5a:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8008a5c:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 8008a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8008a8c <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 8008a60:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8008a62:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 8008a66:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6a:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8008a6c:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8008a6e:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 8008a72:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008a74:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 8008a78:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 8008a82:	4550      	cmp	r0, sl
 8008a84:	bf28      	it	cs
 8008a86:	4650      	movcs	r0, sl
 8008a88:	e7e5      	b.n	8008a56 <REMNG_ExecRamp+0x52>
 8008a8a:	bf00      	nop
 8008a8c:	10624dd3 	.word	0x10624dd3

08008a90 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 8008a90:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8008a92:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8008a94:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 8008a96:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 8008a9a:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 8008a9e:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 8008aa0:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 8008aa4:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008aa6:	b1f9      	cbz	r1, 8008ae8 <RUC_Init+0x58>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8008aa8:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008aaa:	b313      	cbz	r3, 8008af2 <RUC_Init+0x62>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8008aac:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008aae:	b31b      	cbz	r3, 8008af8 <RUC_Init+0x68>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8008ab0:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8008ab2:	b323      	cbz	r3, 8008afe <RUC_Init+0x6e>
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f04f 0c05 	mov.w	ip, #5
 8008aba:	2204      	movs	r2, #4
 8008abc:	b1b3      	cbz	r3, 8008aec <RUC_Init+0x5c>
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8008abe:	8803      	ldrh	r3, [r0, #0]
 8008ac0:	4910      	ldr	r1, [pc, #64]	@ (8008b04 <RUC_Init+0x74>)
 8008ac2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8008ac6:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008aca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8008ace:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008ad2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ad6:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8008ad8:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008ada:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 8008adc:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8008ae0:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8008ae4:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 8008ae8:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008aec:	f10c 32ff 	add.w	r2, ip, #4294967295
 8008af0:	e7e5      	b.n	8008abe <RUC_Init+0x2e>
      bPhase++;
 8008af2:	f04f 0c02 	mov.w	ip, #2
 8008af6:	e7f9      	b.n	8008aec <RUC_Init+0x5c>
 8008af8:	f04f 0c03 	mov.w	ip, #3
 8008afc:	e7f6      	b.n	8008aec <RUC_Init+0x5c>
 8008afe:	f04f 0c04 	mov.w	ip, #4
 8008b02:	e7f3      	b.n	8008aec <RUC_Init+0x5c>
 8008b04:	10624dd3 	.word	0x10624dd3

08008b08 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4604      	mov	r4, r0

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 8008b0e:	2600      	movs	r6, #0
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8008b10:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    pHandle->bStageCnt = 0U;
 8008b14:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 8008b18:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8008b1c:	6ea7      	ldr	r7, [r4, #104]	@ 0x68
    pHandle->hDirection = hMotorDirection;
 8008b1e:	80c1      	strh	r1, [r0, #6]
    pHandle->OTFSCLowside = false;
 8008b20:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 8008b24:	4640      	mov	r0, r8
{
 8008b26:	460d      	mov	r5, r1
    VSS_Clear(pVSS);
 8008b28:	f000 fb86 	bl	8009238 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8008b2c:	2104      	movs	r1, #4
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7f9 ffc0 	bl	8002ab4 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8008b34:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008b36:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008b3a:	b2ad      	uxth	r5, r5
 8008b3c:	fb13 f305 	smulbb	r3, r3, r5
 8008b40:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 8008b42:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8008b46:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8008b4a:	4631      	mov	r1, r6
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b50:	4638      	mov	r0, r7
 8008b52:	f8a8 3006 	strh.w	r3, [r8, #6]
 8008b56:	4632      	mov	r2, r6
 8008b58:	f7f9 ffb0 	bl	8002abc <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8008b5c:	8a21      	ldrh	r1, [r4, #16]
 8008b5e:	89a2      	ldrh	r2, [r4, #12]
 8008b60:	fb11 f105 	smulbb	r1, r1, r5
 8008b64:	b209      	sxth	r1, r1
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7f9 ffa8 	bl	8002abc <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8008b6c:	89e1      	ldrh	r1, [r4, #14]
 8008b6e:	89a2      	ldrh	r2, [r4, #12]
 8008b70:	fb11 f105 	smulbb	r1, r1, r5
 8008b74:	b209      	sxth	r1, r1
 8008b76:	4640      	mov	r0, r8
 8008b78:	f000 fc14 	bl	80093a4 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8008b7e:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8008b80:	4a06      	ldr	r2, [pc, #24]	@ (8008b9c <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 8008b82:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8008b90:	6962      	ldr	r2, [r4, #20]
 8008b92:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8008b94:	3301      	adds	r3, #1
 8008b96:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	10624dd3 	.word	0x10624dd3

08008ba0 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8008ba0:	8883      	ldrh	r3, [r0, #4]
{
 8008ba2:	b510      	push	{r4, lr}
 8008ba4:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8008ba6:	bb4b      	cbnz	r3, 8008bfc <RUC_Exec+0x5c>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8008ba8:	68a0      	ldr	r0, [r4, #8]
 8008baa:	b330      	cbz	r0, 8008bfa <RUC_Exec+0x5a>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8008bac:	8881      	ldrh	r1, [r0, #4]
 8008bae:	88e3      	ldrh	r3, [r4, #6]
 8008bb0:	8802      	ldrh	r2, [r0, #0]
 8008bb2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8008bb4:	fb11 f103 	smulbb	r1, r1, r3
 8008bb8:	b209      	sxth	r1, r1
 8008bba:	f7f9 ff7f 	bl	8002abc <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	88e0      	ldrh	r0, [r4, #6]
 8008bc2:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8008bc4:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8008bc6:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8008bca:	b209      	sxth	r1, r1
 8008bcc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008bce:	f000 fbe9 	bl	80093a4 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008bd2:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008bd4:	f8b4 c000 	ldrh.w	ip, [r4]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008bd8:	8813      	ldrh	r3, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008bda:	490c      	ldr	r1, [pc, #48]	@ (8008c0c <RUC_Exec+0x6c>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8008bdc:	6890      	ldr	r0, [r2, #8]

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 8008bde:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8008be2:	60a0      	str	r0, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008be4:	fb0c f303 	mul.w	r3, ip, r3
 8008be8:	fba1 1303 	umull	r1, r3, r1, r3
 8008bec:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8008bee:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8008bf0:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8008bf2:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8008bf4:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 8008bf8:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8008bfa:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0d0      	beq.n	8008ba8 <RUC_Exec+0x8>
  bool retVal = true;
 8008c06:	2001      	movs	r0, #1
}
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	bf00      	nop
 8008c0c:	10624dd3 	.word	0x10624dd3

08008c10 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8008c10:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8008c14:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8008c18:	4282      	cmp	r2, r0
 8008c1a:	bf34      	ite	cc
 8008c1c:	2000      	movcc	r0, #0
 8008c1e:	2001      	movcs	r0, #1
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008c24:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop

08008c2c <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008c2c:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8008c30:	4603      	mov	r3, r0
 8008c32:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8008c34:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8008c38:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8008c3c:	bfb8      	it	lt
 8008c3e:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008c40:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008c44:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008c46:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008c48:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 8008c4a:	bfb8      	it	lt
 8008c4c:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008c4e:	458c      	cmp	ip, r1
 8008c50:	d818      	bhi.n	8008c84 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008c52:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8008c56:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 8008c5a:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8008c5e:	bfb8      	it	lt
 8008c60:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008c64:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8008c68:	bfb8      	it	lt
 8008c6a:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008c6e:	45e6      	cmp	lr, ip
 8008c70:	d308      	bcc.n	8008c84 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8008c72:	428c      	cmp	r4, r1
 8008c74:	d306      	bcc.n	8008c84 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008c76:	4290      	cmp	r0, r2
 8008c78:	d809      	bhi.n	8008c8e <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8008c7a:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008c7c:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8008c7e:	bf18      	it	ne
 8008c80:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008c82:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008c84:	4290      	cmp	r0, r2
 8008c86:	d9f8      	bls.n	8008c7a <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8008c88:	3201      	adds	r2, #1
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	e7f5      	b.n	8008c7a <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8008c8e:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008c90:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8008c92:	2001      	movs	r0, #1
}
 8008c94:	bd10      	pop	{r4, pc}
 8008c96:	bf00      	nop

08008c98 <SPD_GetS16Speed>:
  * @brief  Returns the average mechanical rotor speed in RPM*SPEED_UNIT/U_RPM.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed.
  * - Called for speed monitoring through MotorPilote.
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
 8008c98:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop

08008ca0 <STO_PLL_CalcElAngle>:
  * @param  pInputs: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8008ca4:	4604      	mov	r4, r0
{
 8008ca6:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	f000 80cf 	beq.w	8008e4c <STO_PLL_CalcElAngle+0x1ac>
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	f000 80cf 	beq.w	8008e52 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8008cb4:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 8008cb8:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 8008cba:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008cbe:	429f      	cmp	r7, r3
 8008cc0:	f340 80d1 	ble.w	8008e66 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8008cc4:	6683      	str	r3, [r0, #104]	@ 0x68
 8008cc6:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8008cc8:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8008ccc:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8008cce:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8008cd2:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8008cd4:	9201      	str	r2, [sp, #4]
 8008cd6:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8008cda:	f2c0 80c1 	blt.w	8008e60 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8008cde:	425b      	negs	r3, r3
 8008ce0:	429e      	cmp	r6, r3
 8008ce2:	f340 80bd 	ble.w	8008e60 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008ce6:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 8008cea:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 8008cee:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8008cf2:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008cf6:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8008cf8:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008cfc:	f340 80b9 	ble.w	8008e72 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8008d00:	6623      	str	r3, [r4, #96]	@ 0x60
 8008d02:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8008d04:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 8008d08:	4543      	cmp	r3, r8
 8008d0a:	f2c0 80a6 	blt.w	8008e5a <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8008d0e:	425b      	negs	r3, r3
 8008d10:	4598      	cmp	r8, r3
 8008d12:	f340 80a2 	ble.w	8008e5a <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008d16:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8008d18:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008d1c:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008d1e:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8008d22:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008d26:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8008d2a:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8008d2e:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8008d32:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008d36:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8008d38:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8008d3c:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8008d40:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008d44:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008d46:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008d48:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008d4a:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008d4c:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8008d4e:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8008d52:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008d56:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8008d5a:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8008d5e:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008d62:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8008d64:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 8008d68:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 8008d6a:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8008d6e:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8008d72:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8008d76:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8008d78:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 8008d7c:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 8008d80:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8008d84:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 8008d88:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 8008d8a:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 8008d8e:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8008d92:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008d96:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 8008d98:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8008d9c:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8008da0:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8008da4:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 8008da8:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 8008dac:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008db0:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8008db4:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8008db8:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 8008dbc:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 8008dc0:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 8008dc4:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 8008dc8:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 8008dcc:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d154      	bne.n	8008e7e <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8008dda:	bfa8      	it	ge
 8008ddc:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8008de0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008de4:	f7f8 fca0 	bl	8001728 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8008de8:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8008dea:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8008dee:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8008df2:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8008df4:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8008df8:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8008dfc:	f340 31cf 	sbfx	r1, r0, #15, #16
 8008e00:	f345 35cf 	sbfx	r5, r5, #15, #16
 8008e04:	1a69      	subs	r1, r5, r1
 8008e06:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8008e0a:	f7fe fdb1 	bl	8007970 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8008e0e:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8008e12:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8008e16:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8008e18:	3301      	adds	r3, #1
 8008e1a:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8008e1c:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8008e1e:	bf12      	itee	ne
 8008e20:	461a      	movne	r2, r3
 8008e22:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 8008e24:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8008e26:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008e2a:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 8008e2e:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8008e32:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8008e36:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8008e3a:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 8008e3c:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 8008e3e:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 8008e40:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8008e44:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8008e46:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8008e4a:	80a0      	strh	r0, [r4, #4]
}
 8008e4c:	b009      	add	sp, #36	@ 0x24
 8008e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8008e52:	4608      	mov	r0, r1
}
 8008e54:	b009      	add	sp, #36	@ 0x24
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8008e5a:	6663      	str	r3, [r4, #100]	@ 0x64
 8008e5c:	4698      	mov	r8, r3
 8008e5e:	e75a      	b.n	8008d16 <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8008e60:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8008e62:	461e      	mov	r6, r3
 8008e64:	e73f      	b.n	8008ce6 <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8008e66:	425a      	negs	r2, r3
 8008e68:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8008e6a:	bfdc      	itt	le
 8008e6c:	6682      	strle	r2, [r0, #104]	@ 0x68
 8008e6e:	4617      	movle	r7, r2
 8008e70:	e72a      	b.n	8008cc8 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8008e72:	425a      	negs	r2, r3
 8008e74:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8008e76:	bfdc      	itt	le
 8008e78:	6622      	strle	r2, [r4, #96]	@ 0x60
 8008e7a:	4691      	movle	r9, r2
 8008e7c:	e742      	b.n	8008d04 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8008e7e:	fa1f fa83 	uxth.w	sl, r3
 8008e82:	e7ad      	b.n	8008de0 <STO_PLL_CalcElAngle+0x140>

08008e84 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8008e86:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008e8a:	2d00      	cmp	r5, #0
 8008e8c:	f000 80a1 	beq.w	8008fd2 <STO_PLL_CalcAvrgMecSpeedUnit+0x14e>
 8008e90:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 8008e94:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 8008e98:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8008e9a:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8008e9e:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008ea2:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8008ea4:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008ea6:	d1fa      	bne.n	8008e9e <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8008ea8:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 8008eac:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8008eb0:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8008eb4:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008eb8:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 8008eba:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008ebe:	d1f7      	bne.n	8008eb0 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8008ec0:	fb9c f2f5 	sdiv	r2, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8008ec4:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8008ec8:	17de      	asrs	r6, r3, #31
 8008eca:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8008ece:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8008ed0:	fbac 4303 	umull	r4, r3, ip, r3
 8008ed4:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 8008ed8:	09e4      	lsrs	r4, r4, #7
 8008eda:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8008ede:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8008ee0:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8008ee4:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008ee8:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8008eea:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008eee:	bfd8      	it	le
 8008ef0:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8008ef4:	69c5      	ldr	r5, [r0, #28]
 8008ef6:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008efa:	bfc8      	it	gt
 8008efc:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008f00:	7845      	ldrb	r5, [r0, #1]
 8008f02:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8008f06:	b21d      	sxth	r5, r3
 8008f08:	800d      	strh	r5, [r1, #0]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 8008f0a:	2700      	movs	r7, #0
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8008f0c:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8008f0e:	f880 c0f5 	strb.w	ip, [r0, #245]	@ 0xf5
    if (false == pHandle->IsAlgorithmConverged)
 8008f12:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 8008f16:	b996      	cbnz	r6, 8008f3e <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
    if (false == pHandle->IsAlgorithmConverged)
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	d04f      	beq.n	8008fbc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8008f1c:	4294      	cmp	r4, r2
 8008f1e:	dc44      	bgt.n	8008faa <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
        pHandle->ReliabilityCounter++;
 8008f20:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8008f24:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8008f2a:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 8008f2c:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 8008f30:	d344      	bcc.n	8008fbc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
          pHandle->ReliabilityCounter = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008f38:	7002      	strb	r2, [r0, #0]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8008f3e:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8008f40:	f8b0 611a 	ldrh.w	r6, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8008f44:	bfb8      	it	lt
 8008f46:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8008f48:	429e      	cmp	r6, r3
 8008f4a:	dd3b      	ble.n	8008fc4 <STO_PLL_CalcAvrgMecSpeedUnit+0x140>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8008f4c:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8008f50:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 8008f54:	fb06 fc06 	mul.w	ip, r6, r6
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8008f58:	f890 6118 	ldrb.w	r6, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 8008f5c:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8008f60:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008f64:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8008f68:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8008f6c:	fb03 f606 	mul.w	r6, r3, r6
 8008f70:	2e00      	cmp	r6, #0
 8008f72:	bfb8      	it	lt
 8008f74:	363f      	addlt	r6, #63	@ 0x3f
 8008f76:	11b6      	asrs	r6, r6, #6
        wEstBemfSq *= wEstBemf;
 8008f78:	fb06 f303 	mul.w	r3, r6, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	461e      	mov	r6, r3
 8008f80:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 8008f84:	bfb8      	it	lt
 8008f86:	f103 063f 	addlt.w	r6, r3, #63	@ 0x3f
 8008f8a:	11b6      	asrs	r6, r6, #6
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8008f8c:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8008f90:	fb0c 3316 	mls	r3, ip, r6, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8008f94:	429f      	cmp	r7, r3
 8008f96:	bfd4      	ite	le
 8008f98:	2600      	movle	r6, #0
 8008f9a:	2601      	movgt	r6, #1
 8008f9c:	f880 60f9 	strb.w	r6, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8008fa0:	b165      	cbz	r5, 8008fbc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8008fa2:	4294      	cmp	r4, r2
 8008fa4:	ddbc      	ble.n	8008f20 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 8008fa6:	429f      	cmp	r7, r3
 8008fa8:	ddba      	ble.n	8008f20 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->_Super.bSpeedErrorNumber = (pHandle->_Super.bSpeedErrorNumber> 1) ? pHandle->_Super.bSpeedErrorNumber-1 :0;		
 8008faa:	7803      	ldrb	r3, [r0, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	bf38      	it	cc
 8008fb0:	2301      	movcc	r3, #1
        pHandle->ReliabilityCounter = 0U;
 8008fb2:	2200      	movs	r2, #0
        pHandle->_Super.bSpeedErrorNumber = (pHandle->_Super.bSpeedErrorNumber> 1) ? pHandle->_Super.bSpeedErrorNumber-1 :0;		
 8008fb4:	3b01      	subs	r3, #1
        pHandle->ReliabilityCounter = 0U;
 8008fb6:	f880 20f7 	strb.w	r2, [r0, #247]	@ 0xf7
        pHandle->_Super.bSpeedErrorNumber = (pHandle->_Super.bSpeedErrorNumber> 1) ? pHandle->_Super.bSpeedErrorNumber-1 :0;		
 8008fba:	7003      	strb	r3, [r0, #0]
}
 8008fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8008fc0:	f7ff be34 	b.w	8008c2c <SPD_IsMecSpeedReliable>
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8008fc4:	e9c0 773f 	strd	r7, r7, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8008fc8:	f880 70f9 	strb.w	r7, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	d1a7      	bne.n	8008f20 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 8008fd0:	e7f4      	b.n	8008fbc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8008fd2:	462a      	mov	r2, r5
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	462e      	mov	r6, r5
 8008fd8:	46ae      	mov	lr, r5
 8008fda:	e776      	b.n	8008eca <STO_PLL_CalcAvrgMecSpeedUnit+0x46>

08008fdc <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8008fdc:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8008fe0:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008fe4:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8008fe8:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 8008fec:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8008fee:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 8008ff2:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8008ff6:	ebac 0101 	sub.w	r1, ip, r1
 8008ffa:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8008ffc:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 8008ffe:	b959      	cbnz	r1, 8009018 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8009000:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 8009004:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8009006:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800900a:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800900e:	4113      	asrs	r3, r2
}
 8009010:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8009014:	81c3      	strh	r3, [r0, #14]
}
 8009016:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8009018:	440a      	add	r2, r1
 800901a:	b291      	uxth	r1, r2
 800901c:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800901e:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8009020:	bfdc      	itt	le
 8009022:	eba1 010c 	suble.w	r1, r1, ip
 8009026:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8009028:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800902c:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 8009030:	1a9b      	subs	r3, r3, r2
 8009032:	e7e8      	b.n	8009006 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

08009034 <STO_PLL_Clear>:
{
 8009034:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8009036:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800903a:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800903c:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 8009040:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 8009044:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 8009048:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800904a:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800904c:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800904e:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 8009052:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 8009056:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800905a:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800905e:	b11a      	cbz	r2, 8009068 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 8009060:	0052      	lsls	r2, r2, #1
 8009062:	3074      	adds	r0, #116	@ 0x74
 8009064:	f000 f9ec 	bl	8009440 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8009068:	2100      	movs	r1, #0
 800906a:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800906e:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8009072:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800907a:	f7fe bc47 	b.w	800790c <PID_SetIntegralTerm>
 800907e:	bf00      	nop

08009080 <STO_PLL_Init>:
{
 8009080:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8009082:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009086:	4b19      	ldr	r3, [pc, #100]	@ (80090ec <STO_PLL_Init+0x6c>)
 8009088:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800908c:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 8009090:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8009092:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8009094:	fb93 f3fe 	sdiv	r3, r3, lr
 8009098:	b21b      	sxth	r3, r3
{
 800909a:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800909c:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 80090a0:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 80090a2:	b30b      	cbz	r3, 80090e8 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 80090a4:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 80090a6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 80090aa:	f102 0c01 	add.w	ip, r2, #1
 80090ae:	105b      	asrs	r3, r3, #1
 80090b0:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 80090b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 80090b6:	fa1f f28c 	uxth.w	r2, ip
 80090ba:	d1f4      	bne.n	80090a6 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 80090bc:	b20a      	sxth	r2, r1
 80090be:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 80090c0:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 80090c4:	480a      	ldr	r0, [pc, #40]	@ (80090f0 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 80090c6:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 80090c8:	17cb      	asrs	r3, r1, #31
 80090ca:	fb80 0101 	smull	r0, r1, r0, r1
 80090ce:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 80090d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 80090d4:	4620      	mov	r0, r4
 80090d6:	f7ff ffad 	bl	8009034 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 80090da:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80090de:	f7fe fc01 	bl	80078e4 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 80090e2:	2300      	movs	r3, #0
 80090e4:	8263      	strh	r3, [r4, #18]
}
 80090e6:	bd10      	pop	{r4, pc}
 80090e8:	4671      	mov	r1, lr
 80090ea:	e7eb      	b.n	80090c4 <STO_PLL_Init+0x44>
 80090ec:	000fea5e 	.word	0x000fea5e
 80090f0:	06488dc5 	.word	0x06488dc5

080090f4 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 80090f4:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 80090f8:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 80090fa:	b112      	cbz	r2, 8009102 <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80090fc:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 8009100:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 8009102:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 8009106:	b128      	cbz	r0, 8009114 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 8009108:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800910a:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800910c:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009110:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8009112:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009114:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009118:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800911c:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800911e:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8009122:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8009126:	4614      	mov	r4, r2
      if (wtemp > 0)
 8009128:	dd38      	ble.n	800919c <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800912a:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800912e:	bfbc      	itt	lt
 8009130:	f1cc 0c00 	rsblt	ip, ip, #0
 8009134:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 8009138:	2a00      	cmp	r2, #0
 800913a:	db34      	blt.n	80091a6 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800913c:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009140:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009144:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 8009148:	b349      	cbz	r1, 800919e <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800914a:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800914e:	fa1f f18c 	uxth.w	r1, ip
 8009152:	428d      	cmp	r5, r1
 8009154:	d223      	bcs.n	800919e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 8009156:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800915a:	2a00      	cmp	r2, #0
 800915c:	bfb8      	it	lt
 800915e:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 8009160:	f342 120f 	sbfx	r2, r2, #4, #16
 8009164:	4594      	cmp	ip, r2
 8009166:	db1a      	blt.n	800919e <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8009168:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800916c:	f1be 0f00 	cmp.w	lr, #0
 8009170:	bfb8      	it	lt
 8009172:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8009176:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800917a:	45f4      	cmp	ip, lr
 800917c:	dc0f      	bgt.n	800919e <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800917e:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009182:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 8009186:	3201      	adds	r2, #1
 8009188:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800918a:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800918c:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8009190:	d804      	bhi.n	800919c <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 8009192:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8009194:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8009196:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800919a:	701a      	strb	r2, [r3, #0]
}
 800919c:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 80091a4:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 80091a6:	4252      	negs	r2, r2
 80091a8:	b212      	sxth	r2, r2
 80091aa:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 80091ac:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80091b0:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 80091b4:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80091b6:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 80091ba:	2900      	cmp	r1, #0
 80091bc:	d0ef      	beq.n	800919e <STO_PLL_IsObserverConverged+0xaa>
 80091be:	e7c4      	b.n	800914a <STO_PLL_IsObserverConverged+0x56>

080091c0 <STO_PLL_GetEstimatedBemf>:
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
}
 80091c0:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 80091c2:	b082      	sub	sp, #8
}
 80091c4:	b002      	add	sp, #8
 80091c6:	4770      	bx	lr

080091c8 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 80091c8:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 80091ca:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80091cc:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80091d0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80091d4:	410a      	asrs	r2, r1
  return (iaux);
 80091d6:	410b      	asrs	r3, r1
 80091d8:	b292      	uxth	r2, r2
 80091da:	f362 000f 	bfi	r0, r2, #0, #16
 80091de:	b29b      	uxth	r3, r3
{
 80091e0:	b082      	sub	sp, #8
  return (iaux);
 80091e2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80091e6:	b002      	add	sp, #8
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop

080091ec <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 80091ec:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80091f0:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 80091f2:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 80091f6:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop

080091fc <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 80091fc:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 80091fe:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop

08009204 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8009204:	6800      	ldr	r0, [r0, #0]
 8009206:	2100      	movs	r1, #0
 8009208:	3034      	adds	r0, #52	@ 0x34
 800920a:	f7fe bb7f 	b.w	800790c <PID_SetIntegralTerm>
 800920e:	bf00      	nop

08009210 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8009210:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 8009212:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 8009216:	4770      	bx	lr

08009218 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8009218:	6803      	ldr	r3, [r0, #0]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop

08009224 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 8009224:	6803      	ldr	r3, [r0, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop

08009230 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8009230:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop

08009238 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8009238:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800923a:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800923c:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800923e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8009242:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8009244:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8009246:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8009248:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800924a:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800924c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800924e:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop

08009254 <VSS_Init>:
{
 8009254:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8009256:	f7ff ffef 	bl	8009238 <VSS_Clear>
}
 800925a:	bd08      	pop	{r3, pc}

0800925c <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800925c:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8009260:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8009262:	b11a      	cbz	r2, 800926c <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8009264:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8009268:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800926a:	4770      	bx	lr
{
 800926c:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800926e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8009272:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009274:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8009276:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800927a:	785a      	ldrb	r2, [r3, #1]
 800927c:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009280:	4460      	add	r0, ip
 8009282:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8009286:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8009288:	b200      	sxth	r0, r0
 800928a:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800928c:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800928e:	b1fc      	cbz	r4, 80092d0 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8009290:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8009294:	b1f2      	cbz	r2, 80092d4 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 8009296:	3a01      	subs	r2, #1
 8009298:	b212      	sxth	r2, r2
 800929a:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800929c:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80092a0:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80092a2:	db26      	blt.n	80092f2 <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80092a4:	eba1 0e0e 	sub.w	lr, r1, lr
 80092a8:	fa0f fe8e 	sxth.w	lr, lr
 80092ac:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80092ae:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 80092b2:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 80092b6:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 80092ba:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 80092be:	fb12 f205 	smulbb	r2, r2, r5
 80092c2:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 80092c4:	db0e      	blt.n	80092e4 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 80092c6:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80092c8:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 80092ca:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 80092ce:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 80092d0:	8098      	strh	r0, [r3, #4]
}
 80092d2:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 80092d4:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 80092d8:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 80092da:	2401      	movs	r4, #1
 80092dc:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 80092e0:	8098      	strh	r0, [r3, #4]
}
 80092e2:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 80092e4:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	d0f1      	beq.n	80092d0 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 80092ec:	440a      	add	r2, r1
 80092ee:	b210      	sxth	r0, r2
 80092f0:	e7ee      	b.n	80092d0 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 80092f2:	ebae 0e01 	sub.w	lr, lr, r1
 80092f6:	fa0f fe8e 	sxth.w	lr, lr
 80092fa:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 80092fe:	e7d6      	b.n	80092ae <VSS_CalcElAngle+0x52>

08009300 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8009300:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8009302:	2a01      	cmp	r2, #1
{
 8009304:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 8009306:	d922      	bls.n	800934e <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8009308:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800930a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800930c:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800930e:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8009310:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8009312:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009316:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8009318:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800931a:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800931e:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8009320:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8009324:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8009328:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800932c:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800932e:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8009332:	b212      	sxth	r2, r2
 8009334:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8009336:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8009338:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800933a:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800933c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 8009340:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8009342:	b970      	cbnz	r0, 8009362 <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009344:	78da      	ldrb	r2, [r3, #3]
 8009346:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8009348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934c:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800934e:	d00d      	beq.n	800936c <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009350:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 8009354:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8009358:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800935a:	bb00      	cbnz	r0, 800939e <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800935c:	78da      	ldrb	r2, [r3, #3]
 800935e:	701a      	strb	r2, [r3, #0]
}
 8009360:	4770      	bx	lr
 8009362:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff bc60 	b.w	8008c2c <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800936c:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8009370:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009374:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009376:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8009378:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800937c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009380:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8009382:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8009386:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800938a:	785a      	ldrb	r2, [r3, #1]
 800938c:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 8009390:	2000      	movs	r0, #0
 8009392:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8009394:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8009398:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800939a:	2800      	cmp	r0, #0
 800939c:	d0de      	beq.n	800935c <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff bc44 	b.w	8008c2c <SPD_IsMecSpeedReliable>

080093a4 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80093a4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80093a8:	b9a3      	cbnz	r3, 80093d4 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80093aa:	8b43      	ldrh	r3, [r0, #26]
{
 80093ac:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80093ae:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80093b0:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80093b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80093b8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80093bc:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 80093be:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 80093c2:	b942      	cbnz	r2, 80093d6 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80093c4:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80093c8:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80093ca:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 80093ce:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80093d0:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80093d2:	bd10      	pop	{r4, pc}
 80093d4:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 80093d6:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80093d8:	fb02 f303 	mul.w	r3, r2, r3
 80093dc:	4a0e      	ldr	r2, [pc, #56]	@ (8009418 <VSS_SetMecAcceleration+0x74>)
 80093de:	fba2 2303 	umull	r2, r3, r2, r3
 80093e2:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80093e6:	3301      	adds	r3, #1
 80093e8:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80093ea:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 80093ee:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 80093f0:	b91b      	cbnz	r3, 80093fa <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80093f2:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80093f4:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80093f6:	6242      	str	r2, [r0, #36]	@ 0x24
}
 80093f8:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80093fa:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80093fe:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8009402:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009406:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8009408:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800940c:	fb0e f303 	mul.w	r3, lr, r3
 8009410:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8009412:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8009414:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8009416:	e7ef      	b.n	80093f8 <VSS_SetMecAcceleration+0x54>
 8009418:	10624dd3 	.word	0x10624dd3

0800941c <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800941c:	b151      	cbz	r1, 8009434 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800941e:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8009422:	2201      	movs	r2, #1
 8009424:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 8009428:	b923      	cbnz	r3, 8009434 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800942a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800942e:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8009430:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8009432:	4770      	bx	lr
  bool bAux = true;
 8009434:	2001      	movs	r0, #1
 8009436:	4770      	bx	lr

08009438 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8009438:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop

08009440 <memset>:
 8009440:	4402      	add	r2, r0
 8009442:	4603      	mov	r3, r0
 8009444:	4293      	cmp	r3, r2
 8009446:	d100      	bne.n	800944a <memset+0xa>
 8009448:	4770      	bx	lr
 800944a:	f803 1b01 	strb.w	r1, [r3], #1
 800944e:	e7f9      	b.n	8009444 <memset+0x4>

08009450 <__libc_init_array>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4d0d      	ldr	r5, [pc, #52]	@ (8009488 <__libc_init_array+0x38>)
 8009454:	4c0d      	ldr	r4, [pc, #52]	@ (800948c <__libc_init_array+0x3c>)
 8009456:	1b64      	subs	r4, r4, r5
 8009458:	10a4      	asrs	r4, r4, #2
 800945a:	2600      	movs	r6, #0
 800945c:	42a6      	cmp	r6, r4
 800945e:	d109      	bne.n	8009474 <__libc_init_array+0x24>
 8009460:	4d0b      	ldr	r5, [pc, #44]	@ (8009490 <__libc_init_array+0x40>)
 8009462:	4c0c      	ldr	r4, [pc, #48]	@ (8009494 <__libc_init_array+0x44>)
 8009464:	f000 f826 	bl	80094b4 <_init>
 8009468:	1b64      	subs	r4, r4, r5
 800946a:	10a4      	asrs	r4, r4, #2
 800946c:	2600      	movs	r6, #0
 800946e:	42a6      	cmp	r6, r4
 8009470:	d105      	bne.n	800947e <__libc_init_array+0x2e>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	f855 3b04 	ldr.w	r3, [r5], #4
 8009478:	4798      	blx	r3
 800947a:	3601      	adds	r6, #1
 800947c:	e7ee      	b.n	800945c <__libc_init_array+0xc>
 800947e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009482:	4798      	blx	r3
 8009484:	3601      	adds	r6, #1
 8009486:	e7f2      	b.n	800946e <__libc_init_array+0x1e>
 8009488:	080098e8 	.word	0x080098e8
 800948c:	080098e8 	.word	0x080098e8
 8009490:	080098e8 	.word	0x080098e8
 8009494:	080098ec 	.word	0x080098ec

08009498 <memcpy>:
 8009498:	440a      	add	r2, r1
 800949a:	4291      	cmp	r1, r2
 800949c:	f100 33ff 	add.w	r3, r0, #4294967295
 80094a0:	d100      	bne.n	80094a4 <memcpy+0xc>
 80094a2:	4770      	bx	lr
 80094a4:	b510      	push	{r4, lr}
 80094a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d1f9      	bne.n	80094a6 <memcpy+0xe>
 80094b2:	bd10      	pop	{r4, pc}

080094b4 <_init>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	bf00      	nop
 80094b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ba:	bc08      	pop	{r3}
 80094bc:	469e      	mov	lr, r3
 80094be:	4770      	bx	lr

080094c0 <_fini>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr
